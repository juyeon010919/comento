
Comento_I2C_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad84  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  0800af64  0800af64  0000bf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2b8  0800b2b8  0000d138  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2b8  0800b2b8  0000c2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2c0  0800b2c0  0000d138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c0  0800b2c0  0000c2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c4  0800b2c4  0000c2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800b2c8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000138  0800b400  0000d138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  0800b400  0000d258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189ae  00000000  00000000  0000d168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c50  00000000  00000000  00025b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00029768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010be  00000000  00000000  0002ad18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268e7  00000000  00000000  0002bdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2de  00000000  00000000  000526bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde10  00000000  00000000  0006f99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d7ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006304  00000000  00000000  0014d7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00153af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000138 	.word	0x20000138
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800af4c 	.word	0x0800af4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000013c 	.word	0x2000013c
 800021c:	0800af4c 	.word	0x0800af4c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Test_WHOAMI_Check>:
    ACCEL_XOUT_H = 0x3B   // 가속도 X축 상위 바이트
} MPU6050_Register_t;

/// ===========================================
// White Box TC 1: WHO_AM_I 레지스터가 0x68인지 확인
void Test_WHOAMI_Check(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af04      	add	r7, sp, #16
    uint8_t whoami = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &whoami, 1, 100);
 80005f6:	2364      	movs	r3, #100	@ 0x64
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2275      	movs	r2, #117	@ 0x75
 8000606:	21d0      	movs	r1, #208	@ 0xd0
 8000608:	480a      	ldr	r0, [pc, #40]	@ (8000634 <Test_WHOAMI_Check+0x48>)
 800060a:	f002 fae1 	bl	8002bd0 <HAL_I2C_Mem_Read>
    if (whoami == 0x68)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b68      	cmp	r3, #104	@ 0x68
 8000612:	d105      	bne.n	8000620 <Test_WHOAMI_Check+0x34>
        printf("[PASS] WHO_AM_I = 0x%02X (정상)\n", whoami);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4619      	mov	r1, r3
 8000618:	4807      	ldr	r0, [pc, #28]	@ (8000638 <Test_WHOAMI_Check+0x4c>)
 800061a:	f009 fdcd 	bl	800a1b8 <iprintf>
    else
        printf("[FAIL] WHO_AM_I = 0x%02X (비정상)\n", whoami);
}
 800061e:	e004      	b.n	800062a <Test_WHOAMI_Check+0x3e>
        printf("[FAIL] WHO_AM_I = 0x%02X (비정상)\n", whoami);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <Test_WHOAMI_Check+0x50>)
 8000626:	f009 fdc7 	bl	800a1b8 <iprintf>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200001c4 	.word	0x200001c4
 8000638:	0800af64 	.word	0x0800af64
 800063c:	0800af88 	.word	0x0800af88

08000640 <Test_PowerManagement_SleepDisable>:


/// ===========================================
// White Box TC 2: PWR_MGMT_1 레지스터에 0x00 쓰고 읽어서 sleep 모드 해제 확인
void Test_PowerManagement_SleepDisable(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af04      	add	r7, sp, #16
    uint8_t write_data = 0x00;  // sleep 비트 해제
 8000646:	2300      	movs	r3, #0
 8000648:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 100);
 800064a:	2364      	movs	r3, #100	@ 0x64
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2301      	movs	r3, #1
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	226b      	movs	r2, #107	@ 0x6b
 800065a:	21d0      	movs	r1, #208	@ 0xd0
 800065c:	4810      	ldr	r0, [pc, #64]	@ (80006a0 <Test_PowerManagement_SleepDisable+0x60>)
 800065e:	f002 f9bd 	bl	80029dc <HAL_I2C_Mem_Write>

    uint8_t read_back = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &read_back, 1, 100);
 8000666:	2364      	movs	r3, #100	@ 0x64
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2301      	movs	r3, #1
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	1dbb      	adds	r3, r7, #6
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2301      	movs	r3, #1
 8000674:	226b      	movs	r2, #107	@ 0x6b
 8000676:	21d0      	movs	r1, #208	@ 0xd0
 8000678:	4809      	ldr	r0, [pc, #36]	@ (80006a0 <Test_PowerManagement_SleepDisable+0x60>)
 800067a:	f002 faa9 	bl	8002bd0 <HAL_I2C_Mem_Read>
    if (read_back == 0x00)
 800067e:	79bb      	ldrb	r3, [r7, #6]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d103      	bne.n	800068c <Test_PowerManagement_SleepDisable+0x4c>
        printf("[PASS] PWR_MGMT_1 = 0x00 (Sleep 해제 성공)\n");
 8000684:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <Test_PowerManagement_SleepDisable+0x64>)
 8000686:	f009 fdff 	bl	800a288 <puts>
    else
        printf("[FAIL] PWR_MGMT_1 = 0x%02X (Sleep 해제 실패)\n", read_back);
}
 800068a:	e004      	b.n	8000696 <Test_PowerManagement_SleepDisable+0x56>
        printf("[FAIL] PWR_MGMT_1 = 0x%02X (Sleep 해제 실패)\n", read_back);
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <Test_PowerManagement_SleepDisable+0x68>)
 8000692:	f009 fd91 	bl	800a1b8 <iprintf>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001c4 	.word	0x200001c4
 80006a4:	0800afb0 	.word	0x0800afb0
 80006a8:	0800afe0 	.word	0x0800afe0

080006ac <Test_AccelX_Read>:


/// ===========================================
// White Box TC 3: ACCEL_XOUT_H 레지스터에서 가속도 X값 상위 바이트 수신 확인
void Test_AccelX_Read(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af04      	add	r7, sp, #16
    uint8_t accel_x_high = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, &accel_x_high, 1, 100) == HAL_OK)
 80006b6:	2364      	movs	r3, #100	@ 0x64
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	2301      	movs	r3, #1
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2301      	movs	r3, #1
 80006c4:	223b      	movs	r2, #59	@ 0x3b
 80006c6:	21d0      	movs	r1, #208	@ 0xd0
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <Test_AccelX_Read+0x44>)
 80006ca:	f002 fa81 	bl	8002bd0 <HAL_I2C_Mem_Read>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d105      	bne.n	80006e0 <Test_AccelX_Read+0x34>
        printf("[PASS] ACCEL_XOUT_H 수신: 0x%02X\n", accel_x_high);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <Test_AccelX_Read+0x48>)
 80006da:	f009 fd6d 	bl	800a1b8 <iprintf>
    else
        printf("[FAIL] ACCEL_XOUT_H 수신 실패\n");
}
 80006de:	e002      	b.n	80006e6 <Test_AccelX_Read+0x3a>
        printf("[FAIL] ACCEL_XOUT_H 수신 실패\n");
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <Test_AccelX_Read+0x4c>)
 80006e2:	f009 fdd1 	bl	800a288 <puts>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001c4 	.word	0x200001c4
 80006f4:	0800b014 	.word	0x0800b014
 80006f8:	0800b038 	.word	0x0800b038

080006fc <Test_DeviceConnection>:


/// ===========================================
// Black Box TC 1: MPU6050 디바이스 존재 여부 확인 (WHO_AM_I 레지스터 응답)
void Test_DeviceConnection(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af04      	add	r7, sp, #16
    uint8_t id;
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &id, 1, 100) == HAL_OK)
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	2301      	movs	r3, #1
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	2275      	movs	r2, #117	@ 0x75
 8000712:	21d0      	movs	r1, #208	@ 0xd0
 8000714:	4808      	ldr	r0, [pc, #32]	@ (8000738 <Test_DeviceConnection+0x3c>)
 8000716:	f002 fa5b 	bl	8002bd0 <HAL_I2C_Mem_Read>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d103      	bne.n	8000728 <Test_DeviceConnection+0x2c>
        printf("[PASS] MPU6050 연결 성공 (응답 수신됨)\n");
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <Test_DeviceConnection+0x40>)
 8000722:	f009 fdb1 	bl	800a288 <puts>
    else
        printf("[FAIL] MPU6050 응답 없음 (통신 실패)\n");
}
 8000726:	e002      	b.n	800072e <Test_DeviceConnection+0x32>
        printf("[FAIL] MPU6050 응답 없음 (통신 실패)\n");
 8000728:	4805      	ldr	r0, [pc, #20]	@ (8000740 <Test_DeviceConnection+0x44>)
 800072a:	f009 fdad 	bl	800a288 <puts>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200001c4 	.word	0x200001c4
 800073c:	0800b05c 	.word	0x0800b05c
 8000740:	0800b08c 	.word	0x0800b08c

08000744 <Test_InvalidRegisterAccess>:


/// ===========================================
// Black Box TC 2: 존재하지 않는 레지스터(0x00)에 접근해 오류 발생 여부 확인
void Test_InvalidRegisterAccess(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af04      	add	r7, sp, #16
    uint8_t data;
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, 100) != HAL_OK)
 800074a:	2364      	movs	r3, #100	@ 0x64
 800074c:	9302      	str	r3, [sp, #8]
 800074e:	2301      	movs	r3, #1
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2301      	movs	r3, #1
 8000758:	2200      	movs	r2, #0
 800075a:	21d0      	movs	r1, #208	@ 0xd0
 800075c:	4808      	ldr	r0, [pc, #32]	@ (8000780 <Test_InvalidRegisterAccess+0x3c>)
 800075e:	f002 fa37 	bl	8002bd0 <HAL_I2C_Mem_Read>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <Test_InvalidRegisterAccess+0x2c>
        printf("[PASS] 잘못된 레지스터 접근 시 실패 처리됨\n");
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <Test_InvalidRegisterAccess+0x40>)
 800076a:	f009 fd8d 	bl	800a288 <puts>
    else
        printf("[FAIL] 잘못된 레지스터 접근이 허용됨 (비정상)\n");
}
 800076e:	e002      	b.n	8000776 <Test_InvalidRegisterAccess+0x32>
        printf("[FAIL] 잘못된 레지스터 접근이 허용됨 (비정상)\n");
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <Test_InvalidRegisterAccess+0x44>)
 8000772:	f009 fd89 	bl	800a288 <puts>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200001c4 	.word	0x200001c4
 8000784:	0800b0bc 	.word	0x0800b0bc
 8000788:	0800b0f8 	.word	0x0800b0f8

0800078c <Test_DeviceInSleepMode>:


/// ===========================================
// Black Box TC 3: Sleep 모드 설정 후 WHO_AM_I 응답이 안 오는지 확인 (비정상 시나리오)
void Test_DeviceInSleepMode(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af04      	add	r7, sp, #16
    uint8_t sleep_cmd = 0x40;  // sleep bit = 1
 8000792:	2340      	movs	r3, #64	@ 0x40
 8000794:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_I2C_ADDR, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &sleep_cmd, 1, 100);
 8000796:	2364      	movs	r3, #100	@ 0x64
 8000798:	9302      	str	r3, [sp, #8]
 800079a:	2301      	movs	r3, #1
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	226b      	movs	r2, #107	@ 0x6b
 80007a6:	21d0      	movs	r1, #208	@ 0xd0
 80007a8:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <Test_DeviceInSleepMode+0x64>)
 80007aa:	f002 f917 	bl	80029dc <HAL_I2C_Mem_Write>

    uint8_t id = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_I2C_ADDR, WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &id, 1, 100);
 80007b2:	2364      	movs	r3, #100	@ 0x64
 80007b4:	9302      	str	r3, [sp, #8]
 80007b6:	2301      	movs	r3, #1
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	1dbb      	adds	r3, r7, #6
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2301      	movs	r3, #1
 80007c0:	2275      	movs	r2, #117	@ 0x75
 80007c2:	21d0      	movs	r1, #208	@ 0xd0
 80007c4:	480a      	ldr	r0, [pc, #40]	@ (80007f0 <Test_DeviceInSleepMode+0x64>)
 80007c6:	f002 fa03 	bl	8002bd0 <HAL_I2C_Mem_Read>
    if (id != 0x68)
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	2b68      	cmp	r3, #104	@ 0x68
 80007ce:	d005      	beq.n	80007dc <Test_DeviceInSleepMode+0x50>
        printf("[PASS] Sleep 모드 진입 확인 (WHO_AM_I 비정상 응답: 0x%02X)\n", id);
 80007d0:	79bb      	ldrb	r3, [r7, #6]
 80007d2:	4619      	mov	r1, r3
 80007d4:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <Test_DeviceInSleepMode+0x68>)
 80007d6:	f009 fcef 	bl	800a1b8 <iprintf>
    else
        printf("[FAIL] Sleep 상태인데도 정상 응답이 옴 (0x%02X)\n", id);
}
 80007da:	e004      	b.n	80007e6 <Test_DeviceInSleepMode+0x5a>
        printf("[FAIL] Sleep 상태인데도 정상 응답이 옴 (0x%02X)\n", id);
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <Test_DeviceInSleepMode+0x6c>)
 80007e2:	f009 fce9 	bl	800a1b8 <iprintf>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001c4 	.word	0x200001c4
 80007f4:	0800b138 	.word	0x0800b138
 80007f8:	0800b180 	.word	0x0800b180

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f000 fdbf 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f839 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080a:	f000 f9ed 	bl	8000be8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800080e:	f000 f9c1 	bl	8000b94 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000812:	f000 f8f1 	bl	80009f8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000816:	f000 f923 	bl	8000a60 <MX_I2C1_Init>
  MX_SPI2_Init();
 800081a:	f000 f94f 	bl	8000abc <MX_SPI2_Init>
  MX_SPI3_Init();
 800081e:	f000 f983 	bl	8000b28 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000822:	f000 f897 	bl	8000954 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000826:	f008 ff65 	bl	80096f4 <MX_USB_DEVICE_Init>
  // HAL_I2C_Master_Receive(); 각 함수의 매개변수 파악
  uint8_t rx_data[1] = {0};
 800082a:	2300      	movs	r3, #0
 800082c:	713b      	strb	r3, [r7, #4]

  HAL_I2C_Master_Receive(
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	@ 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21c0      	movs	r1, #192	@ 0xc0
 8000838:	480f      	ldr	r0, [pc, #60]	@ (8000878 <main+0x7c>)
 800083a:	f001 fea9 	bl	8002590 <HAL_I2C_Master_Receive>
    1,                 // 수신할 데이터 크기 (1바이트)
    100                // 타임아웃 시간(ms, 응답 없으면 종료)
  );

  // HAL_I2C_Master_Transmit(); 각 함수의 매개변수 파악
  uint8_t vout_data[2] = {0x20, 0xA4};  // 0x20: BUCKA VOUT 레지스터, 0xA4 = 1.025V
 800083e:	f24a 4320 	movw	r3, #42016	@ 0xa420
 8000842:	803b      	strh	r3, [r7, #0]

  // MP5475의 BUCKA 출력 전압을 1.025V로 설정하는 코드
  // 6.25mV 단위로 설정되며, 0xA4 = 164 × 6.25mV = 1.025V

  HAL_I2C_Master_Transmit(
 8000844:	463a      	mov	r2, r7
 8000846:	2364      	movs	r3, #100	@ 0x64
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2302      	movs	r3, #2
 800084c:	21c0      	movs	r1, #192	@ 0xc0
 800084e:	480a      	ldr	r0, [pc, #40]	@ (8000878 <main+0x7c>)
 8000850:	f001 fda0 	bl	8002394 <HAL_I2C_Master_Transmit>
  );
  // Fault 상태 저장할 구조체 선언

  /* USER CODE BEGIN 2 */

  Test_WHOAMI_Check();
 8000854:	f7ff feca 	bl	80005ec <Test_WHOAMI_Check>
    Test_PowerManagement_SleepDisable();
 8000858:	f7ff fef2 	bl	8000640 <Test_PowerManagement_SleepDisable>
    Test_AccelX_Read();
 800085c:	f7ff ff26 	bl	80006ac <Test_AccelX_Read>

    Test_DeviceConnection();
 8000860:	f7ff ff4c 	bl	80006fc <Test_DeviceConnection>
    Test_InvalidRegisterAccess();
 8000864:	f7ff ff6e 	bl	8000744 <Test_InvalidRegisterAccess>
    Test_DeviceInSleepMode();
 8000868:	f7ff ff90 	bl	800078c <Test_DeviceInSleepMode>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);  // 1초마다 루프 반복
 800086c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000870:	f000 fdfa 	bl	8001468 <HAL_Delay>
 8000874:	e7fa      	b.n	800086c <main+0x70>
 8000876:	bf00      	nop
 8000878:	200001c4 	.word	0x200001c4

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	@ 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2234      	movs	r2, #52	@ 0x34
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f009 fddc 	bl	800a448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b29      	ldr	r3, [pc, #164]	@ (800094c <SystemClock_Config+0xd0>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a28      	ldr	r2, [pc, #160]	@ (800094c <SystemClock_Config+0xd0>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b26      	ldr	r3, [pc, #152]	@ (800094c <SystemClock_Config+0xd0>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <SystemClock_Config+0xd4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <SystemClock_Config+0xd4>)
 80008c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <SystemClock_Config+0xd4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008ec:	2308      	movs	r3, #8
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80008f0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80008f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008f6:	2304      	movs	r3, #4
 80008f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008fa:	2308      	movs	r3, #8
 80008fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fe92 	bl	8005630 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000912:	f000 fa17 	bl	8000d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	2103      	movs	r1, #3
 8000932:	4618      	mov	r0, r3
 8000934:	f004 f9d0 	bl	8004cd8 <HAL_RCC_ClockConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800093e:	f000 fa01 	bl	8000d44 <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3750      	adds	r7, #80	@ 0x50
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000968:	4a21      	ldr	r2, [pc, #132]	@ (80009f0 <MX_ADC1_Init+0x9c>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_ADC1_Init+0x98>)
 800096e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_ADC1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_ADC1_Init+0x98>)
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <MX_ADC1_Init+0xa0>)
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_ADC1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b4:	480d      	ldr	r0, [pc, #52]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009b6:	f000 fd7b 	bl	80014b0 <HAL_ADC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009c0:	f000 f9c0 	bl	8000d44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_ADC1_Init+0x98>)
 80009d6:	f000 fdaf 	bl	8001538 <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009e0:	f000 f9b0 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000154 	.word	0x20000154
 80009f0:	40012000 	.word	0x40012000
 80009f4:	0f000001 	.word	0x0f000001

080009f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_CAN1_Init+0x60>)
 80009fe:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <MX_CAN1_Init+0x64>)
 8000a00:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a04:	2210      	movs	r2, #16
 8000a06:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_CAN1_Init+0x60>)
 8000a46:	f000 ffa5 	bl	8001994 <HAL_CAN_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 f978 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000019c 	.word	0x2000019c
 8000a5c:	40006400 	.word	0x40006400

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	@ (8000ab4 <MX_I2C1_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_I2C1_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <MX_I2C1_Init+0x50>)
 8000a9e:	f001 fb35 	bl	800210c <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 f94c 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200001c4 	.word	0x200001c4
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	@ (8000b24 <MX_SPI2_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000b0e:	f005 f813 	bl	8005b38 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b18:	f000 f914 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000218 	.word	0x20000218
 8000b24:	40003800 	.word	0x40003800

08000b28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b2e:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <MX_SPI3_Init+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b58:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_SPI3_Init+0x64>)
 8000b7a:	f004 ffdd 	bl	8005b38 <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 f8de 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000270 	.word	0x20000270
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	@ (8000be4 <MX_USART3_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_USART3_UART_Init+0x4c>)
 8000bcc:	f005 f83d 	bl	8005c4a <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f000 f8b5 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200002c8 	.word	0x200002c8
 8000be4:	40004800 	.word	0x40004800

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	@ 0x30
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	4b4c      	ldr	r3, [pc, #304]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a4b      	ldr	r2, [pc, #300]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b49      	ldr	r3, [pc, #292]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	4b45      	ldr	r3, [pc, #276]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a44      	ldr	r2, [pc, #272]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b42      	ldr	r3, [pc, #264]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b3b      	ldr	r3, [pc, #236]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a36      	ldr	r2, [pc, #216]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a2f      	ldr	r2, [pc, #188]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a28      	ldr	r2, [pc, #160]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <MX_GPIO_Init+0x14c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000cac:	4822      	ldr	r0, [pc, #136]	@ (8000d38 <MX_GPIO_Init+0x150>)
 8000cae:	f001 fa13 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2140      	movs	r1, #64	@ 0x40
 8000cb6:	4821      	ldr	r0, [pc, #132]	@ (8000d3c <MX_GPIO_Init+0x154>)
 8000cb8:	f001 fa0e 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481b      	ldr	r0, [pc, #108]	@ (8000d40 <MX_GPIO_Init+0x158>)
 8000cd4:	f001 f86c 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cd8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <MX_GPIO_Init+0x150>)
 8000cf2:	f001 f85d 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cf6:	2340      	movs	r3, #64	@ 0x40
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480b      	ldr	r0, [pc, #44]	@ (8000d3c <MX_GPIO_Init+0x154>)
 8000d0e:	f001 f84f 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d12:	2380      	movs	r3, #128	@ 0x80
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_GPIO_Init+0x154>)
 8000d26:	f001 f843 	bl	8001db0 <HAL_GPIO_Init>

}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	@ 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40021800 	.word	0x40021800
 8000d40:	40020800 	.word	0x40020800

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add HAL_I2C_Master_Transmit()his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <Error_Handler+0x8>

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <HAL_ADC_MspInit+0x7c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d127      	bne.n	8000e12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_ADC_MspInit+0x80>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a15      	ldr	r2, [pc, #84]	@ (8000e20 <HAL_ADC_MspInit+0x80>)
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_ADC_MspInit+0x80>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <HAL_ADC_MspInit+0x80>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <HAL_ADC_MspInit+0x80>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_ADC_MspInit+0x80>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <HAL_ADC_MspInit+0x84>)
 8000e0e:	f000 ffcf 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	@ 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <HAL_CAN_MspInit+0x84>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d12b      	bne.n	8000ea2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_CAN_MspInit+0x88>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <HAL_CAN_MspInit+0x88>)
 8000e54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_CAN_MspInit+0x88>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HAL_CAN_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a10      	ldr	r2, [pc, #64]	@ (8000eb0 <HAL_CAN_MspInit+0x88>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_CAN_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e82:	2303      	movs	r3, #3
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e92:	2309      	movs	r3, #9
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_CAN_MspInit+0x8c>)
 8000e9e:	f000 ff87 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3728      	adds	r7, #40	@ 0x28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40006400 	.word	0x40006400
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40021800 	.word	0x40021800

08000eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	@ (8000f3c <HAL_I2C_MspInit+0x84>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12c      	bne.n	8000f34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_I2C_MspInit+0x88>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a17      	ldr	r2, [pc, #92]	@ (8000f40 <HAL_I2C_MspInit+0x88>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_I2C_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000ef6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <HAL_I2C_MspInit+0x8c>)
 8000f14:	f000 ff4c 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_I2C_MspInit+0x88>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	4a07      	ldr	r2, [pc, #28]	@ (8000f40 <HAL_I2C_MspInit+0x88>)
 8000f22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_I2C_MspInit+0x88>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	@ 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020400 	.word	0x40020400

08000f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a51      	ldr	r2, [pc, #324]	@ (80010ac <HAL_SPI_MspInit+0x164>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d14b      	bne.n	8001002 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
 8000f6e:	4b50      	ldr	r3, [pc, #320]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	4a4f      	ldr	r2, [pc, #316]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	4b49      	ldr	r3, [pc, #292]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a48      	ldr	r2, [pc, #288]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	4b42      	ldr	r3, [pc, #264]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a41      	ldr	r2, [pc, #260]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4836      	ldr	r0, [pc, #216]	@ (80010b4 <HAL_SPI_MspInit+0x16c>)
 8000fda:	f000 fee9 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482f      	ldr	r0, [pc, #188]	@ (80010b8 <HAL_SPI_MspInit+0x170>)
 8000ffc:	f000 fed8 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001000:	e050      	b.n	80010a4 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2d      	ldr	r2, [pc, #180]	@ (80010bc <HAL_SPI_MspInit+0x174>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d14b      	bne.n	80010a4 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a26      	ldr	r2, [pc, #152]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8001016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40
 800101c:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001030:	4a1f      	ldr	r2, [pc, #124]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	6313      	str	r3, [r2, #48]	@ 0x30
 8001038:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a18      	ldr	r2, [pc, #96]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 800104e:	f043 0304 	orr.w	r3, r3, #4
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <HAL_SPI_MspInit+0x168>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001072:	2307      	movs	r3, #7
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	480e      	ldr	r0, [pc, #56]	@ (80010b8 <HAL_SPI_MspInit+0x170>)
 800107e:	f000 fe97 	bl	8001db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001082:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001094:	2306      	movs	r3, #6
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <HAL_SPI_MspInit+0x16c>)
 80010a0:	f000 fe86 	bl	8001db0 <HAL_GPIO_Init>
}
 80010a4:	bf00      	nop
 80010a6:	3738      	adds	r7, #56	@ 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40003800 	.word	0x40003800
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020800 	.word	0x40020800
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40003c00 	.word	0x40003c00

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a19      	ldr	r2, [pc, #100]	@ (8001144 <HAL_UART_MspInit+0x84>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d12c      	bne.n	800113c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <HAL_UART_MspInit+0x88>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a17      	ldr	r2, [pc, #92]	@ (8001148 <HAL_UART_MspInit+0x88>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_UART_MspInit+0x88>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <HAL_UART_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a10      	ldr	r2, [pc, #64]	@ (8001148 <HAL_UART_MspInit+0x88>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <HAL_UART_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800111a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800112c:	2307      	movs	r3, #7
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <HAL_UART_MspInit+0x8c>)
 8001138:	f000 fe3a 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40004800 	.word	0x40004800
 8001148:	40023800 	.word	0x40023800
 800114c:	40020c00 	.word	0x40020c00

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <NMI_Handler+0x4>

08001158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <MemManage_Handler+0x4>

08001168 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <UsageFault_Handler+0x4>

08001178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a6:	f000 f93f 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <OTG_FS_IRQHandler+0x10>)
 80011b6:	f002 fd6c 	bl	8003c92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200008e4 	.word	0x200008e4

080011c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e00a      	b.n	80011ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011d6:	f3af 8000 	nop.w
 80011da:	4601      	mov	r1, r0
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf0      	blt.n	80011d6 <_read+0x12>
	}

return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e009      	b.n	8001224 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf1      	blt.n	8001210 <_write+0x12>
	}
	return len;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_close>:

int _close(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800125e:	605a      	str	r2, [r3, #4]
	return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_isatty>:

int _isatty(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	return 1;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f009 f908 	bl	800a4e4 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20050000 	.word	0x20050000
 8001300:	00000400 	.word	0x00000400
 8001304:	2000030c 	.word	0x2000030c
 8001308:	20001258 	.word	0x20001258

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480d      	ldr	r0, [pc, #52]	@ (800136c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001336:	490e      	ldr	r1, [pc, #56]	@ (8001370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001338:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800134c:	4c0b      	ldr	r4, [pc, #44]	@ (800137c <LoopFillZerobss+0x26>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800135a:	f7ff ffd7 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f009 f8c7 	bl	800a4f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fa4b 	bl	80007fc <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001368:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001374:	0800b2c8 	.word	0x0800b2c8
  ldr r2, =_sbss
 8001378:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 800137c:	20001258 	.word	0x20001258

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 fcbd 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fcca 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fcd5 	bl	8001d96 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 fc9d 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	20000310 	.word	0x20000310

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000310 	.word	0x20000310

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008

080014b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e033      	b.n	800152e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fc66 	bl	8000da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014f6:	f023 0302 	bic.w	r3, r3, #2
 80014fa:	f043 0202 	orr.w	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f94a 	bl	800179c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	@ 0x40
 800151e:	e001      	b.n	8001524 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800154c:	2b01      	cmp	r3, #1
 800154e:	d101      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1c>
 8001550:	2302      	movs	r3, #2
 8001552:	e113      	b.n	800177c <HAL_ADC_ConfigChannel+0x244>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b09      	cmp	r3, #9
 8001562:	d925      	bls.n	80015b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68d9      	ldr	r1, [r3, #12]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	b29b      	uxth	r3, r3
 8001570:	461a      	mov	r2, r3
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	3b1e      	subs	r3, #30
 800157a:	2207      	movs	r2, #7
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43da      	mvns	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	400a      	ands	r2, r1
 8001588:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68d9      	ldr	r1, [r3, #12]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b29b      	uxth	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	4603      	mov	r3, r0
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4403      	add	r3, r0
 80015a2:	3b1e      	subs	r3, #30
 80015a4:	409a      	lsls	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	e022      	b.n	80015f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6919      	ldr	r1, [r3, #16]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	2207      	movs	r2, #7
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	400a      	ands	r2, r1
 80015d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6919      	ldr	r1, [r3, #16]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	4603      	mov	r3, r0
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4403      	add	r3, r0
 80015ec:	409a      	lsls	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d824      	bhi.n	8001648 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	3b05      	subs	r3, #5
 8001610:	221f      	movs	r2, #31
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	4618      	mov	r0, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	3b05      	subs	r3, #5
 800163a:	fa00 f203 	lsl.w	r2, r0, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
 8001646:	e04c      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b0c      	cmp	r3, #12
 800164e:	d824      	bhi.n	800169a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b23      	subs	r3, #35	@ 0x23
 8001662:	221f      	movs	r2, #31
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43da      	mvns	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	400a      	ands	r2, r1
 8001670:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
 800167e:	4618      	mov	r0, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	3b23      	subs	r3, #35	@ 0x23
 800168c:	fa00 f203 	lsl.w	r2, r0, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	631a      	str	r2, [r3, #48]	@ 0x30
 8001698:	e023      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	3b41      	subs	r3, #65	@ 0x41
 80016ac:	221f      	movs	r2, #31
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	400a      	ands	r2, r1
 80016ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b41      	subs	r3, #65	@ 0x41
 80016d6:	fa00 f203 	lsl.w	r2, r0, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e2:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <HAL_ADC_ConfigChannel+0x250>)
 80016e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a28      	ldr	r2, [pc, #160]	@ (800178c <HAL_ADC_ConfigChannel+0x254>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d10f      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x1d8>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b12      	cmp	r3, #18
 80016f6:	d10b      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1d      	ldr	r2, [pc, #116]	@ (800178c <HAL_ADC_ConfigChannel+0x254>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d12b      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x23a>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <HAL_ADC_ConfigChannel+0x258>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d003      	beq.n	800172c <HAL_ADC_ConfigChannel+0x1f4>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b11      	cmp	r3, #17
 800172a:	d122      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <HAL_ADC_ConfigChannel+0x258>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d111      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_ADC_ConfigChannel+0x25c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a11      	ldr	r2, [pc, #68]	@ (8001798 <HAL_ADC_ConfigChannel+0x260>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9a      	lsrs	r2, r3, #18
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001764:	e002      	b.n	800176c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3b01      	subs	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40012300 	.word	0x40012300
 800178c:	40012000 	.word	0x40012000
 8001790:	10000012 	.word	0x10000012
 8001794:	20000000 	.word	0x20000000
 8001798:	431bde83 	.word	0x431bde83

0800179c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017a4:	4b79      	ldr	r3, [pc, #484]	@ (800198c <ADC_Init+0x1f0>)
 80017a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	431a      	orrs	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	021a      	lsls	r2, r3, #8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6899      	ldr	r1, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	4a58      	ldr	r2, [pc, #352]	@ (8001990 <ADC_Init+0x1f4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d022      	beq.n	800187a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001842:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6899      	ldr	r1, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	e00f      	b.n	800189a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001888:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001898:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0202 	bic.w	r2, r2, #2
 80018a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7e1b      	ldrb	r3, [r3, #24]
 80018b4:	005a      	lsls	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01b      	beq.n	8001900 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80018e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6859      	ldr	r1, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	3b01      	subs	r3, #1
 80018f4:	035a      	lsls	r2, r3, #13
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	e007      	b.n	8001910 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800190e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	3b01      	subs	r3, #1
 800192c:	051a      	lsls	r2, r3, #20
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001944:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6899      	ldr	r1, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001952:	025a      	lsls	r2, r3, #9
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800196a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	029a      	lsls	r2, r3, #10
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40012300 	.word	0x40012300
 8001990:	0f000001 	.word	0x0f000001

08001994 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0ed      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fa38 	bl	8000e28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0201 	orr.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff fd42 	bl	8001450 <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019ce:	e012      	b.n	80019f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d0:	f7ff fd3e 	bl	8001450 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d90b      	bls.n	80019f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2205      	movs	r2, #5
 80019ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0c5      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0e5      	beq.n	80019d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0202 	bic.w	r2, r2, #2
 8001a12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a14:	f7ff fd1c 	bl	8001450 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a1a:	e012      	b.n	8001a42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a1c:	f7ff fd18 	bl	8001450 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d90b      	bls.n	8001a42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e09f      	b.n	8001b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e5      	bne.n	8001a1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7e1b      	ldrb	r3, [r3, #24]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7e5b      	ldrb	r3, [r3, #25]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e007      	b.n	8001aa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001aa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7e9b      	ldrb	r3, [r3, #26]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d108      	bne.n	8001abe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e007      	b.n	8001ace <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0220 	bic.w	r2, r2, #32
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7edb      	ldrb	r3, [r3, #27]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0210 	bic.w	r2, r2, #16
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	e007      	b.n	8001af8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0210 	orr.w	r2, r2, #16
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7f1b      	ldrb	r3, [r3, #28]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0208 	orr.w	r2, r2, #8
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e007      	b.n	8001b22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0208 	bic.w	r2, r2, #8
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7f5b      	ldrb	r3, [r3, #29]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d108      	bne.n	8001b3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0204 	orr.w	r2, r2, #4
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	e007      	b.n	8001b4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	ea42 0103 	orr.w	r1, r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	@ (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	db0a      	blt.n	8001c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	490c      	ldr	r1, [pc, #48]	@ (8001c78 <__NVIC_SetPriority+0x4c>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	0112      	lsls	r2, r2, #4
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	440b      	add	r3, r1
 8001c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c54:	e00a      	b.n	8001c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4908      	ldr	r1, [pc, #32]	@ (8001c7c <__NVIC_SetPriority+0x50>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	3b04      	subs	r3, #4
 8001c64:	0112      	lsls	r2, r2, #4
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	440b      	add	r3, r1
 8001c6a:	761a      	strb	r2, [r3, #24]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f1c3 0307 	rsb	r3, r3, #7
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	bf28      	it	cs
 8001c9e:	2304      	movcs	r3, #4
 8001ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d902      	bls.n	8001cb0 <NVIC_EncodePriority+0x30>
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	e000      	b.n	8001cb2 <NVIC_EncodePriority+0x32>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	4313      	orrs	r3, r2
         );
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	@ 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff8e 	bl	8001c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff29 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff3e 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff8e 	bl	8001c80 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5d 	bl	8001c2c <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff31 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	@ 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e165      	b.n	8002098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f040 8154 	bne.w	8002092 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d005      	beq.n	8001e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d130      	bne.n	8001e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 0201 	and.w	r2, r3, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d017      	beq.n	8001ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d123      	bne.n	8001ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80ae 	beq.w	8002092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80020b0 <HAL_GPIO_Init+0x300>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	4a5c      	ldr	r2, [pc, #368]	@ (80020b0 <HAL_GPIO_Init+0x300>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f46:	4b5a      	ldr	r3, [pc, #360]	@ (80020b0 <HAL_GPIO_Init+0x300>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f52:	4a58      	ldr	r2, [pc, #352]	@ (80020b4 <HAL_GPIO_Init+0x304>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	@ (80020b8 <HAL_GPIO_Init+0x308>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d025      	beq.n	8001fca <HAL_GPIO_Init+0x21a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4e      	ldr	r2, [pc, #312]	@ (80020bc <HAL_GPIO_Init+0x30c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <HAL_GPIO_Init+0x216>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4d      	ldr	r2, [pc, #308]	@ (80020c0 <HAL_GPIO_Init+0x310>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d019      	beq.n	8001fc2 <HAL_GPIO_Init+0x212>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4c      	ldr	r2, [pc, #304]	@ (80020c4 <HAL_GPIO_Init+0x314>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0x20e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	@ (80020c8 <HAL_GPIO_Init+0x318>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <HAL_GPIO_Init+0x20a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80020cc <HAL_GPIO_Init+0x31c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <HAL_GPIO_Init+0x206>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a49      	ldr	r2, [pc, #292]	@ (80020d0 <HAL_GPIO_Init+0x320>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_GPIO_Init+0x202>
 8001fae:	2306      	movs	r3, #6
 8001fb0:	e00c      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	e00a      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e008      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fdc:	4935      	ldr	r1, [pc, #212]	@ (80020b4 <HAL_GPIO_Init+0x304>)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fea:	4b3a      	ldr	r3, [pc, #232]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800200e:	4a31      	ldr	r2, [pc, #196]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002014:	4b2f      	ldr	r3, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002038:	4a26      	ldr	r2, [pc, #152]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203e:	4b25      	ldr	r3, [pc, #148]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002062:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800208c:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <HAL_GPIO_Init+0x324>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3301      	adds	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	f67f ae96 	bls.w	8001dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3724      	adds	r7, #36	@ 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40013800 	.word	0x40013800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020c00 	.word	0x40020c00
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40021400 	.word	0x40021400
 80020d0:	40021800 	.word	0x40021800
 80020d4:	40013c00 	.word	0x40013c00

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f4:	e003      	b.n	80020fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	041a      	lsls	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	619a      	str	r2, [r3, #24]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e12b      	b.n	8002376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fec0 	bl	8000eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	@ 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800215e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800216e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002170:	f002 ffaa 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a81      	ldr	r2, [pc, #516]	@ (8002380 <HAL_I2C_Init+0x274>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d807      	bhi.n	8002190 <HAL_I2C_Init+0x84>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a80      	ldr	r2, [pc, #512]	@ (8002384 <HAL_I2C_Init+0x278>)
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e006      	b.n	800219e <HAL_I2C_Init+0x92>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a7d      	ldr	r2, [pc, #500]	@ (8002388 <HAL_I2C_Init+0x27c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	bf94      	ite	ls
 8002198:	2301      	movls	r3, #1
 800219a:	2300      	movhi	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0e7      	b.n	8002376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a78      	ldr	r2, [pc, #480]	@ (800238c <HAL_I2C_Init+0x280>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002380 <HAL_I2C_Init+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d802      	bhi.n	80021e0 <HAL_I2C_Init+0xd4>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3301      	adds	r3, #1
 80021de:	e009      	b.n	80021f4 <HAL_I2C_Init+0xe8>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	4a69      	ldr	r2, [pc, #420]	@ (8002390 <HAL_I2C_Init+0x284>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	495c      	ldr	r1, [pc, #368]	@ (8002380 <HAL_I2C_Init+0x274>)
 8002210:	428b      	cmp	r3, r1
 8002212:	d819      	bhi.n	8002248 <HAL_I2C_Init+0x13c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e59      	subs	r1, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002228:	400b      	ands	r3, r1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_I2C_Init+0x138>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e59      	subs	r1, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fbb1 f3f3 	udiv	r3, r1, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	e051      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002244:	2304      	movs	r3, #4
 8002246:	e04f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d111      	bne.n	8002274 <HAL_I2C_Init+0x168>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e58      	subs	r0, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e012      	b.n	800229a <HAL_I2C_Init+0x18e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	0099      	lsls	r1, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x196>
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10e      	bne.n	80022c8 <HAL_I2C_Init+0x1bc>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e58      	subs	r0, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c6:	e00f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6911      	ldr	r1, [r2, #16]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	430b      	orrs	r3, r1
 800232a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	000186a0 	.word	0x000186a0
 8002384:	001e847f 	.word	0x001e847f
 8002388:	003d08ff 	.word	0x003d08ff
 800238c:	431bde83 	.word	0x431bde83
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	817b      	strh	r3, [r7, #10]
 80023a4:	4613      	mov	r3, r2
 80023a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff f852 	bl	8001450 <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	f040 80e0 	bne.w	800257c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	4970      	ldr	r1, [pc, #448]	@ (8002588 <HAL_I2C_Master_Transmit+0x1f4>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f001 f8f6 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0d3      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2C_Master_Transmit+0x50>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0cc      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d007      	beq.n	800240a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2221      	movs	r2, #33	@ 0x21
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2210      	movs	r2, #16
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	893a      	ldrh	r2, [r7, #8]
 800243a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a50      	ldr	r2, [pc, #320]	@ (800258c <HAL_I2C_Master_Transmit+0x1f8>)
 800244a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6a3a      	ldr	r2, [r7, #32]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fde2 	bl	800301c <I2C_MasterRequestWrite>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e08d      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002478:	e066      	b.n	8002548 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f001 f970 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	2b04      	cmp	r3, #4
 8002490:	d107      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06b      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11b      	bne.n	800251c <HAL_I2C_Master_Transmit+0x188>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d017      	beq.n	800251c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	6a39      	ldr	r1, [r7, #32]
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f001 f960 	bl	80037e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002542:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e01a      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d194      	bne.n	800247a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	00100002 	.word	0x00100002
 800258c:	ffff0000 	.word	0xffff0000

08002590 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08c      	sub	sp, #48	@ 0x30
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	4613      	mov	r3, r2
 80025a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7fe ff54 	bl	8001450 <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 820b 	bne.w	80029ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2319      	movs	r3, #25
 80025be:	2201      	movs	r2, #1
 80025c0:	497c      	ldr	r1, [pc, #496]	@ (80027b4 <HAL_I2C_Master_Receive+0x224>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fff8 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
 80025d0:	e1fe      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_I2C_Master_Receive+0x50>
 80025dc:	2302      	movs	r3, #2
 80025de:	e1f7      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d007      	beq.n	8002606 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002614:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2222      	movs	r2, #34	@ 0x22
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2210      	movs	r2, #16
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	893a      	ldrh	r2, [r7, #8]
 8002636:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4a5c      	ldr	r2, [pc, #368]	@ (80027b8 <HAL_I2C_Master_Receive+0x228>)
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fd66 	bl	8003120 <I2C_MasterRequestRead>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e1b8      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d113      	bne.n	800268e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	623b      	str	r3, [r7, #32]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	623b      	str	r3, [r7, #32]
 800267a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e18c      	b.n	80029a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	2b01      	cmp	r3, #1
 8002694:	d11b      	bne.n	80026ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e16c      	b.n	80029a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d11b      	bne.n	800270e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	e14c      	b.n	80029a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800271c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002734:	e138      	b.n	80029a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273a:	2b03      	cmp	r3, #3
 800273c:	f200 80f1 	bhi.w	8002922 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	2b01      	cmp	r3, #1
 8002746:	d123      	bne.n	8002790 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800274a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f001 f88b 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e139      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800278e:	e10b      	b.n	80029a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	2b02      	cmp	r3, #2
 8002796:	d14e      	bne.n	8002836 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279e:	2200      	movs	r2, #0
 80027a0:	4906      	ldr	r1, [pc, #24]	@ (80027bc <HAL_I2C_Master_Receive+0x22c>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 ff08 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e10e      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
 80027b2:	bf00      	nop
 80027b4:	00100002 	.word	0x00100002
 80027b8:	ffff0000 	.word	0xffff0000
 80027bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002834:	e0b8      	b.n	80029a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283c:	2200      	movs	r2, #0
 800283e:	4966      	ldr	r1, [pc, #408]	@ (80029d8 <HAL_I2C_Master_Receive+0x448>)
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 feb9 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0bf      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800285e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002898:	2200      	movs	r2, #0
 800289a:	494f      	ldr	r1, [pc, #316]	@ (80029d8 <HAL_I2C_Master_Receive+0x448>)
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fe8b 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e091      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002920:	e042      	b.n	80029a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002924:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 ff9e 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e04c      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b04      	cmp	r3, #4
 8002974:	d118      	bne.n	80029a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f aec2 	bne.w	8002736 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
  }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3728      	adds	r7, #40	@ 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	00010004 	.word	0x00010004

080029dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	460b      	mov	r3, r1
 80029f0:	813b      	strh	r3, [r7, #8]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f6:	f7fe fd2b 	bl	8001450 <HAL_GetTick>
 80029fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	f040 80d9 	bne.w	8002bbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2319      	movs	r3, #25
 8002a10:	2201      	movs	r2, #1
 8002a12:	496d      	ldr	r1, [pc, #436]	@ (8002bc8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fdcf 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0cc      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2C_Mem_Write+0x56>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0c5      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d007      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2221      	movs	r2, #33	@ 0x21
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2240      	movs	r2, #64	@ 0x40
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4a4d      	ldr	r2, [pc, #308]	@ (8002bcc <HAL_I2C_Mem_Write+0x1f0>)
 8002a98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a9a:	88f8      	ldrh	r0, [r7, #6]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fc06 	bl	80032bc <I2C_RequestMemoryWrite>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d052      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e081      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fe50 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d107      	bne.n	8002ae2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06b      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x180>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d017      	beq.n	8002b5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1aa      	bne.n	8002aba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fe3c 	bl	80037e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00d      	beq.n	8002b90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d107      	bne.n	8002b8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e016      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000

08002bd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	@ 0x30
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	817b      	strh	r3, [r7, #10]
 8002be2:	460b      	mov	r3, r1
 8002be4:	813b      	strh	r3, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bea:	f7fe fc31 	bl	8001450 <HAL_GetTick>
 8002bee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	f040 8208 	bne.w	800300e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2319      	movs	r3, #25
 8002c04:	2201      	movs	r2, #1
 8002c06:	497b      	ldr	r1, [pc, #492]	@ (8002df4 <HAL_I2C_Mem_Read+0x224>)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fcd5 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	e1fb      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x56>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e1f4      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d007      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2222      	movs	r2, #34	@ 0x22
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2240      	movs	r2, #64	@ 0x40
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002df8 <HAL_I2C_Mem_Read+0x228>)
 8002c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8e:	88f8      	ldrh	r0, [r7, #6]
 8002c90:	893a      	ldrh	r2, [r7, #8]
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fba2 	bl	80033e8 <I2C_RequestMemoryRead>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1b0      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d113      	bne.n	8002cde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	623b      	str	r3, [r7, #32]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	623b      	str	r3, [r7, #32]
 8002cca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e184      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d11b      	bne.n	8002d1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e164      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d11b      	bne.n	8002d5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	e144      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d74:	e138      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	f200 80f1 	bhi.w	8002f62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d123      	bne.n	8002dd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fd6b 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e139      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dce:	e10b      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d14e      	bne.n	8002e76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dde:	2200      	movs	r2, #0
 8002de0:	4906      	ldr	r1, [pc, #24]	@ (8002dfc <HAL_I2C_Mem_Read+0x22c>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fbe8 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e10e      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
 8002df2:	bf00      	nop
 8002df4:	00100002 	.word	0x00100002
 8002df8:	ffff0000 	.word	0xffff0000
 8002dfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e74:	e0b8      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4966      	ldr	r1, [pc, #408]	@ (8003018 <HAL_I2C_Mem_Read+0x448>)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fb99 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0bf      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	2200      	movs	r2, #0
 8002eda:	494f      	ldr	r1, [pc, #316]	@ (8003018 <HAL_I2C_Mem_Read+0x448>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fb6b 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e091      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f60:	e042      	b.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fc7e 	bl	8003868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e04c      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d118      	bne.n	8002fe8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f47f aec2 	bne.w	8002d76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	@ 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	00010004 	.word	0x00010004

0800301c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	460b      	mov	r3, r1
 800302a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d006      	beq.n	8003046 <I2C_MasterRequestWrite+0x2a>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d003      	beq.n	8003046 <I2C_MasterRequestWrite+0x2a>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003044:	d108      	bne.n	8003058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e00b      	b.n	8003070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	2b12      	cmp	r3, #18
 800305e:	d107      	bne.n	8003070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800306e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fa9b 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00d      	beq.n	80030a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003096:	d103      	bne.n	80030a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800309e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e035      	b.n	8003110 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030ac:	d108      	bne.n	80030c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ae:	897b      	ldrh	r3, [r7, #10]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030bc:	611a      	str	r2, [r3, #16]
 80030be:	e01b      	b.n	80030f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030c0:	897b      	ldrh	r3, [r7, #10]
 80030c2:	11db      	asrs	r3, r3, #7
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f003 0306 	and.w	r3, r3, #6
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f063 030f 	orn	r3, r3, #15
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	490e      	ldr	r1, [pc, #56]	@ (8003118 <I2C_MasterRequestWrite+0xfc>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fac1 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e010      	b.n	8003110 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030ee:	897b      	ldrh	r3, [r7, #10]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4907      	ldr	r1, [pc, #28]	@ (800311c <I2C_MasterRequestWrite+0x100>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fab1 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	00010008 	.word	0x00010008
 800311c:	00010002 	.word	0x00010002

08003120 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	460b      	mov	r3, r1
 800312e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003144:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d006      	beq.n	800315a <I2C_MasterRequestRead+0x3a>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d003      	beq.n	800315a <I2C_MasterRequestRead+0x3a>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003158:	d108      	bne.n	800316c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e00b      	b.n	8003184 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003170:	2b11      	cmp	r3, #17
 8003172:	d107      	bne.n	8003184 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003182:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fa11 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031aa:	d103      	bne.n	80031b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e079      	b.n	80032ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c0:	d108      	bne.n	80031d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031c2:	897b      	ldrh	r3, [r7, #10]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	611a      	str	r2, [r3, #16]
 80031d2:	e05f      	b.n	8003294 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031d4:	897b      	ldrh	r3, [r7, #10]
 80031d6:	11db      	asrs	r3, r3, #7
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 0306 	and.w	r3, r3, #6
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f063 030f 	orn	r3, r3, #15
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4930      	ldr	r1, [pc, #192]	@ (80032b4 <I2C_MasterRequestRead+0x194>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fa37 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e054      	b.n	80032ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4929      	ldr	r1, [pc, #164]	@ (80032b8 <I2C_MasterRequestRead+0x198>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fa27 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e044      	b.n	80032ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003246:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9af 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326e:	d103      	bne.n	8003278 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003276:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e017      	b.n	80032ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	11db      	asrs	r3, r3, #7
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0306 	and.w	r3, r3, #6
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f063 030e 	orn	r3, r3, #14
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4907      	ldr	r1, [pc, #28]	@ (80032b8 <I2C_MasterRequestRead+0x198>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f9e3 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	00010008 	.word	0x00010008
 80032b8:	00010002 	.word	0x00010002

080032bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f960 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330c:	d103      	bne.n	8003316 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e05f      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003328:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	6a3a      	ldr	r2, [r7, #32]
 800332e:	492d      	ldr	r1, [pc, #180]	@ (80033e4 <I2C_RequestMemoryWrite+0x128>)
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f998 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04c      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fa02 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800337c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e02b      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003388:	893b      	ldrh	r3, [r7, #8]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e021      	b.n	80033d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003394:	893b      	ldrh	r3, [r7, #8]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	b29b      	uxth	r3, r3
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a4:	6a39      	ldr	r1, [r7, #32]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f9dc 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d107      	bne.n	80033ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e005      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ce:	893b      	ldrh	r3, [r7, #8]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	00010002 	.word	0x00010002

080033e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003410:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	2200      	movs	r2, #0
 800342a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f8c2 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003448:	d103      	bne.n	8003452 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003450:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0aa      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	6a3a      	ldr	r2, [r7, #32]
 800346a:	4952      	ldr	r1, [pc, #328]	@ (80035b4 <I2C_RequestMemoryRead+0x1cc>)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f8fa 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e097      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003494:	6a39      	ldr	r1, [r7, #32]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f964 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00d      	beq.n	80034be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d107      	bne.n	80034ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e076      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034c4:	893b      	ldrh	r3, [r7, #8]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]
 80034ce:	e021      	b.n	8003514 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d0:	893b      	ldrh	r3, [r7, #8]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e0:	6a39      	ldr	r1, [r7, #32]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f93e 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d107      	bne.n	8003506 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e050      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800350a:	893b      	ldrh	r3, [r7, #8]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003516:	6a39      	ldr	r1, [r7, #32]
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f923 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	2b04      	cmp	r3, #4
 800352a:	d107      	bne.n	800353c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e035      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800354e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	2200      	movs	r2, #0
 8003558:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f82b 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00d      	beq.n	8003584 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003576:	d103      	bne.n	8003580 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e013      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	4906      	ldr	r1, [pc, #24]	@ (80035b4 <I2C_RequestMemoryRead+0x1cc>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f863 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	00010002 	.word	0x00010002

080035b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c8:	e025      	b.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d021      	beq.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fd ff3d 	bl	8001450 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d116      	bne.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e023      	b.n	800365e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10d      	bne.n	800363c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	e00c      	b.n	8003656 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	429a      	cmp	r2, r3
 800365a:	d0b6      	beq.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003674:	e051      	b.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003684:	d123      	bne.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003694:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800369e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e046      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d021      	beq.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fd febb 	bl	8001450 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d116      	bne.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e020      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10c      	bne.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e00b      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d18d      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003770:	e02d      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8ce 	bl	8003914 <I2C_IsAcknowledgeFailed>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02d      	b.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d021      	beq.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fd fe61 	bl	8001450 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d116      	bne.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b80      	cmp	r3, #128	@ 0x80
 80037da:	d1ca      	bne.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f2:	e02d      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f88d 	bl	8003914 <I2C_IsAcknowledgeFailed>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e02d      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d021      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fd fe20 	bl	8001450 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d1ca      	bne.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003874:	e042      	b.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d119      	bne.n	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0210 	mvn.w	r2, #16
 800388c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e029      	b.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fd fdca 	bl	8001450 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003906:	2b40      	cmp	r3, #64	@ 0x40
 8003908:	d1b5      	bne.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800392a:	d11b      	bne.n	8003964 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003934:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003974:	b08f      	sub	sp, #60	@ 0x3c
 8003976:	af0a      	add	r7, sp, #40	@ 0x28
 8003978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e116      	b.n	8003bb2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f006 f82e 	bl	8009a00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 fd27 	bl	8006416 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	687e      	ldr	r6, [r7, #4]
 80039d0:	466d      	mov	r5, sp
 80039d2:	f106 0410 	add.w	r4, r6, #16
 80039d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e6:	1d33      	adds	r3, r6, #4
 80039e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ea:	6838      	ldr	r0, [r7, #0]
 80039ec:	f002 fbfe 	bl	80061ec <USB_CoreInit>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0d7      	b.n	8003bb2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f002 fd15 	bl	8006438 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
 8003a12:	e04a      	b.n	8003aaa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	333d      	adds	r3, #61	@ 0x3d
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	333c      	adds	r3, #60	@ 0x3c
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
 8003a40:	b298      	uxth	r0, r3
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3342      	adds	r3, #66	@ 0x42
 8003a50:	4602      	mov	r2, r0
 8003a52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	333f      	adds	r3, #63	@ 0x3f
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3344      	adds	r3, #68	@ 0x44
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3348      	adds	r3, #72	@ 0x48
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3350      	adds	r3, #80	@ 0x50
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d3af      	bcc.n	8003a14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
 8003ab8:	e044      	b.n	8003b44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003afc:	7bfa      	ldrb	r2, [r7, #15]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	3301      	adds	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d3b5      	bcc.n	8003aba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	687e      	ldr	r6, [r7, #4]
 8003b56:	466d      	mov	r5, sp
 8003b58:	f106 0410 	add.w	r4, r6, #16
 8003b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b6c:	1d33      	adds	r3, r6, #4
 8003b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b70:	6838      	ldr	r0, [r7, #0]
 8003b72:	f002 fcad 	bl	80064d0 <USB_DevInit>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e014      	b.n	8003bb2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d102      	bne.n	8003ba6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f001 f869 	bl	8004c78 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fc40 	bl	8007430 <USB_DevDisconnect>

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_PCD_Start+0x1c>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e020      	b.n	8003c18 <HAL_PCD_Start+0x5e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d109      	bne.n	8003bfa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d005      	beq.n	8003bfa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fbf8 	bl	80063f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 fbf0 	bl	80073ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_PCD_Stop+0x1c>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e026      	b.n	8003c8a <HAL_PCD_Stop+0x6a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 fbe4 	bl	8006416 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f003 fbec 	bl	8007430 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2110      	movs	r1, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 fd94 	bl	800678c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d109      	bne.n	8003c80 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d005      	beq.n	8003c80 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c92:	b590      	push	{r4, r7, lr}
 8003c94:	b08d      	sub	sp, #52	@ 0x34
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f003 fc75 	bl	8007598 <USB_GetMode>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f040 83ca 	bne.w	800444a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 fbd9 	bl	8007472 <USB_ReadInterrupts>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 83c0 	beq.w	8004448 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 fbd0 	bl	8007472 <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d107      	bne.n	8003cec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f002 0202 	and.w	r2, r2, #2
 8003cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f003 fbbe 	bl	8007472 <USB_ReadInterrupts>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d161      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0210 	bic.w	r2, r2, #16
 8003d0e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003d36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d3a:	d124      	bne.n	8003d86 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d035      	beq.n	8003db4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6a38      	ldr	r0, [r7, #32]
 8003d5c:	f003 f9f5 	bl	800714a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d6c:	441a      	add	r2, r3
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7e:	441a      	add	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	619a      	str	r2, [r3, #24]
 8003d84:	e016      	b.n	8003db4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003d8c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d90:	d110      	bne.n	8003db4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6a38      	ldr	r0, [r7, #32]
 8003d9e:	f003 f9d4 	bl	800714a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dae:	441a      	add	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0210 	orr.w	r2, r2, #16
 8003dc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f003 fb52 	bl	8007472 <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dd8:	d16e      	bne.n	8003eb8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 fb58 	bl	8007498 <USB_ReadDevAllOutEpInterrupt>
 8003de8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003dea:	e062      	b.n	8003eb2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d057      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f003 fb7d 	bl	8007500 <USB_ReadDevOutEPInterrupt>
 8003e06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2301      	movs	r3, #1
 8003e22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fd7c 	bl	8004924 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00c      	beq.n	8003e50 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e42:	461a      	mov	r2, r3
 8003e44:	2308      	movs	r3, #8
 8003e46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fe76 	bl	8004b3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e66:	461a      	mov	r2, r3
 8003e68:	2310      	movs	r3, #16
 8003e6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d008      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e82:	461a      	mov	r2, r3
 8003e84:	2320      	movs	r3, #32
 8003e86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ea4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d199      	bne.n	8003dec <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f003 fad8 	bl	8007472 <USB_ReadInterrupts>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ec8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ecc:	f040 80c0 	bne.w	8004050 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f003 faf9 	bl	80074cc <USB_ReadDevAllInEpInterrupt>
 8003eda:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003ee0:	e0b2      	b.n	8004048 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80a7 	beq.w	800403c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 fb1f 	bl	800753c <USB_ReadDevInEPInterrupt>
 8003efe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d057      	beq.n	8003fba <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	2201      	movs	r2, #1
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69f9      	ldr	r1, [r7, #28]
 8003f26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d132      	bne.n	8003fae <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3348      	adds	r3, #72	@ 0x48
 8003f58:	6819      	ldr	r1, [r3, #0]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4403      	add	r3, r0
 8003f68:	3344      	adds	r3, #68	@ 0x44
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4419      	add	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4403      	add	r3, r0
 8003f7c:	3348      	adds	r3, #72	@ 0x48
 8003f7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d113      	bne.n	8003fae <HAL_PCD_IRQHandler+0x31c>
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	3350      	adds	r3, #80	@ 0x50
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d108      	bne.n	8003fae <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2101      	movs	r1, #1
 8003faa:	f003 fb27 	bl	80075fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f005 fdc6 	bl	8009b46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fec:	461a      	mov	r2, r3
 8003fee:	2310      	movs	r3, #16
 8003ff0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004008:	461a      	mov	r2, r3
 800400a:	2340      	movs	r3, #64	@ 0x40
 800400c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004024:	461a      	mov	r2, r3
 8004026:	2302      	movs	r3, #2
 8004028:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fbe6 	bl	8004808 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	3301      	adds	r3, #1
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	f47f af49 	bne.w	8003ee2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f003 fa0c 	bl	8007472 <USB_ReadInterrupts>
 800405a:	4603      	mov	r3, r0
 800405c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004064:	d122      	bne.n	80040ac <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8004080:	2b01      	cmp	r3, #1
 8004082:	d108      	bne.n	8004096 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800408c:	2100      	movs	r1, #0
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fe16 	bl	8004cc0 <HAL_PCDEx_LPM_Callback>
 8004094:	e002      	b.n	800409c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f005 fdc2 	bl	8009c20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80040aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f003 f9de 	bl	8007472 <USB_ReadInterrupts>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c0:	d112      	bne.n	80040e8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d102      	bne.n	80040d8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f005 fd7e 	bl	8009bd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80040e6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f003 f9c0 	bl	8007472 <USB_ReadInterrupts>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040fc:	d121      	bne.n	8004142 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800410c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d111      	bne.n	800413c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	089b      	lsrs	r3, r3, #2
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004132:	2101      	movs	r1, #1
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fdc3 	bl	8004cc0 <HAL_PCDEx_LPM_Callback>
 800413a:	e002      	b.n	8004142 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f005 fd49 	bl	8009bd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f003 f993 	bl	8007472 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004156:	f040 80c7 	bne.w	80042e8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	69fa      	ldr	r2, [r7, #28]
 8004164:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2110      	movs	r1, #16
 8004174:	4618      	mov	r0, r3
 8004176:	f002 fb09 	bl	800678c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417e:	e056      	b.n	800422e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418c:	461a      	mov	r2, r3
 800418e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004192:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80041d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004202:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004206:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004222:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004226:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422a:	3301      	adds	r3, #1
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004234:	429a      	cmp	r2, r3
 8004236:	d3a3      	bcc.n	8004180 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004246:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800424a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	2b00      	cmp	r3, #0
 8004252:	d016      	beq.n	8004282 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004264:	f043 030b 	orr.w	r3, r3, #11
 8004268:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800427a:	f043 030b 	orr.w	r3, r3, #11
 800427e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004280:	e015      	b.n	80042ae <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004290:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004294:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004298:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a8:	f043 030b 	orr.w	r3, r3, #11
 80042ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042bc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042d2:	461a      	mov	r2, r3
 80042d4:	f003 f992 	bl	80075fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f003 f8c0 	bl	8007472 <USB_ReadInterrupts>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fc:	d124      	bne.n	8004348 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f003 f956 	bl	80075b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f002 fa9a 	bl	8006846 <USB_GetDevSpeed>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681c      	ldr	r4, [r3, #0]
 800431e:	f000 fec7 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 8004322:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004328:	b2db      	uxtb	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	4620      	mov	r0, r4
 800432e:	f001 ffbf 	bl	80062b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f005 fc2f 	bl	8009b96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004346:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f003 f890 	bl	8007472 <USB_ReadInterrupts>
 8004352:	4603      	mov	r3, r0
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b08      	cmp	r3, #8
 800435a:	d10a      	bne.n	8004372 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f005 fc0c 	bl	8009b7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f002 0208 	and.w	r2, r2, #8
 8004370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f003 f87b 	bl	8007472 <USB_ReadInterrupts>
 800437c:	4603      	mov	r3, r0
 800437e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004386:	d10f      	bne.n	80043a8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f005 fc64 	bl	8009c60 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80043a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f003 f860 	bl	8007472 <USB_ReadInterrupts>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043bc:	d10f      	bne.n	80043de <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f005 fc37 	bl	8009c3c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80043dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f003 f845 	bl	8007472 <USB_ReadInterrupts>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f2:	d10a      	bne.n	800440a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f005 fc45 	bl	8009c84 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695a      	ldr	r2, [r3, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004408:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f003 f82f 	bl	8007472 <USB_ReadInterrupts>
 8004414:	4603      	mov	r3, r0
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b04      	cmp	r3, #4
 800441c:	d115      	bne.n	800444a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f005 fc35 	bl	8009ca0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	e000      	b.n	800444a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004448:	bf00      	nop
    }
  }
}
 800444a:	3734      	adds	r7, #52	@ 0x34
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}

08004450 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_PCD_SetAddress+0x1a>
 8004466:	2302      	movs	r3, #2
 8004468:	e013      	b.n	8004492 <HAL_PCD_SetAddress+0x42>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f002 ff8d 	bl	80073a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	4608      	mov	r0, r1
 80044a4:	4611      	mov	r1, r2
 80044a6:	461a      	mov	r2, r3
 80044a8:	4603      	mov	r3, r0
 80044aa:	70fb      	strb	r3, [r7, #3]
 80044ac:	460b      	mov	r3, r1
 80044ae:	803b      	strh	r3, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	da0f      	bge.n	80044e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	f003 020f 	and.w	r2, r3, #15
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3338      	adds	r3, #56	@ 0x38
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	3304      	adds	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	705a      	strb	r2, [r3, #1]
 80044de:	e00f      	b.n	8004500 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	f003 020f 	and.w	r2, r3, #15
 80044e6:	4613      	mov	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	3304      	adds	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800450c:	883a      	ldrh	r2, [r7, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	78ba      	ldrb	r2, [r7, #2]
 8004516:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d004      	beq.n	800452a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800452a:	78bb      	ldrb	r3, [r7, #2]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d102      	bne.n	8004536 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_PCD_EP_Open+0xaa>
 8004540:	2302      	movs	r3, #2
 8004542:	e00e      	b.n	8004562 <HAL_PCD_EP_Open+0xc8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	4618      	mov	r0, r3
 8004554:	f002 f99c 	bl	8006890 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8004560:	7afb      	ldrb	r3, [r7, #11]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	460b      	mov	r3, r1
 8004578:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	f003 020f 	and.w	r2, r3, #15
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	3304      	adds	r3, #4
 8004592:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ac:	7afb      	ldrb	r3, [r7, #11]
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045c6:	7afb      	ldrb	r3, [r7, #11]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	6979      	ldr	r1, [r7, #20]
 80045de:	f002 fc23 	bl	8006e28 <USB_EP0StartXfer>
 80045e2:	e008      	b.n	80045f6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	6979      	ldr	r1, [r7, #20]
 80045f2:	f002 f9d5 	bl	80069a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	460b      	mov	r3, r1
 800460e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004610:	7afb      	ldrb	r3, [r7, #11]
 8004612:	f003 020f 	and.w	r2, r3, #15
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	3338      	adds	r3, #56	@ 0x38
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	3304      	adds	r3, #4
 8004626:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2200      	movs	r2, #0
 8004638:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2201      	movs	r2, #1
 800463e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004640:	7afb      	ldrb	r3, [r7, #11]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	b2da      	uxtb	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d102      	bne.n	800465a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800465a:	7afb      	ldrb	r3, [r7, #11]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	6979      	ldr	r1, [r7, #20]
 8004672:	f002 fbd9 	bl	8006e28 <USB_EP0StartXfer>
 8004676:	e008      	b.n	800468a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	6979      	ldr	r1, [r7, #20]
 8004686:	f002 f98b 	bl	80069a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 020f 	and.w	r2, r3, #15
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d901      	bls.n	80046b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e050      	b.n	8004754 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da0f      	bge.n	80046da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	f003 020f 	and.w	r2, r3, #15
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	3338      	adds	r3, #56	@ 0x38
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	3304      	adds	r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	705a      	strb	r2, [r3, #1]
 80046d8:	e00d      	b.n	80046f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4413      	add	r3, r2
 80046ec:	3304      	adds	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_PCD_EP_SetStall+0x82>
 8004712:	2302      	movs	r3, #2
 8004714:	e01e      	b.n	8004754 <HAL_PCD_EP_SetStall+0xc0>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	4618      	mov	r0, r3
 8004726:	f002 fd68 	bl	80071fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	f003 030f 	and.w	r3, r3, #15
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10a      	bne.n	800474a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	b2d9      	uxtb	r1, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004744:	461a      	mov	r2, r3
 8004746:	f002 ff59 	bl	80075fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d901      	bls.n	800477a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e042      	b.n	8004800 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800477a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800477e:	2b00      	cmp	r3, #0
 8004780:	da0f      	bge.n	80047a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	f003 020f 	and.w	r2, r3, #15
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	3338      	adds	r3, #56	@ 0x38
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	3304      	adds	r3, #4
 8004798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	705a      	strb	r2, [r3, #1]
 80047a0:	e00f      	b.n	80047c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	f003 020f 	and.w	r2, r3, #15
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	3304      	adds	r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_PCD_EP_ClrStall+0x86>
 80047de:	2302      	movs	r3, #2
 80047e0:	e00e      	b.n	8004800 <HAL_PCD_EP_ClrStall+0xa4>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68f9      	ldr	r1, [r7, #12]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f002 fd70 	bl	80072d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	@ 0x28
 800480c:	af02      	add	r7, sp, #8
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	3338      	adds	r3, #56	@ 0x38
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4413      	add	r3, r2
 800482c:	3304      	adds	r3, #4
 800482e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	d901      	bls.n	8004840 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e06c      	b.n	800491a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	429a      	cmp	r2, r3
 8004854:	d902      	bls.n	800485c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	3303      	adds	r3, #3
 8004860:	089b      	lsrs	r3, r3, #2
 8004862:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004864:	e02b      	b.n	80048be <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	429a      	cmp	r2, r3
 800487a:	d902      	bls.n	8004882 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3303      	adds	r3, #3
 8004886:	089b      	lsrs	r3, r3, #2
 8004888:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68d9      	ldr	r1, [r3, #12]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800489a:	b2db      	uxtb	r3, r3
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	4603      	mov	r3, r0
 80048a0:	6978      	ldr	r0, [r7, #20]
 80048a2:	f002 fc14 	bl	80070ce <USB_WritePacket>

    ep->xfer_buff  += len;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	441a      	add	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	441a      	add	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d809      	bhi.n	80048e8 <PCD_WriteEmptyTxFifo+0xe0>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048dc:	429a      	cmp	r2, r3
 80048de:	d203      	bcs.n	80048e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1be      	bne.n	8004866 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d811      	bhi.n	8004918 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	2201      	movs	r2, #1
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	43db      	mvns	r3, r3
 800490e:	6939      	ldr	r1, [r7, #16]
 8004910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004914:	4013      	ands	r3, r2
 8004916:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	333c      	adds	r3, #60	@ 0x3c
 800493c:	3304      	adds	r3, #4
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b01      	cmp	r3, #1
 8004958:	f040 80a0 	bne.w	8004a9c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d015      	beq.n	8004992 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a72      	ldr	r2, [pc, #456]	@ (8004b34 <PCD_EP_OutXfrComplete_int+0x210>)
 800496a:	4293      	cmp	r3, r2
 800496c:	f240 80dd 	bls.w	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80d7 	beq.w	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004988:	461a      	mov	r2, r3
 800498a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800498e:	6093      	str	r3, [r2, #8]
 8004990:	e0cb      	b.n	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a8:	461a      	mov	r2, r3
 80049aa:	2320      	movs	r3, #32
 80049ac:	6093      	str	r3, [r2, #8]
 80049ae:	e0bc      	b.n	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 80b7 	bne.w	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a5d      	ldr	r2, [pc, #372]	@ (8004b34 <PCD_EP_OutXfrComplete_int+0x210>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d90f      	bls.n	80049e4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049da:	461a      	mov	r2, r3
 80049dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049e0:	6093      	str	r3, [r2, #8]
 80049e2:	e0a2      	b.n	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80049f6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	440b      	add	r3, r1
 8004a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004a0a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4403      	add	r3, r0
 8004a1a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8004a1e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4403      	add	r3, r0
 8004a42:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4419      	add	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4403      	add	r3, r0
 8004a58:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004a5c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d114      	bne.n	8004a8e <PCD_EP_OutXfrComplete_int+0x16a>
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d108      	bne.n	8004a8e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004a86:	461a      	mov	r2, r3
 8004a88:	2101      	movs	r1, #1
 8004a8a:	f002 fdb7 	bl	80075fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f005 f83b 	bl	8009b10 <HAL_PCD_DataOutStageCallback>
 8004a9a:	e046      	b.n	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <PCD_EP_OutXfrComplete_int+0x214>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d124      	bne.n	8004aee <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ac0:	6093      	str	r3, [r2, #8]
 8004ac2:	e032      	b.n	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ada:	461a      	mov	r2, r3
 8004adc:	2320      	movs	r3, #32
 8004ade:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f005 f812 	bl	8009b10 <HAL_PCD_DataOutStageCallback>
 8004aec:	e01d      	b.n	8004b2a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d114      	bne.n	8004b1e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004af4:	6879      	ldr	r1, [r7, #4]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d108      	bne.n	8004b1e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004b16:	461a      	mov	r2, r3
 8004b18:	2100      	movs	r1, #0
 8004b1a:	f002 fd6f 	bl	80075fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f004 fff3 	bl	8009b10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	4f54300a 	.word	0x4f54300a
 8004b38:	4f54310a 	.word	0x4f54310a

08004b3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	333c      	adds	r3, #60	@ 0x3c
 8004b54:	3304      	adds	r3, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	@ (8004bc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d90e      	bls.n	8004b90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d009      	beq.n	8004b90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f004 ffab 	bl	8009aec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d90c      	bls.n	8004bb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d108      	bne.n	8004bb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	f002 fd22 	bl	80075fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	4f54300a 	.word	0x4f54300a

08004bc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004be6:	883b      	ldrh	r3, [r7, #0]
 8004be8:	0419      	lsls	r1, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bf4:	e028      	b.n	8004c48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4413      	add	r3, r2
 8004c02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e00d      	b.n	8004c26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	3340      	adds	r3, #64	@ 0x40
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	3301      	adds	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	7bfa      	ldrb	r2, [r7, #15]
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3ec      	bcc.n	8004c0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c30:	883b      	ldrh	r3, [r7, #0]
 8004c32:	0418      	lsls	r0, r3, #16
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6819      	ldr	r1, [r3, #0]
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	4302      	orrs	r2, r0
 8004c40:	3340      	adds	r3, #64	@ 0x40
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	f043 0303 	orr.w	r3, r3, #3
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0cc      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cec:	4b68      	ldr	r3, [pc, #416]	@ (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d90c      	bls.n	8004d14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b65      	ldr	r3, [pc, #404]	@ (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d02:	4b63      	ldr	r3, [pc, #396]	@ (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0b8      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d2c:	4b59      	ldr	r3, [pc, #356]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a58      	ldr	r2, [pc, #352]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d005      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d44:	4b53      	ldr	r3, [pc, #332]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	4a52      	ldr	r2, [pc, #328]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d50:	4b50      	ldr	r3, [pc, #320]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	494d      	ldr	r1, [pc, #308]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d044      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	4b47      	ldr	r3, [pc, #284]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d119      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e07f      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d96:	4b3f      	ldr	r3, [pc, #252]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e06f      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da6:	4b3b      	ldr	r3, [pc, #236]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e067      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db6:	4b37      	ldr	r3, [pc, #220]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f023 0203 	bic.w	r2, r3, #3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4934      	ldr	r1, [pc, #208]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc8:	f7fc fb42 	bl	8001450 <HAL_GetTick>
 8004dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd0:	f7fc fb3e 	bl	8001450 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e04f      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 020c 	and.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d1eb      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df8:	4b25      	ldr	r3, [pc, #148]	@ (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d20c      	bcs.n	8004e20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b22      	ldr	r3, [pc, #136]	@ (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0e:	4b20      	ldr	r3, [pc, #128]	@ (8004e90 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d001      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e032      	b.n	8004e86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d008      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e2c:	4b19      	ldr	r3, [pc, #100]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4916      	ldr	r1, [pc, #88]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4a:	4b12      	ldr	r3, [pc, #72]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	490e      	ldr	r1, [pc, #56]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e5e:	f000 f821 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8004e62:	4602      	mov	r2, r0
 8004e64:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	490a      	ldr	r1, [pc, #40]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c0>)
 8004e70:	5ccb      	ldrb	r3, [r1, r3]
 8004e72:	fa22 f303 	lsr.w	r3, r2, r3
 8004e76:	4a09      	ldr	r2, [pc, #36]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c4>)
 8004e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fc faa2 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40023c00 	.word	0x40023c00
 8004e94:	40023800 	.word	0x40023800
 8004e98:	0800b26c 	.word	0x0800b26c
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	20000004 	.word	0x20000004

08004ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea8:	b094      	sub	sp, #80	@ 0x50
 8004eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ebc:	4b79      	ldr	r3, [pc, #484]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 030c 	and.w	r3, r3, #12
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d00d      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	f200 80e1 	bhi.w	8005090 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d003      	beq.n	8004ede <HAL_RCC_GetSysClockFreq+0x3a>
 8004ed6:	e0db      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ed8:	4b73      	ldr	r3, [pc, #460]	@ (80050a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eda:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004edc:	e0db      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ede:	4b73      	ldr	r3, [pc, #460]	@ (80050ac <HAL_RCC_GetSysClockFreq+0x208>)
 8004ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ee2:	e0d8      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eee:	4b6d      	ldr	r3, [pc, #436]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d063      	beq.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004efa:	4b6a      	ldr	r3, [pc, #424]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	2200      	movs	r2, #0
 8004f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f0e:	2300      	movs	r3, #0
 8004f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f16:	4622      	mov	r2, r4
 8004f18:	462b      	mov	r3, r5
 8004f1a:	f04f 0000 	mov.w	r0, #0
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	0159      	lsls	r1, r3, #5
 8004f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f28:	0150      	lsls	r0, r2, #5
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4621      	mov	r1, r4
 8004f30:	1a51      	subs	r1, r2, r1
 8004f32:	6139      	str	r1, [r7, #16]
 8004f34:	4629      	mov	r1, r5
 8004f36:	eb63 0301 	sbc.w	r3, r3, r1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f48:	4659      	mov	r1, fp
 8004f4a:	018b      	lsls	r3, r1, #6
 8004f4c:	4651      	mov	r1, sl
 8004f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f52:	4651      	mov	r1, sl
 8004f54:	018a      	lsls	r2, r1, #6
 8004f56:	4651      	mov	r1, sl
 8004f58:	ebb2 0801 	subs.w	r8, r2, r1
 8004f5c:	4659      	mov	r1, fp
 8004f5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f76:	4690      	mov	r8, r2
 8004f78:	4699      	mov	r9, r3
 8004f7a:	4623      	mov	r3, r4
 8004f7c:	eb18 0303 	adds.w	r3, r8, r3
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	462b      	mov	r3, r5
 8004f84:	eb49 0303 	adc.w	r3, r9, r3
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f96:	4629      	mov	r1, r5
 8004f98:	024b      	lsls	r3, r1, #9
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	024a      	lsls	r2, r1, #9
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004faa:	2200      	movs	r2, #0
 8004fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fb4:	f7fb f984 	bl	80002c0 <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fc0:	e058      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc2:	4b38      	ldr	r3, [pc, #224]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	4611      	mov	r1, r2
 8004fce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	f04f 0000 	mov.w	r0, #0
 8004fe4:	f04f 0100 	mov.w	r1, #0
 8004fe8:	0159      	lsls	r1, r3, #5
 8004fea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fee:	0150      	lsls	r0, r2, #5
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800500c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005010:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005014:	ebb2 040a 	subs.w	r4, r2, sl
 8005018:	eb63 050b 	sbc.w	r5, r3, fp
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	00eb      	lsls	r3, r5, #3
 8005026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800502a:	00e2      	lsls	r2, r4, #3
 800502c:	4614      	mov	r4, r2
 800502e:	461d      	mov	r5, r3
 8005030:	4643      	mov	r3, r8
 8005032:	18e3      	adds	r3, r4, r3
 8005034:	603b      	str	r3, [r7, #0]
 8005036:	464b      	mov	r3, r9
 8005038:	eb45 0303 	adc.w	r3, r5, r3
 800503c:	607b      	str	r3, [r7, #4]
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800504a:	4629      	mov	r1, r5
 800504c:	028b      	lsls	r3, r1, #10
 800504e:	4621      	mov	r1, r4
 8005050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005054:	4621      	mov	r1, r4
 8005056:	028a      	lsls	r2, r1, #10
 8005058:	4610      	mov	r0, r2
 800505a:	4619      	mov	r1, r3
 800505c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505e:	2200      	movs	r2, #0
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	61fa      	str	r2, [r7, #28]
 8005064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005068:	f7fb f92a 	bl	80002c0 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4613      	mov	r3, r2
 8005072:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005074:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	3301      	adds	r3, #1
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005084:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800508e:	e002      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005090:	4b05      	ldr	r3, [pc, #20]	@ (80050a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005092:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005098:	4618      	mov	r0, r3
 800509a:	3750      	adds	r7, #80	@ 0x50
 800509c:	46bd      	mov	sp, r7
 800509e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
 80050a8:	00f42400 	.word	0x00f42400
 80050ac:	007a1200 	.word	0x007a1200

080050b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b03      	ldr	r3, [pc, #12]	@ (80050c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000000 	.word	0x20000000

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050cc:	f7ff fff0 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050d0:	4602      	mov	r2, r0
 80050d2:	4b05      	ldr	r3, [pc, #20]	@ (80050e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	0a9b      	lsrs	r3, r3, #10
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	4903      	ldr	r1, [pc, #12]	@ (80050ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80050de:	5ccb      	ldrb	r3, [r1, r3]
 80050e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	0800b27c 	.word	0x0800b27c

080050f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050f4:	f7ff ffdc 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	0b5b      	lsrs	r3, r3, #13
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	4903      	ldr	r1, [pc, #12]	@ (8005114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40023800 	.word	0x40023800
 8005114:	0800b27c 	.word	0x0800b27c

08005118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800513c:	4b7a      	ldr	r3, [pc, #488]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800513e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005142:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	4977      	ldr	r1, [pc, #476]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 800515a:	2301      	movs	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800516a:	4b6f      	ldr	r3, [pc, #444]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800516c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005170:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	496b      	ldr	r1, [pc, #428]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005188:	2301      	movs	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d022      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005198:	4b63      	ldr	r3, [pc, #396]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800519a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800519e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a6:	4960      	ldr	r1, [pc, #384]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 80051b6:	2301      	movs	r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051c2:	d10c      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80051c4:	4b58      	ldr	r3, [pc, #352]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051ca:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	4954      	ldr	r1, [pc, #336]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d022      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80051ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f8:	494b      	ldr	r1, [pc, #300]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005208:	2301      	movs	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005210:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005214:	d10c      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005216:	4b44      	ldr	r3, [pc, #272]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800521c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	3b01      	subs	r3, #1
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	493f      	ldr	r1, [pc, #252]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 808a 	beq.w	8005352 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	4b39      	ldr	r3, [pc, #228]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	4a38      	ldr	r2, [pc, #224]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800524c:	6413      	str	r3, [r2, #64]	@ 0x40
 800524e:	4b36      	ldr	r3, [pc, #216]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800525a:	4b34      	ldr	r3, [pc, #208]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a33      	ldr	r2, [pc, #204]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005264:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005266:	f7fc f8f3 	bl	8001450 <HAL_GetTick>
 800526a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800526e:	f7fc f8ef 	bl	8001450 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e1d1      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005280:	4b2a      	ldr	r3, [pc, #168]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800528c:	4b26      	ldr	r3, [pc, #152]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005294:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02f      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d028      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052c0:	4a19      	ldr	r2, [pc, #100]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052c6:	4b18      	ldr	r3, [pc, #96]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d114      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fc f8bd 	bl	8001450 <HAL_GetTick>
 80052d6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fc f8b9 	bl	8001450 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e199      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ee      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005308:	d114      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800530a:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800531a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800531e:	4902      	ldr	r1, [pc, #8]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]
 8005324:	e00c      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800
 800532c:	40007000 	.word	0x40007000
 8005330:	42470e40 	.word	0x42470e40
 8005334:	4b89      	ldr	r3, [pc, #548]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	4a88      	ldr	r2, [pc, #544]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800533a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800533e:	6093      	str	r3, [r2, #8]
 8005340:	4b86      	ldr	r3, [pc, #536]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005342:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800534c:	4983      	ldr	r1, [pc, #524]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800534e:	4313      	orrs	r3, r2
 8005350:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8005364:	4b7e      	ldr	r3, [pc, #504]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8005366:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005374:	4b79      	ldr	r3, [pc, #484]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800537a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	4976      	ldr	r1, [pc, #472]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d011      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005396:	4b71      	ldr	r3, [pc, #452]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800539c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a4:	496d      	ldr	r1, [pc, #436]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b4:	d101      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80053b6:	2301      	movs	r3, #1
 80053b8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80053c6:	4b65      	ldr	r3, [pc, #404]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80053c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	4961      	ldr	r1, [pc, #388]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d004      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b80      	cmp	r3, #128	@ 0x80
 80053e8:	f040 80c6 	bne.w	8005578 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053ec:	4b5d      	ldr	r3, [pc, #372]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053f2:	f7fc f82d 	bl	8001450 <HAL_GetTick>
 80053f6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053fa:	f7fc f829 	bl	8001450 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e10b      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800540c:	4b53      	ldr	r3, [pc, #332]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f0      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005418:	4a53      	ldr	r2, [pc, #332]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800541e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d023      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d019      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005450:	2b00      	cmp	r3, #0
 8005452:	d004      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800545c:	d00e      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005466:	2b00      	cmp	r3, #0
 8005468:	d019      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d115      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800547a:	d110      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	071b      	lsls	r3, r3, #28
 8005496:	4931      	ldr	r1, [pc, #196]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d026      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d122      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054c6:	4b25      	ldr	r3, [pc, #148]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80054c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054cc:	0e1b      	lsrs	r3, r3, #24
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	431a      	orrs	r2, r3
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	071b      	lsls	r3, r3, #28
 80054ec:	491b      	ldr	r1, [pc, #108]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80054f4:	4b19      	ldr	r3, [pc, #100]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80054f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054fa:	f023 021f 	bic.w	r2, r3, #31
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	3b01      	subs	r3, #1
 8005504:	4915      	ldr	r1, [pc, #84]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	071b      	lsls	r3, r3, #28
 8005532:	490a      	ldr	r1, [pc, #40]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800553a:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005540:	f7fb ff86 	bl	8001450 <HAL_GetTick>
 8005544:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005548:	f7fb ff82 	bl	8001450 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d90a      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e064      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800
 8005560:	424711e0 	.word	0x424711e0
 8005564:	42470068 	.word	0x42470068
 8005568:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800556c:	4b2f      	ldr	r3, [pc, #188]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0e7      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005584:	4b29      	ldr	r3, [pc, #164]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800558a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005592:	4926      	ldr	r1, [pc, #152]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055a6:	4b21      	ldr	r3, [pc, #132]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b4:	491d      	ldr	r1, [pc, #116]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80055c8:	4b18      	ldr	r3, [pc, #96]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d6:	4915      	ldr	r1, [pc, #84]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80055ea:	4b10      	ldr	r3, [pc, #64]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055f0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	490c      	ldr	r1, [pc, #48]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800560c:	4b07      	ldr	r3, [pc, #28]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800560e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005612:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561a:	4904      	ldr	r1, [pc, #16]	@ (800562c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40023800 	.word	0x40023800

08005630 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e273      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d075      	beq.n	800573a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800564e:	4b88      	ldr	r3, [pc, #544]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b04      	cmp	r3, #4
 8005658:	d00c      	beq.n	8005674 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800565a:	4b85      	ldr	r3, [pc, #532]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005662:	2b08      	cmp	r3, #8
 8005664:	d112      	bne.n	800568c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005666:	4b82      	ldr	r3, [pc, #520]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800566e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005672:	d10b      	bne.n	800568c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005674:	4b7e      	ldr	r3, [pc, #504]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d05b      	beq.n	8005738 <HAL_RCC_OscConfig+0x108>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d157      	bne.n	8005738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e24e      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005694:	d106      	bne.n	80056a4 <HAL_RCC_OscConfig+0x74>
 8005696:	4b76      	ldr	r3, [pc, #472]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a75      	ldr	r2, [pc, #468]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 800569c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	e01d      	b.n	80056e0 <HAL_RCC_OscConfig+0xb0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056ac:	d10c      	bne.n	80056c8 <HAL_RCC_OscConfig+0x98>
 80056ae:	4b70      	ldr	r3, [pc, #448]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a6f      	ldr	r2, [pc, #444]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a6c      	ldr	r2, [pc, #432]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e00b      	b.n	80056e0 <HAL_RCC_OscConfig+0xb0>
 80056c8:	4b69      	ldr	r3, [pc, #420]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a68      	ldr	r2, [pc, #416]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	4b66      	ldr	r3, [pc, #408]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a65      	ldr	r2, [pc, #404]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80056da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fb feb2 	bl	8001450 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fb feae 	bl	8001450 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	@ 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e213      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005702:	4b5b      	ldr	r3, [pc, #364]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0xc0>
 800570e:	e014      	b.n	800573a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fb fe9e 	bl	8001450 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005718:	f7fb fe9a 	bl	8001450 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	@ 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e1ff      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800572a:	4b51      	ldr	r3, [pc, #324]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1f0      	bne.n	8005718 <HAL_RCC_OscConfig+0xe8>
 8005736:	e000      	b.n	800573a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d063      	beq.n	800580e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005746:	4b4a      	ldr	r3, [pc, #296]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005752:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800575a:	2b08      	cmp	r3, #8
 800575c:	d11c      	bne.n	8005798 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b44      	ldr	r3, [pc, #272]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d116      	bne.n	8005798 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576a:	4b41      	ldr	r3, [pc, #260]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_RCC_OscConfig+0x152>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d001      	beq.n	8005782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e1d3      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	4b3b      	ldr	r3, [pc, #236]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4937      	ldr	r1, [pc, #220]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005796:	e03a      	b.n	800580e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d020      	beq.n	80057e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057a0:	4b34      	ldr	r3, [pc, #208]	@ (8005874 <HAL_RCC_OscConfig+0x244>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fb fe53 	bl	8001450 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ae:	f7fb fe4f 	bl	8001450 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e1b4      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057cc:	4b28      	ldr	r3, [pc, #160]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4925      	ldr	r1, [pc, #148]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
 80057e0:	e015      	b.n	800580e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e2:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <HAL_RCC_OscConfig+0x244>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fb fe32 	bl	8001450 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f0:	f7fb fe2e 	bl	8001450 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e193      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005802:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d036      	beq.n	8005888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005822:	4b15      	ldr	r3, [pc, #84]	@ (8005878 <HAL_RCC_OscConfig+0x248>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fb fe12 	bl	8001450 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005830:	f7fb fe0e 	bl	8001450 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e173      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005842:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_OscConfig+0x240>)
 8005844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x200>
 800584e:	e01b      	b.n	8005888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005850:	4b09      	ldr	r3, [pc, #36]	@ (8005878 <HAL_RCC_OscConfig+0x248>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7fb fdfb 	bl	8001450 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800585c:	e00e      	b.n	800587c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585e:	f7fb fdf7 	bl	8001450 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d907      	bls.n	800587c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e15c      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
 8005870:	40023800 	.word	0x40023800
 8005874:	42470000 	.word	0x42470000
 8005878:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587c:	4b8a      	ldr	r3, [pc, #552]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 800587e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1ea      	bne.n	800585e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8097 	beq.w	80059c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589a:	4b83      	ldr	r3, [pc, #524]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ae:	4a7e      	ldr	r2, [pc, #504]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80058b6:	4b7c      	ldr	r3, [pc, #496]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c6:	4b79      	ldr	r3, [pc, #484]	@ (8005aac <HAL_RCC_OscConfig+0x47c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d118      	bne.n	8005904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058d2:	4b76      	ldr	r3, [pc, #472]	@ (8005aac <HAL_RCC_OscConfig+0x47c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a75      	ldr	r2, [pc, #468]	@ (8005aac <HAL_RCC_OscConfig+0x47c>)
 80058d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058de:	f7fb fdb7 	bl	8001450 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e6:	f7fb fdb3 	bl	8001450 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e118      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f8:	4b6c      	ldr	r3, [pc, #432]	@ (8005aac <HAL_RCC_OscConfig+0x47c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <HAL_RCC_OscConfig+0x2ea>
 800590c:	4b66      	ldr	r3, [pc, #408]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005910:	4a65      	ldr	r2, [pc, #404]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	6713      	str	r3, [r2, #112]	@ 0x70
 8005918:	e01c      	b.n	8005954 <HAL_RCC_OscConfig+0x324>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b05      	cmp	r3, #5
 8005920:	d10c      	bne.n	800593c <HAL_RCC_OscConfig+0x30c>
 8005922:	4b61      	ldr	r3, [pc, #388]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005926:	4a60      	ldr	r2, [pc, #384]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005928:	f043 0304 	orr.w	r3, r3, #4
 800592c:	6713      	str	r3, [r2, #112]	@ 0x70
 800592e:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	6713      	str	r3, [r2, #112]	@ 0x70
 800593a:	e00b      	b.n	8005954 <HAL_RCC_OscConfig+0x324>
 800593c:	4b5a      	ldr	r3, [pc, #360]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005940:	4a59      	ldr	r2, [pc, #356]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	@ 0x70
 8005948:	4b57      	ldr	r3, [pc, #348]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	4a56      	ldr	r2, [pc, #344]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 800594e:	f023 0304 	bic.w	r3, r3, #4
 8005952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fb fd78 	bl	8001450 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005962:	e00a      	b.n	800597a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005964:	f7fb fd74 	bl	8001450 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e0d7      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597a:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ee      	beq.n	8005964 <HAL_RCC_OscConfig+0x334>
 8005986:	e014      	b.n	80059b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005988:	f7fb fd62 	bl	8001450 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7fb fd5e 	bl	8001450 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e0c1      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a6:	4b40      	ldr	r3, [pc, #256]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ee      	bne.n	8005990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b8:	4b3b      	ldr	r3, [pc, #236]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	4a3a      	ldr	r2, [pc, #232]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 80059be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80ad 	beq.w	8005b28 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ce:	4b36      	ldr	r3, [pc, #216]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d060      	beq.n	8005a9c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d145      	bne.n	8005a6e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e2:	4b33      	ldr	r3, [pc, #204]	@ (8005ab0 <HAL_RCC_OscConfig+0x480>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fb fd32 	bl	8001450 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059f0:	f7fb fd2e 	bl	8001450 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e093      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a02:	4b29      	ldr	r3, [pc, #164]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	3b01      	subs	r3, #1
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	071b      	lsls	r3, r3, #28
 8005a3a:	491b      	ldr	r1, [pc, #108]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a40:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab0 <HAL_RCC_OscConfig+0x480>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fb fd03 	bl	8001450 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fb fcff 	bl	8001450 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e064      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a60:	4b11      	ldr	r3, [pc, #68]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x41e>
 8005a6c:	e05c      	b.n	8005b28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6e:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <HAL_RCC_OscConfig+0x480>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fb fcec 	bl	8001450 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fb fce8 	bl	8001450 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e04d      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8e:	4b06      	ldr	r3, [pc, #24]	@ (8005aa8 <HAL_RCC_OscConfig+0x478>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x44c>
 8005a9a:	e045      	b.n	8005b28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d107      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e040      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40007000 	.word	0x40007000
 8005ab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d030      	beq.n	8005b24 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d129      	bne.n	8005b24 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d122      	bne.n	8005b24 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d119      	bne.n	8005b24 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	3b01      	subs	r3, #1
 8005afe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d10f      	bne.n	8005b24 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d107      	bne.n	8005b24 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d001      	beq.n	8005b28 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800

08005b38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e07b      	b.n	8005c42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d108      	bne.n	8005b64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b5a:	d009      	beq.n	8005b70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	61da      	str	r2, [r3, #28]
 8005b62:	e005      	b.n	8005b70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fb f9dc 	bl	8000f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf4:	ea42 0103 	orr.w	r1, r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	f003 0104 	and.w	r1, r3, #4
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c16:	f003 0210 	and.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e03f      	b.n	8005cdc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fb fa25 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2224      	movs	r2, #36	@ 0x24
 8005c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f828 	bl	8005ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ca2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cb2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce8:	b0c0      	sub	sp, #256	@ 0x100
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	68d9      	ldr	r1, [r3, #12]
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	ea40 0301 	orr.w	r3, r0, r1
 8005d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d3c:	f021 010c 	bic.w	r1, r1, #12
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5e:	6999      	ldr	r1, [r3, #24]
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	ea40 0301 	orr.w	r3, r0, r1
 8005d6a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b95      	ldr	r3, [pc, #596]	@ (8005fc8 <UART_SetConfig+0x2e4>)
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d011      	beq.n	8005d9c <UART_SetConfig+0xb8>
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b93      	ldr	r3, [pc, #588]	@ (8005fcc <UART_SetConfig+0x2e8>)
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d00b      	beq.n	8005d9c <UART_SetConfig+0xb8>
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	4b91      	ldr	r3, [pc, #580]	@ (8005fd0 <UART_SetConfig+0x2ec>)
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d005      	beq.n	8005d9c <UART_SetConfig+0xb8>
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b8f      	ldr	r3, [pc, #572]	@ (8005fd4 <UART_SetConfig+0x2f0>)
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d104      	bne.n	8005da6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7ff f9a8 	bl	80050f0 <HAL_RCC_GetPCLK2Freq>
 8005da0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005da4:	e003      	b.n	8005dae <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005da6:	f7ff f98f 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8005daa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db8:	f040 8110 	bne.w	8005fdc <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005dca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005dce:	4622      	mov	r2, r4
 8005dd0:	462b      	mov	r3, r5
 8005dd2:	1891      	adds	r1, r2, r2
 8005dd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005dd6:	415b      	adcs	r3, r3
 8005dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005dde:	4621      	mov	r1, r4
 8005de0:	eb12 0801 	adds.w	r8, r2, r1
 8005de4:	4629      	mov	r1, r5
 8005de6:	eb43 0901 	adc.w	r9, r3, r1
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dfe:	4690      	mov	r8, r2
 8005e00:	4699      	mov	r9, r3
 8005e02:	4623      	mov	r3, r4
 8005e04:	eb18 0303 	adds.w	r3, r8, r3
 8005e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	eb49 0303 	adc.w	r3, r9, r3
 8005e12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	18db      	adds	r3, r3, r3
 8005e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e30:	4613      	mov	r3, r2
 8005e32:	eb42 0303 	adc.w	r3, r2, r3
 8005e36:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e40:	f7fa fa3e 	bl	80002c0 <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4b63      	ldr	r3, [pc, #396]	@ (8005fd8 <UART_SetConfig+0x2f4>)
 8005e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	011c      	lsls	r4, r3, #4
 8005e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e64:	4642      	mov	r2, r8
 8005e66:	464b      	mov	r3, r9
 8005e68:	1891      	adds	r1, r2, r2
 8005e6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e6c:	415b      	adcs	r3, r3
 8005e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e74:	4641      	mov	r1, r8
 8005e76:	eb12 0a01 	adds.w	sl, r2, r1
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e94:	4692      	mov	sl, r2
 8005e96:	469b      	mov	fp, r3
 8005e98:	4643      	mov	r3, r8
 8005e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8005e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005eb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ebc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	18db      	adds	r3, r3, r3
 8005ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	eb42 0303 	adc.w	r3, r2, r3
 8005ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ece:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005ed2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005ed6:	f7fa f9f3 	bl	80002c0 <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8005fd8 <UART_SetConfig+0x2f4>)
 8005ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	2264      	movs	r2, #100	@ 0x64
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	1acb      	subs	r3, r1, r3
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ef6:	4b38      	ldr	r3, [pc, #224]	@ (8005fd8 <UART_SetConfig+0x2f4>)
 8005ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f04:	441c      	add	r4, r3
 8005f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f18:	4642      	mov	r2, r8
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	1891      	adds	r1, r2, r2
 8005f1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f20:	415b      	adcs	r3, r3
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f28:	4641      	mov	r1, r8
 8005f2a:	1851      	adds	r1, r2, r1
 8005f2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f2e:	4649      	mov	r1, r9
 8005f30:	414b      	adcs	r3, r1
 8005f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f40:	4659      	mov	r1, fp
 8005f42:	00cb      	lsls	r3, r1, #3
 8005f44:	4651      	mov	r1, sl
 8005f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f4a:	4651      	mov	r1, sl
 8005f4c:	00ca      	lsls	r2, r1, #3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	4619      	mov	r1, r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	4642      	mov	r2, r8
 8005f56:	189b      	adds	r3, r3, r2
 8005f58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	460a      	mov	r2, r1
 8005f60:	eb42 0303 	adc.w	r3, r2, r3
 8005f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	18db      	adds	r3, r3, r3
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f82:	4613      	mov	r3, r2
 8005f84:	eb42 0303 	adc.w	r3, r2, r3
 8005f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f92:	f7fa f995 	bl	80002c0 <__aeabi_uldivmod>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd8 <UART_SetConfig+0x2f4>)
 8005f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	2164      	movs	r1, #100	@ 0x64
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	3332      	adds	r3, #50	@ 0x32
 8005fae:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd8 <UART_SetConfig+0x2f4>)
 8005fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	f003 0207 	and.w	r2, r3, #7
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4422      	add	r2, r4
 8005fc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fc4:	e10a      	b.n	80061dc <UART_SetConfig+0x4f8>
 8005fc6:	bf00      	nop
 8005fc8:	40011000 	.word	0x40011000
 8005fcc:	40011400 	.word	0x40011400
 8005fd0:	40011800 	.word	0x40011800
 8005fd4:	40011c00 	.word	0x40011c00
 8005fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005fee:	4642      	mov	r2, r8
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	1891      	adds	r1, r2, r2
 8005ff4:	6239      	str	r1, [r7, #32]
 8005ff6:	415b      	adcs	r3, r3
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ffe:	4641      	mov	r1, r8
 8006000:	1854      	adds	r4, r2, r1
 8006002:	4649      	mov	r1, r9
 8006004:	eb43 0501 	adc.w	r5, r3, r1
 8006008:	f04f 0200 	mov.w	r2, #0
 800600c:	f04f 0300 	mov.w	r3, #0
 8006010:	00eb      	lsls	r3, r5, #3
 8006012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006016:	00e2      	lsls	r2, r4, #3
 8006018:	4614      	mov	r4, r2
 800601a:	461d      	mov	r5, r3
 800601c:	4643      	mov	r3, r8
 800601e:	18e3      	adds	r3, r4, r3
 8006020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006024:	464b      	mov	r3, r9
 8006026:	eb45 0303 	adc.w	r3, r5, r3
 800602a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800602e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800603a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800604a:	4629      	mov	r1, r5
 800604c:	008b      	lsls	r3, r1, #2
 800604e:	4621      	mov	r1, r4
 8006050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006054:	4621      	mov	r1, r4
 8006056:	008a      	lsls	r2, r1, #2
 8006058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800605c:	f7fa f930 	bl	80002c0 <__aeabi_uldivmod>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4b60      	ldr	r3, [pc, #384]	@ (80061e8 <UART_SetConfig+0x504>)
 8006066:	fba3 2302 	umull	r2, r3, r3, r2
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	011c      	lsls	r4, r3, #4
 800606e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006072:	2200      	movs	r2, #0
 8006074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006078:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800607c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006080:	4642      	mov	r2, r8
 8006082:	464b      	mov	r3, r9
 8006084:	1891      	adds	r1, r2, r2
 8006086:	61b9      	str	r1, [r7, #24]
 8006088:	415b      	adcs	r3, r3
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006090:	4641      	mov	r1, r8
 8006092:	1851      	adds	r1, r2, r1
 8006094:	6139      	str	r1, [r7, #16]
 8006096:	4649      	mov	r1, r9
 8006098:	414b      	adcs	r3, r1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060a8:	4659      	mov	r1, fp
 80060aa:	00cb      	lsls	r3, r1, #3
 80060ac:	4651      	mov	r1, sl
 80060ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b2:	4651      	mov	r1, sl
 80060b4:	00ca      	lsls	r2, r1, #3
 80060b6:	4610      	mov	r0, r2
 80060b8:	4619      	mov	r1, r3
 80060ba:	4603      	mov	r3, r0
 80060bc:	4642      	mov	r2, r8
 80060be:	189b      	adds	r3, r3, r2
 80060c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060c4:	464b      	mov	r3, r9
 80060c6:	460a      	mov	r2, r1
 80060c8:	eb42 0303 	adc.w	r3, r2, r3
 80060cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80060da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060e8:	4649      	mov	r1, r9
 80060ea:	008b      	lsls	r3, r1, #2
 80060ec:	4641      	mov	r1, r8
 80060ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f2:	4641      	mov	r1, r8
 80060f4:	008a      	lsls	r2, r1, #2
 80060f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060fa:	f7fa f8e1 	bl	80002c0 <__aeabi_uldivmod>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4611      	mov	r1, r2
 8006104:	4b38      	ldr	r3, [pc, #224]	@ (80061e8 <UART_SetConfig+0x504>)
 8006106:	fba3 2301 	umull	r2, r3, r3, r1
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	2264      	movs	r2, #100	@ 0x64
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	1acb      	subs	r3, r1, r3
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	3332      	adds	r3, #50	@ 0x32
 8006118:	4a33      	ldr	r2, [pc, #204]	@ (80061e8 <UART_SetConfig+0x504>)
 800611a:	fba2 2303 	umull	r2, r3, r2, r3
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006124:	441c      	add	r4, r3
 8006126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800612a:	2200      	movs	r2, #0
 800612c:	673b      	str	r3, [r7, #112]	@ 0x70
 800612e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006130:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006134:	4642      	mov	r2, r8
 8006136:	464b      	mov	r3, r9
 8006138:	1891      	adds	r1, r2, r2
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	415b      	adcs	r3, r3
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006144:	4641      	mov	r1, r8
 8006146:	1851      	adds	r1, r2, r1
 8006148:	6039      	str	r1, [r7, #0]
 800614a:	4649      	mov	r1, r9
 800614c:	414b      	adcs	r3, r1
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800615c:	4659      	mov	r1, fp
 800615e:	00cb      	lsls	r3, r1, #3
 8006160:	4651      	mov	r1, sl
 8006162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006166:	4651      	mov	r1, sl
 8006168:	00ca      	lsls	r2, r1, #3
 800616a:	4610      	mov	r0, r2
 800616c:	4619      	mov	r1, r3
 800616e:	4603      	mov	r3, r0
 8006170:	4642      	mov	r2, r8
 8006172:	189b      	adds	r3, r3, r2
 8006174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006176:	464b      	mov	r3, r9
 8006178:	460a      	mov	r2, r1
 800617a:	eb42 0303 	adc.w	r3, r2, r3
 800617e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	663b      	str	r3, [r7, #96]	@ 0x60
 800618a:	667a      	str	r2, [r7, #100]	@ 0x64
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006198:	4649      	mov	r1, r9
 800619a:	008b      	lsls	r3, r1, #2
 800619c:	4641      	mov	r1, r8
 800619e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a2:	4641      	mov	r1, r8
 80061a4:	008a      	lsls	r2, r1, #2
 80061a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061aa:	f7fa f889 	bl	80002c0 <__aeabi_uldivmod>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4b0d      	ldr	r3, [pc, #52]	@ (80061e8 <UART_SetConfig+0x504>)
 80061b4:	fba3 1302 	umull	r1, r3, r3, r2
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	2164      	movs	r1, #100	@ 0x64
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	3332      	adds	r3, #50	@ 0x32
 80061c6:	4a08      	ldr	r2, [pc, #32]	@ (80061e8 <UART_SetConfig+0x504>)
 80061c8:	fba2 2303 	umull	r2, r3, r2, r3
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	f003 020f 	and.w	r2, r3, #15
 80061d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4422      	add	r2, r4
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80061e2:	46bd      	mov	sp, r7
 80061e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061e8:	51eb851f 	.word	0x51eb851f

080061ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061ec:	b084      	sub	sp, #16
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	f107 001c 	add.w	r0, r7, #28
 80061fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	2b01      	cmp	r3, #1
 8006202:	d122      	bne.n	800624a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006208:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800622c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800622e:	2b01      	cmp	r3, #1
 8006230:	d105      	bne.n	800623e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fa3a 	bl	80076b8 <USB_CoreReset>
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
 8006248:	e01a      	b.n	8006280 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fa2e 	bl	80076b8 <USB_CoreReset>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	639a      	str	r2, [r3, #56]	@ 0x38
 8006272:	e005      	b.n	8006280 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006278:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	2b01      	cmp	r3, #1
 8006284:	d10b      	bne.n	800629e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f043 0206 	orr.w	r2, r3, #6
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062aa:	b004      	add	sp, #16
 80062ac:	4770      	bx	lr
	...

080062b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062be:	79fb      	ldrb	r3, [r7, #7]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d165      	bne.n	8006390 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4a41      	ldr	r2, [pc, #260]	@ (80063cc <USB_SetTurnaroundTime+0x11c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d906      	bls.n	80062da <USB_SetTurnaroundTime+0x2a>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a40      	ldr	r2, [pc, #256]	@ (80063d0 <USB_SetTurnaroundTime+0x120>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d202      	bcs.n	80062da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062d4:	230f      	movs	r3, #15
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e062      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4a3c      	ldr	r2, [pc, #240]	@ (80063d0 <USB_SetTurnaroundTime+0x120>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d306      	bcc.n	80062f0 <USB_SetTurnaroundTime+0x40>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a3b      	ldr	r2, [pc, #236]	@ (80063d4 <USB_SetTurnaroundTime+0x124>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d202      	bcs.n	80062f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062ea:	230e      	movs	r3, #14
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e057      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4a38      	ldr	r2, [pc, #224]	@ (80063d4 <USB_SetTurnaroundTime+0x124>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d306      	bcc.n	8006306 <USB_SetTurnaroundTime+0x56>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a37      	ldr	r2, [pc, #220]	@ (80063d8 <USB_SetTurnaroundTime+0x128>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d202      	bcs.n	8006306 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006300:	230d      	movs	r3, #13
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e04c      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a33      	ldr	r2, [pc, #204]	@ (80063d8 <USB_SetTurnaroundTime+0x128>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d306      	bcc.n	800631c <USB_SetTurnaroundTime+0x6c>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a32      	ldr	r2, [pc, #200]	@ (80063dc <USB_SetTurnaroundTime+0x12c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d802      	bhi.n	800631c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006316:	230c      	movs	r3, #12
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e041      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a2f      	ldr	r2, [pc, #188]	@ (80063dc <USB_SetTurnaroundTime+0x12c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d906      	bls.n	8006332 <USB_SetTurnaroundTime+0x82>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a2e      	ldr	r2, [pc, #184]	@ (80063e0 <USB_SetTurnaroundTime+0x130>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d802      	bhi.n	8006332 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800632c:	230b      	movs	r3, #11
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e036      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a2a      	ldr	r2, [pc, #168]	@ (80063e0 <USB_SetTurnaroundTime+0x130>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d906      	bls.n	8006348 <USB_SetTurnaroundTime+0x98>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a29      	ldr	r2, [pc, #164]	@ (80063e4 <USB_SetTurnaroundTime+0x134>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d802      	bhi.n	8006348 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006342:	230a      	movs	r3, #10
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e02b      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4a26      	ldr	r2, [pc, #152]	@ (80063e4 <USB_SetTurnaroundTime+0x134>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d906      	bls.n	800635e <USB_SetTurnaroundTime+0xae>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a25      	ldr	r2, [pc, #148]	@ (80063e8 <USB_SetTurnaroundTime+0x138>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d202      	bcs.n	800635e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006358:	2309      	movs	r3, #9
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e020      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4a21      	ldr	r2, [pc, #132]	@ (80063e8 <USB_SetTurnaroundTime+0x138>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d306      	bcc.n	8006374 <USB_SetTurnaroundTime+0xc4>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a20      	ldr	r2, [pc, #128]	@ (80063ec <USB_SetTurnaroundTime+0x13c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d802      	bhi.n	8006374 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800636e:	2308      	movs	r3, #8
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	e015      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4a1d      	ldr	r2, [pc, #116]	@ (80063ec <USB_SetTurnaroundTime+0x13c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d906      	bls.n	800638a <USB_SetTurnaroundTime+0xda>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a1c      	ldr	r2, [pc, #112]	@ (80063f0 <USB_SetTurnaroundTime+0x140>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d202      	bcs.n	800638a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006384:	2307      	movs	r3, #7
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e00a      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800638a:	2306      	movs	r3, #6
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e007      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006396:	2309      	movs	r3, #9
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e001      	b.n	80063a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800639c:	2309      	movs	r3, #9
 800639e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	029b      	lsls	r3, r3, #10
 80063b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	00d8acbf 	.word	0x00d8acbf
 80063d0:	00e4e1c0 	.word	0x00e4e1c0
 80063d4:	00f42400 	.word	0x00f42400
 80063d8:	01067380 	.word	0x01067380
 80063dc:	011a499f 	.word	0x011a499f
 80063e0:	01312cff 	.word	0x01312cff
 80063e4:	014ca43f 	.word	0x014ca43f
 80063e8:	016e3600 	.word	0x016e3600
 80063ec:	01a6ab1f 	.word	0x01a6ab1f
 80063f0:	01e84800 	.word	0x01e84800

080063f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f043 0201 	orr.w	r2, r3, #1
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f023 0201 	bic.w	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d115      	bne.n	8006486 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006466:	2001      	movs	r0, #1
 8006468:	f7fa fffe 	bl	8001468 <HAL_Delay>
      ms++;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3301      	adds	r3, #1
 8006470:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 f890 	bl	8007598 <USB_GetMode>
 8006478:	4603      	mov	r3, r0
 800647a:	2b01      	cmp	r3, #1
 800647c:	d01e      	beq.n	80064bc <USB_SetCurrentMode+0x84>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b31      	cmp	r3, #49	@ 0x31
 8006482:	d9f0      	bls.n	8006466 <USB_SetCurrentMode+0x2e>
 8006484:	e01a      	b.n	80064bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d115      	bne.n	80064b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006498:	2001      	movs	r0, #1
 800649a:	f7fa ffe5 	bl	8001468 <HAL_Delay>
      ms++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 f877 	bl	8007598 <USB_GetMode>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <USB_SetCurrentMode+0x84>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b31      	cmp	r3, #49	@ 0x31
 80064b4:	d9f0      	bls.n	8006498 <USB_SetCurrentMode+0x60>
 80064b6:	e001      	b.n	80064bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e005      	b.n	80064c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b32      	cmp	r3, #50	@ 0x32
 80064c0:	d101      	bne.n	80064c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064d0:	b084      	sub	sp, #16
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	e009      	b.n	8006504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	3340      	adds	r3, #64	@ 0x40
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	2200      	movs	r2, #0
 80064fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3301      	adds	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b0e      	cmp	r3, #14
 8006508:	d9f2      	bls.n	80064f0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800650a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11c      	bne.n	800654a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800651e:	f043 0302 	orr.w	r3, r3, #2
 8006522:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e005      	b.n	8006556 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800655c:	461a      	mov	r2, r3
 800655e:	2300      	movs	r3, #0
 8006560:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006568:	4619      	mov	r1, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006570:	461a      	mov	r2, r3
 8006572:	680b      	ldr	r3, [r1, #0]
 8006574:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	2b01      	cmp	r3, #1
 800657a:	d10c      	bne.n	8006596 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800657c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006582:	2100      	movs	r1, #0
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f945 	bl	8006814 <USB_SetDevSpeed>
 800658a:	e008      	b.n	800659e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800658c:	2101      	movs	r1, #1
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f940 	bl	8006814 <USB_SetDevSpeed>
 8006594:	e003      	b.n	800659e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006596:	2103      	movs	r1, #3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f93b 	bl	8006814 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800659e:	2110      	movs	r1, #16
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f8f3 	bl	800678c <USB_FlushTxFifo>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f90f 	bl	80067d4 <USB_FlushRxFifo>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c6:	461a      	mov	r2, r3
 80065c8:	2300      	movs	r3, #0
 80065ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d2:	461a      	mov	r2, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065de:	461a      	mov	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	e043      	b.n	8006672 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006600:	d118      	bne.n	8006634 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006614:	461a      	mov	r2, r3
 8006616:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	e013      	b.n	8006646 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662a:	461a      	mov	r2, r3
 800662c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	e008      	b.n	8006646 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006640:	461a      	mov	r2, r3
 8006642:	2300      	movs	r3, #0
 8006644:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006652:	461a      	mov	r2, r3
 8006654:	2300      	movs	r3, #0
 8006656:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006664:	461a      	mov	r2, r3
 8006666:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800666a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3301      	adds	r3, #1
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	429a      	cmp	r2, r3
 8006678:	d3b7      	bcc.n	80065ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	e043      	b.n	8006708 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006692:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006696:	d118      	bne.n	80066ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066aa:	461a      	mov	r2, r3
 80066ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e013      	b.n	80066dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c0:	461a      	mov	r2, r3
 80066c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	e008      	b.n	80066dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d6:	461a      	mov	r2, r3
 80066d8:	2300      	movs	r3, #0
 80066da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fa:	461a      	mov	r2, r3
 80066fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006700:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3301      	adds	r3, #1
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d3b7      	bcc.n	8006680 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800671e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006722:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006730:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f043 0210 	orr.w	r2, r3, #16
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	4b0f      	ldr	r3, [pc, #60]	@ (8006788 <USB_DevInit+0x2b8>)
 800674a:	4313      	orrs	r3, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006764:	2b01      	cmp	r3, #1
 8006766:	d107      	bne.n	8006778 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006770:	f043 0304 	orr.w	r3, r3, #4
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006778:	7dfb      	ldrb	r3, [r7, #23]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006784:	b004      	add	sp, #16
 8006786:	4770      	bx	lr
 8006788:	803c3800 	.word	0x803c3800

0800678c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	019b      	lsls	r3, r3, #6
 800679e:	f043 0220 	orr.w	r2, r3, #32
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3301      	adds	r3, #1
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	4a08      	ldr	r2, [pc, #32]	@ (80067d0 <USB_FlushTxFifo+0x44>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d901      	bls.n	80067b6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e006      	b.n	80067c4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d0f1      	beq.n	80067a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	00030d40 	.word	0x00030d40

080067d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2210      	movs	r2, #16
 80067e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	4a08      	ldr	r2, [pc, #32]	@ (8006810 <USB_FlushRxFifo+0x3c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e006      	b.n	8006804 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b10      	cmp	r3, #16
 8006800:	d0f1      	beq.n	80067e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	00030d40 	.word	0x00030d40

08006814 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006834:	4313      	orrs	r3, r2
 8006836:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006846:	b480      	push	{r7}
 8006848:	b087      	sub	sp, #28
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0306 	and.w	r3, r3, #6
 800685e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]
 800686a:	e00a      	b.n	8006882 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d002      	beq.n	8006878 <USB_GetDevSpeed+0x32>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b06      	cmp	r3, #6
 8006876:	d102      	bne.n	800687e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006878:	2302      	movs	r3, #2
 800687a:	75fb      	strb	r3, [r7, #23]
 800687c:	e001      	b.n	8006882 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800687e:	230f      	movs	r3, #15
 8006880:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
}
 8006884:	4618      	mov	r0, r3
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d13a      	bne.n	8006922 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	68f9      	ldr	r1, [r7, #12]
 80068c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068ca:	4313      	orrs	r3, r2
 80068cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d155      	bne.n	8006990 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	78db      	ldrb	r3, [r3, #3]
 80068fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006900:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	059b      	lsls	r3, r3, #22
 8006906:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006908:	4313      	orrs	r3, r2
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	440a      	add	r2, r1
 8006912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800691a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	e036      	b.n	8006990 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006928:	69da      	ldr	r2, [r3, #28]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f003 030f 	and.w	r3, r3, #15
 8006932:	2101      	movs	r1, #1
 8006934:	fa01 f303 	lsl.w	r3, r1, r3
 8006938:	041b      	lsls	r3, r3, #16
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006940:	4313      	orrs	r3, r2
 8006942:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d11a      	bne.n	8006990 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	78db      	ldrb	r3, [r3, #3]
 8006974:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006976:	430b      	orrs	r3, r1
 8006978:	4313      	orrs	r3, r2
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800698e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	@ 0x28
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f040 815c 	bne.w	8006c7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d132      	bne.n	8006a30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a28:	0cdb      	lsrs	r3, r3, #19
 8006a2a:	04db      	lsls	r3, r3, #19
 8006a2c:	6113      	str	r3, [r2, #16]
 8006a2e:	e074      	b.n	8006b1a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4a:	0cdb      	lsrs	r3, r3, #19
 8006a4c:	04db      	lsls	r3, r3, #19
 8006a4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a6a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a6e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6959      	ldr	r1, [r3, #20]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	440b      	add	r3, r1
 8006a8c:	1e59      	subs	r1, r3, #1
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a98:	4b9d      	ldr	r3, [pc, #628]	@ (8006d10 <USB_EPStartXfer+0x370>)
 8006a9a:	400b      	ands	r3, r1
 8006a9c:	69b9      	ldr	r1, [r7, #24]
 8006a9e:	0148      	lsls	r0, r1, #5
 8006aa0:	69f9      	ldr	r1, [r7, #28]
 8006aa2:	4401      	add	r1, r0
 8006aa4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ac2:	69b9      	ldr	r1, [r7, #24]
 8006ac4:	0148      	lsls	r0, r1, #5
 8006ac6:	69f9      	ldr	r1, [r7, #28]
 8006ac8:	4401      	add	r1, r0
 8006aca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	78db      	ldrb	r3, [r3, #3]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d11f      	bne.n	8006b1a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006af8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006b1a:	79fb      	ldrb	r3, [r7, #7]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d14b      	bne.n	8006bb8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b34:	461a      	mov	r2, r3
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	78db      	ldrb	r3, [r3, #3]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d128      	bne.n	8006b96 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d110      	bne.n	8006b76 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	69fa      	ldr	r2, [r7, #28]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	e00f      	b.n	8006b96 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	e12f      	b.n	8006e18 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	0151      	lsls	r1, r2, #5
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	440a      	add	r2, r1
 8006bce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006bd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	78db      	ldrb	r3, [r3, #3]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d015      	beq.n	8006c0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8117 	beq.w	8006e18 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006c00:	69f9      	ldr	r1, [r7, #28]
 8006c02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c06:	4313      	orrs	r3, r2
 8006c08:	634b      	str	r3, [r1, #52]	@ 0x34
 8006c0a:	e105      	b.n	8006e18 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d110      	bne.n	8006c3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	e00f      	b.n	8006c5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	68d9      	ldr	r1, [r3, #12]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	781a      	ldrb	r2, [r3, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	b298      	uxth	r0, r3
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4603      	mov	r3, r0
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fa2b 	bl	80070ce <USB_WritePacket>
 8006c78:	e0ce      	b.n	8006e18 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c94:	0cdb      	lsrs	r3, r3, #19
 8006c96:	04db      	lsls	r3, r3, #19
 8006c98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	0151      	lsls	r1, r2, #5
 8006cac:	69fa      	ldr	r2, [r7, #28]
 8006cae:	440a      	add	r2, r1
 8006cb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cb4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cb8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006cbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d126      	bne.n	8006d14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cdc:	69b9      	ldr	r1, [r7, #24]
 8006cde:	0148      	lsls	r0, r1, #5
 8006ce0:	69f9      	ldr	r1, [r7, #28]
 8006ce2:	4401      	add	r1, r0
 8006ce4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d0a:	6113      	str	r3, [r2, #16]
 8006d0c:	e036      	b.n	8006d7c <USB_EPStartXfer+0x3dc>
 8006d0e:	bf00      	nop
 8006d10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	695a      	ldr	r2, [r3, #20]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	1e5a      	subs	r2, r3, #1
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	8afb      	ldrh	r3, [r7, #22]
 8006d3a:	04d9      	lsls	r1, r3, #19
 8006d3c:	4b39      	ldr	r3, [pc, #228]	@ (8006e24 <USB_EPStartXfer+0x484>)
 8006d3e:	400b      	ands	r3, r1
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	0148      	lsls	r0, r1, #5
 8006d44:	69f9      	ldr	r1, [r7, #28]
 8006d46:	4401      	add	r1, r0
 8006d48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	8af9      	ldrh	r1, [r7, #22]
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d6c:	69b9      	ldr	r1, [r7, #24]
 8006d6e:	0148      	lsls	r0, r1, #5
 8006d70:	69f9      	ldr	r1, [r7, #28]
 8006d72:	4401      	add	r1, r0
 8006d74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d10d      	bne.n	8006d9e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	68d9      	ldr	r1, [r3, #12]
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d9a:	460a      	mov	r2, r1
 8006d9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	78db      	ldrb	r3, [r3, #3]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d128      	bne.n	8006df8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d110      	bne.n	8006dd8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	e00f      	b.n	8006df8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	69fa      	ldr	r2, [r7, #28]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006df6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	1ff80000 	.word	0x1ff80000

08006e28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	4613      	mov	r3, r2
 8006e34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	785b      	ldrb	r3, [r3, #1]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f040 80cd 	bne.w	8006fe4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d132      	bne.n	8006eb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e6c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e70:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eb0:	0cdb      	lsrs	r3, r3, #19
 8006eb2:	04db      	lsls	r3, r3, #19
 8006eb4:	6113      	str	r3, [r2, #16]
 8006eb6:	e04e      	b.n	8006f56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	0151      	lsls	r1, r2, #5
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	440a      	add	r2, r1
 8006ece:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed2:	0cdb      	lsrs	r3, r3, #19
 8006ed4:	04db      	lsls	r3, r3, #19
 8006ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	0151      	lsls	r1, r2, #5
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	440a      	add	r2, r1
 8006eee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ef2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ef6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006efa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d903      	bls.n	8006f10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f3c:	691a      	ldr	r2, [r3, #16]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f46:	6939      	ldr	r1, [r7, #16]
 8006f48:	0148      	lsls	r0, r1, #5
 8006f4a:	6979      	ldr	r1, [r7, #20]
 8006f4c:	4401      	add	r1, r0
 8006f4e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f52:	4313      	orrs	r3, r2
 8006f54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d11e      	bne.n	8006f9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f70:	461a      	mov	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	e092      	b.n	80070c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	0151      	lsls	r1, r2, #5
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	440a      	add	r2, r1
 8006fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fb4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006fb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d07e      	beq.n	80070c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd8:	6979      	ldr	r1, [r7, #20]
 8006fda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	634b      	str	r3, [r1, #52]	@ 0x34
 8006fe2:	e06d      	b.n	80070c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ffe:	0cdb      	lsrs	r3, r3, #19
 8007000:	04db      	lsls	r3, r3, #19
 8007002:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800701e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007022:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007026:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007052:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007056:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800706e:	6939      	ldr	r1, [r7, #16]
 8007070:	0148      	lsls	r0, r1, #5
 8007072:	6979      	ldr	r1, [r7, #20]
 8007074:	4401      	add	r1, r0
 8007076:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800707a:	4313      	orrs	r3, r2
 800707c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d10d      	bne.n	80070a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	68d9      	ldr	r1, [r3, #12]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709c:	460a      	mov	r2, r1
 800709e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b089      	sub	sp, #36	@ 0x24
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	4611      	mov	r1, r2
 80070da:	461a      	mov	r2, r3
 80070dc:	460b      	mov	r3, r1
 80070de:	71fb      	strb	r3, [r7, #7]
 80070e0:	4613      	mov	r3, r2
 80070e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80070ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d123      	bne.n	800713c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80070f4:	88bb      	ldrh	r3, [r7, #4]
 80070f6:	3303      	adds	r3, #3
 80070f8:	089b      	lsrs	r3, r3, #2
 80070fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070fc:	2300      	movs	r3, #0
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	e018      	b.n	8007134 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	031a      	lsls	r2, r3, #12
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4413      	add	r3, r2
 800710a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800710e:	461a      	mov	r2, r3
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	3301      	adds	r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	3301      	adds	r3, #1
 8007120:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	3301      	adds	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	3301      	adds	r3, #1
 800712c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	3301      	adds	r3, #1
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	429a      	cmp	r2, r3
 800713a:	d3e2      	bcc.n	8007102 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3724      	adds	r7, #36	@ 0x24
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800714a:	b480      	push	{r7}
 800714c:	b08b      	sub	sp, #44	@ 0x2c
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	4613      	mov	r3, r2
 8007156:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007160:	88fb      	ldrh	r3, [r7, #6]
 8007162:	089b      	lsrs	r3, r3, #2
 8007164:	b29b      	uxth	r3, r3
 8007166:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007168:	88fb      	ldrh	r3, [r7, #6]
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007170:	2300      	movs	r3, #0
 8007172:	623b      	str	r3, [r7, #32]
 8007174:	e014      	b.n	80071a0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	601a      	str	r2, [r3, #0]
    pDest++;
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	3301      	adds	r3, #1
 8007186:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718a:	3301      	adds	r3, #1
 800718c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	3301      	adds	r3, #1
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	3301      	adds	r3, #1
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	3301      	adds	r3, #1
 800719e:	623b      	str	r3, [r7, #32]
 80071a0:	6a3a      	ldr	r2, [r7, #32]
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d3e6      	bcc.n	8007176 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071a8:	8bfb      	ldrh	r3, [r7, #30]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01e      	beq.n	80071ec <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071b8:	461a      	mov	r2, r3
 80071ba:	f107 0310 	add.w	r3, r7, #16
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	fa22 f303 	lsr.w	r3, r2, r3
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	701a      	strb	r2, [r3, #0]
      i++;
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	3301      	adds	r3, #1
 80071d8:	623b      	str	r3, [r7, #32]
      pDest++;
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	3301      	adds	r3, #1
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80071e0:	8bfb      	ldrh	r3, [r7, #30]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80071e6:	8bfb      	ldrh	r3, [r7, #30]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1ea      	bne.n	80071c2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	372c      	adds	r7, #44	@ 0x2c
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d12c      	bne.n	8007270 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	db12      	blt.n	800724e <USB_EPSetStall+0x54>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00f      	beq.n	800724e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007248:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800724c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	e02b      	b.n	80072c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	db12      	blt.n	80072a8 <USB_EPSetStall+0xae>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00f      	beq.n	80072a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	440a      	add	r2, r1
 800729e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	0151      	lsls	r1, r2, #5
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	440a      	add	r2, r1
 80072be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d128      	bne.n	8007344 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800730c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007310:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	78db      	ldrb	r3, [r3, #3]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d003      	beq.n	8007322 <USB_EPClearStall+0x4c>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	78db      	ldrb	r3, [r3, #3]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d138      	bne.n	8007394 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	0151      	lsls	r1, r2, #5
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	440a      	add	r2, r1
 8007338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800733c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e027      	b.n	8007394 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800735e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007362:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	78db      	ldrb	r3, [r3, #3]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d003      	beq.n	8007374 <USB_EPClearStall+0x9e>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	78db      	ldrb	r3, [r3, #3]
 8007370:	2b02      	cmp	r3, #2
 8007372:	d10f      	bne.n	8007394 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007392:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	460b      	mov	r3, r1
 80073ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073c0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80073c4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073dc:	4313      	orrs	r3, r2
 80073de:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800741c:	f023 0302 	bic.w	r3, r3, #2
 8007420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800744a:	f023 0303 	bic.w	r3, r3, #3
 800744e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800745e:	f043 0302 	orr.w	r3, r3, #2
 8007462:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4013      	ands	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800748a:	68fb      	ldr	r3, [r7, #12]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	4013      	ands	r3, r2
 80074ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	0c1b      	lsrs	r3, r3, #16
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	4013      	ands	r3, r2
 80074ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	b29b      	uxth	r3, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	4013      	ands	r3, r2
 800752c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800752e:	68bb      	ldr	r3, [r7, #8]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800755c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800755e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	fa22 f303 	lsr.w	r3, r2, r3
 800756c:	01db      	lsls	r3, r3, #7
 800756e:	b2db      	uxtb	r3, r3
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4013      	ands	r3, r2
 8007588:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800758a:	68bb      	ldr	r3, [r7, #8]
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f003 0301 	and.w	r3, r3, #1
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ce:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
	...

080075fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	460b      	mov	r3, r1
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	333c      	adds	r3, #60	@ 0x3c
 8007612:	3304      	adds	r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4a26      	ldr	r2, [pc, #152]	@ (80076b4 <USB_EP0_OutStart+0xb8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d90a      	bls.n	8007636 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800762c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007630:	d101      	bne.n	8007636 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	e037      	b.n	80076a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763c:	461a      	mov	r2, r3
 800763e:	2300      	movs	r3, #0
 8007640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007650:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007664:	f043 0318 	orr.w	r3, r3, #24
 8007668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007678:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800767c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d10f      	bne.n	80076a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768a:	461a      	mov	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800769e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80076a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	4f54300a 	.word	0x4f54300a

080076b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	4a13      	ldr	r2, [pc, #76]	@ (8007718 <USB_CoreReset+0x60>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d901      	bls.n	80076d4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e01a      	b.n	800770a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	daf3      	bge.n	80076c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f043 0201 	orr.w	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3301      	adds	r3, #1
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	4a09      	ldr	r2, [pc, #36]	@ (8007718 <USB_CoreReset+0x60>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d901      	bls.n	80076fc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e006      	b.n	800770a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b01      	cmp	r3, #1
 8007706:	d0f1      	beq.n	80076ec <USB_CoreReset+0x34>

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	00030d40 	.word	0x00030d40

0800771c <__NVIC_SystemReset>:
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007720:	f3bf 8f4f 	dsb	sy
}
 8007724:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007726:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <__NVIC_SystemReset+0x24>)
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800772e:	4904      	ldr	r1, [pc, #16]	@ (8007740 <__NVIC_SystemReset+0x24>)
 8007730:	4b04      	ldr	r3, [pc, #16]	@ (8007744 <__NVIC_SystemReset+0x28>)
 8007732:	4313      	orrs	r3, r2
 8007734:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007736:	f3bf 8f4f 	dsb	sy
}
 800773a:	bf00      	nop
    __NOP();
 800773c:	bf00      	nop
 800773e:	e7fd      	b.n	800773c <__NVIC_SystemReset+0x20>
 8007740:	e000ed00 	.word	0xe000ed00
 8007744:	05fa0004 	.word	0x05fa0004

08007748 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007754:	f240 401c 	movw	r0, #1052	@ 0x41c
 8007758:	f002 fc28 	bl	8009fac <USBD_static_malloc>
 800775c:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d105      	bne.n	8007770 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800776c:	2302      	movs	r3, #2
 800776e:	e03f      	b.n	80077f0 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007786:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2202      	movs	r2, #2
 80077a6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	4798      	blx	r3
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e000      	b.n	80077f0 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800780e:	2302      	movs	r3, #2
 8007810:	e027      	b.n	8007862 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007818:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2202      	movs	r2, #2
 800782e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2202      	movs	r2, #2
 800783e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007852:	4618      	mov	r0, r3
 8007854:	f002 fbb8 	bl	8009fc8 <USBD_static_free>
  pdev->pClassData = NULL;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800787c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007894:	2303      	movs	r3, #3
 8007896:	e0d5      	b.n	8007a44 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d03e      	beq.n	8007922 <USBD_DFU_Setup+0xb6>
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	f040 80c5 	bne.w	8007a34 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	785b      	ldrb	r3, [r3, #1]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d82f      	bhi.n	8007912 <USBD_DFU_Setup+0xa6>
 80078b2:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <USBD_DFU_Setup+0x4c>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	08007909 	.word	0x08007909
 80078bc:	080078d5 	.word	0x080078d5
 80078c0:	080078df 	.word	0x080078df
 80078c4:	080078e9 	.word	0x080078e9
 80078c8:	080078f1 	.word	0x080078f1
 80078cc:	080078f9 	.word	0x080078f9
 80078d0:	08007901 	.word	0x08007901
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fa6c 	bl	8007db4 <DFU_Download>
          break;
 80078dc:	e020      	b.n	8007920 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fad3 	bl	8007e8c <DFU_Upload>
          break;
 80078e6:	e01b      	b.n	8007920 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fba9 	bl	8008040 <DFU_GetStatus>
          break;
 80078ee:	e017      	b.n	8007920 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc5b 	bl	80081ac <DFU_ClearStatus>
          break;
 80078f6:	e013      	b.n	8007920 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fcab 	bl	8008254 <DFU_GetState>
          break;
 80078fe:	e00f      	b.n	8007920 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fcbf 	bl	8008284 <DFU_Abort>
          break;
 8007906:	e00b      	b.n	8007920 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f9ee 	bl	8007cec <DFU_Detach>
          break;
 8007910:	e006      	b.n	8007920 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 fdfb 	bl	8009510 <USBD_CtlError>
          ret = USBD_FAIL;
 800791a:	2303      	movs	r3, #3
 800791c:	77fb      	strb	r3, [r7, #31]
          break;
 800791e:	bf00      	nop
      }
      break;
 8007920:	e08f      	b.n	8007a42 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	2b0b      	cmp	r3, #11
 8007928:	d87b      	bhi.n	8007a22 <USBD_DFU_Setup+0x1b6>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <USBD_DFU_Setup+0xc4>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007961 	.word	0x08007961
 8007934:	08007a31 	.word	0x08007a31
 8007938:	08007a23 	.word	0x08007a23
 800793c:	08007a23 	.word	0x08007a23
 8007940:	08007a23 	.word	0x08007a23
 8007944:	08007a23 	.word	0x08007a23
 8007948:	0800798b 	.word	0x0800798b
 800794c:	08007a23 	.word	0x08007a23
 8007950:	08007a23 	.word	0x08007a23
 8007954:	08007a23 	.word	0x08007a23
 8007958:	080079b5 	.word	0x080079b5
 800795c:	080079e1 	.word	0x080079e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b03      	cmp	r3, #3
 800796a:	d107      	bne.n	800797c <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800796c:	f107 030e 	add.w	r3, r7, #14
 8007970:	2202      	movs	r2, #2
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fe3c 	bl	80095f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800797a:	e05a      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fdc6 	bl	8009510 <USBD_CtlError>
            ret = USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	77fb      	strb	r3, [r7, #31]
          break;
 8007988:	e053      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	885b      	ldrh	r3, [r3, #2]
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	b29b      	uxth	r3, r3
 8007992:	2b21      	cmp	r3, #33	@ 0x21
 8007994:	d107      	bne.n	80079a6 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8007996:	4b2d      	ldr	r3, [pc, #180]	@ (8007a4c <USBD_DFU_Setup+0x1e0>)
 8007998:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b09      	cmp	r3, #9
 80079a0:	bf28      	it	cs
 80079a2:	2309      	movcs	r3, #9
 80079a4:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	461a      	mov	r2, r3
 80079aa:	69b9      	ldr	r1, [r7, #24]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fe20 	bl	80095f2 <USBD_CtlSendData>
          break;
 80079b2:	e03e      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d108      	bne.n	80079d2 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079c6:	2201      	movs	r2, #1
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 fe11 	bl	80095f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079d0:	e02f      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f001 fd9b 	bl	8009510 <USBD_CtlError>
            ret = USBD_FAIL;
 80079da:	2303      	movs	r3, #3
 80079dc:	77fb      	strb	r3, [r7, #31]
          break;
 80079de:	e028      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	885b      	ldrh	r3, [r3, #2]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d114      	bne.n	8007a14 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d107      	bne.n	8007a06 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	885b      	ldrh	r3, [r3, #2]
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a04:	e015      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 fd81 	bl	8009510 <USBD_CtlError>
              ret = USBD_FAIL;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	77fb      	strb	r3, [r7, #31]
          break;
 8007a12:	e00e      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fd7a 	bl	8009510 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	77fb      	strb	r3, [r7, #31]
          break;
 8007a20:	e007      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fd73 	bl	8009510 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	77fb      	strb	r3, [r7, #31]
          break;
 8007a2e:	e000      	b.n	8007a32 <USBD_DFU_Setup+0x1c6>
          break;
 8007a30:	bf00      	nop
      }
      break;
 8007a32:	e006      	b.n	8007a42 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 fd6a 	bl	8009510 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	77fb      	strb	r3, [r7, #31]
      break;
 8007a40:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a42:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3720      	adds	r7, #32
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	2000005a 	.word	0x2000005a

08007a50 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	221b      	movs	r2, #27
 8007a5c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8007a5e:	4b03      	ldr	r3, [pc, #12]	@ (8007a6c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	20000048 	.word	0x20000048

08007a70 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b088      	sub	sp, #32
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a94:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007a9c:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e0ce      	b.n	8007c46 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	f040 80bd 	bne.w	8007c2e <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d17c      	bne.n	8007bb8 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	f000 8093 	beq.w	8007bf0 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	d15e      	bne.n	8007b92 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b21      	cmp	r3, #33	@ 0x21
 8007ada:	d124      	bne.n	8007b26 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	789b      	ldrb	r3, [r3, #2]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	441a      	add	r2, r3
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	78db      	ldrb	r3, [r3, #3]
 8007b06:	041b      	lsls	r3, r3, #16
 8007b08:	441a      	add	r2, r3
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	791b      	ldrb	r3, [r3, #4]
 8007b1a:	061b      	lsls	r3, r3, #24
 8007b1c:	441a      	add	r2, r3
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8007b24:	e064      	b.n	8007bf0 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b41      	cmp	r3, #65	@ 0x41
 8007b2c:	d12f      	bne.n	8007b8e <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	785b      	ldrb	r3, [r3, #1]
 8007b32:	461a      	mov	r2, r3
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	789b      	ldrb	r3, [r3, #2]
 8007b44:	021b      	lsls	r3, r3, #8
 8007b46:	441a      	add	r2, r3
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	78db      	ldrb	r3, [r3, #3]
 8007b58:	041b      	lsls	r3, r3, #16
 8007b5a:	441a      	add	r2, r3
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	791b      	ldrb	r3, [r3, #4]
 8007b6c:	061b      	lsls	r3, r3, #24
 8007b6e:	441a      	add	r2, r3
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d032      	beq.n	8007bf0 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e05b      	b.n	8007c46 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e059      	b.n	8007c46 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8007baa:	f107 030c 	add.w	r3, r7, #12
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fcad 	bl	8009510 <USBD_CtlError>
 8007bb6:	e01b      	b.n	8007bf0 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d916      	bls.n	8007bf0 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007bc8:	3b02      	subs	r3, #2
 8007bca:	029a      	lsls	r2, r3, #10
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8007bd2:	4413      	add	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	69f8      	ldr	r0, [r7, #28]
 8007bdc:	6979      	ldr	r1, [r7, #20]
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8007be4:	4798      	blx	r3
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e02a      	b.n	8007c46 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	2203      	movs	r2, #3
 8007c04:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007c2c:	e00a      	b.n	8007c44 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007c34:	2b07      	cmp	r3, #7
 8007c36:	d103      	bne.n	8007c40 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fb75 	bl	8008328 <DFU_Leave>
 8007c3e:	e001      	b.n	8007c44 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e000      	b.n	8007c46 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3720      	adds	r7, #32
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	220a      	movs	r2, #10
 8007c70:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8007c72:	4b03      	ldr	r3, [pc, #12]	@ (8007c80 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	20000064 	.word	0x20000064

08007c84 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c98:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8007c9a:	7afb      	ldrb	r3, [r7, #11]
 8007c9c:	2b06      	cmp	r3, #6
 8007c9e:	d808      	bhi.n	8007cb2 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	4905      	ldr	r1, [pc, #20]	@ (8007cbc <USBD_DFU_GetUsrStringDesc+0x38>)
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 fc42 	bl	8009532 <USBD_GetString>
    return USBD_StrDesc;
 8007cae:	4b03      	ldr	r3, [pc, #12]	@ (8007cbc <USBD_DFU_GetUsrStringDesc+0x38>)
 8007cb0:	e000      	b.n	8007cb4 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8007cb2:	2300      	movs	r3, #0
  }
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	20000314 	.word	0x20000314

08007cc0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e004      	b.n	8007cde <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	370c      	adds	r7, #12
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
	...

08007cec <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cfc:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d051      	beq.n	8007da8 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d013      	beq.n	8007d36 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d00e      	beq.n	8007d36 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007d1e:	2b05      	cmp	r3, #5
 8007d20:	d009      	beq.n	8007d36 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007d28:	2b06      	cmp	r3, #6
 8007d2a:	d004      	beq.n	8007d36 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007d32:	2b09      	cmp	r3, #9
 8007d34:	d125      	bne.n	8007d82 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8007d82:	4b0b      	ldr	r3, [pc, #44]	@ (8007db0 <DFU_Detach+0xc4>)
 8007d84:	7d5b      	ldrb	r3, [r3, #21]
 8007d86:	f003 0310 	and.w	r3, r3, #16
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d006      	beq.n	8007d9c <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fb7b 	bl	800848a <USBD_Stop>
    (void)USBD_Start(pdev);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fb6c 	bl	8008472 <USBD_Start>
 8007d9a:	e006      	b.n	8007daa <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	885b      	ldrh	r3, [r3, #2]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7f9 fb61 	bl	8001468 <HAL_Delay>
 8007da6:	e000      	b.n	8007daa <DFU_Detach+0xbe>
    return;
 8007da8:	bf00      	nop
  }
}
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000048 	.word	0x20000048

08007db4 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007dc4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05b      	beq.n	8007e84 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	88db      	ldrh	r3, [r3, #6]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d02d      	beq.n	8007e30 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d004      	beq.n	8007de8 <DFU_Download+0x34>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007de4:	2b05      	cmp	r3, #5
 8007de6:	d11e      	bne.n	8007e26 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	885b      	ldrh	r3, [r3, #2]
 8007dec:	461a      	mov	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	88db      	ldrh	r3, [r3, #6]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2203      	movs	r2, #3
 8007e04:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8007e14:	68f9      	ldr	r1, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f001 fc13 	bl	800964a <USBD_CtlPrepareRx>
 8007e24:	e02f      	b.n	8007e86 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 fb71 	bl	8009510 <USBD_CtlError>
 8007e2e:	e02a      	b.n	8007e86 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	d004      	beq.n	8007e44 <DFU_Download+0x90>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d11a      	bne.n	8007e7a <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2206      	movs	r2, #6
 8007e50:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007e78:	e005      	b.n	8007e86 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fb47 	bl	8009510 <USBD_CtlError>
 8007e82:	e000      	b.n	8007e86 <DFU_Download+0xd2>
    return;
 8007e84:	bf00      	nop
    }
  }
}
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e9c:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007ea4:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80c4 	beq.w	8008036 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	88db      	ldrh	r3, [r3, #6]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 80a8 	beq.w	8008008 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d005      	beq.n	8007ece <DFU_Upload+0x42>
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007ec8:	2b09      	cmp	r3, #9
 8007eca:	f040 8090 	bne.w	8007fee <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	885b      	ldrh	r3, [r3, #2]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	88db      	ldrh	r3, [r3, #6]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d12c      	bne.n	8007f4a <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d901      	bls.n	8007efe <DFU_Upload+0x72>
 8007efa:	2202      	movs	r2, #2
 8007efc:	e000      	b.n	8007f00 <DFU_Upload+0x74>
 8007efe:	2209      	movs	r2, #9
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2221      	movs	r2, #33	@ 0x21
 8007f34:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2241      	movs	r2, #65	@ 0x41
 8007f3a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fb55 	bl	80095f2 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007f48:	e076      	b.n	8008038 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d931      	bls.n	8007fb8 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2209      	movs	r2, #9
 8007f58:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007f86:	3b02      	subs	r3, #2
 8007f88:	029a      	lsls	r2, r3, #10
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8007f90:	4413      	add	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	6979      	ldr	r1, [r7, #20]
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8007fa2:	4798      	blx	r3
 8007fa4:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007fac:	461a      	mov	r2, r3
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 fb1e 	bl	80095f2 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007fb6:	e03f      	b.n	8008038 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	220f      	movs	r2, #15
 8007fbc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 fa92 	bl	8009510 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8007fec:	e024      	b.n	8008038 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f001 fa85 	bl	8009510 <USBD_CtlError>
 8008006:	e017      	b.n	8008038 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	2200      	movs	r2, #0
 800801c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008034:	e000      	b.n	8008038 <DFU_Upload+0x1ac>
    return;
 8008036:	bf00      	nop
  }
}
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800804e:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008056:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 80a0 	beq.w	80081a0 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008066:	2b03      	cmp	r3, #3
 8008068:	d002      	beq.n	8008070 <DFU_GetStatus+0x30>
 800806a:	2b06      	cmp	r3, #6
 800806c:	d051      	beq.n	8008112 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800806e:	e08e      	b.n	800818e <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008076:	2b00      	cmp	r3, #0
 8008078:	d034      	beq.n	80080e4 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2204      	movs	r2, #4
 800807e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10e      	bne.n	80080ce <DFU_GetStatus+0x8e>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b41      	cmp	r3, #65	@ 0x41
 80080b6:	d10a      	bne.n	80080ce <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80080c8:	2100      	movs	r1, #0
 80080ca:	4798      	blx	r3
      break;
 80080cc:	e05f      	b.n	800818e <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80080de:	2101      	movs	r1, #1
 80080e0:	4798      	blx	r3
      break;
 80080e2:	e054      	b.n	800818e <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2205      	movs	r2, #5
 80080e8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008110:	e03d      	b.n	800818e <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008118:	2b01      	cmp	r3, #1
 800811a:	d116      	bne.n	800814a <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2207      	movs	r2, #7
 8008120:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008148:	e020      	b.n	800818c <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008150:	2b00      	cmp	r3, #0
 8008152:	d11b      	bne.n	800818c <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8008154:	4b14      	ldr	r3, [pc, #80]	@ (80081a8 <DFU_GetStatus+0x168>)
 8008156:	7d1b      	ldrb	r3, [r3, #20]
 8008158:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800815c:	2b00      	cmp	r3, #0
 800815e:	d015      	beq.n	800818c <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800818c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8008194:	2206      	movs	r2, #6
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fa2a 	bl	80095f2 <USBD_CtlSendData>
 800819e:	e000      	b.n	80081a2 <DFU_GetStatus+0x162>
    return;
 80081a0:	bf00      	nop
}
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	20000048 	.word	0x20000048

080081ac <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081ba:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d042      	beq.n	8008248 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80081c8:	2b0a      	cmp	r3, #10
 80081ca:	d11e      	bne.n	800820a <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008208:	e01f      	b.n	800824a <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	220a      	movs	r2, #10
 800820e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	220e      	movs	r2, #14
 8008216:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008246:	e000      	b.n	800824a <DFU_ClearStatus+0x9e>
    return;
 8008248:	bf00      	nop
  }
}
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008262:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d008      	beq.n	800827c <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8008270:	2201      	movs	r2, #1
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f9bc 	bl	80095f2 <USBD_CtlSendData>
 800827a:	e000      	b.n	800827e <DFU_GetState+0x2a>
    return;
 800827c:	bf00      	nop
}
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008292:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d03f      	beq.n	800831a <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d013      	beq.n	80082cc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d00e      	beq.n	80082cc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80082b4:	2b05      	cmp	r3, #5
 80082b6:	d009      	beq.n	80082cc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80082be:	2b06      	cmp	r3, #6
 80082c0:	d004      	beq.n	80082cc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80082c8:	2b09      	cmp	r3, #9
 80082ca:	d127      	bne.n	800831c <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8008318:	e000      	b.n	800831c <DFU_Abort+0x98>
    return;
 800831a:	bf00      	nop
  }
}
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
	...

08008328 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008336:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d03b      	beq.n	80083b6 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8008346:	4b1e      	ldr	r3, [pc, #120]	@ (80083c0 <DFU_Leave+0x98>)
 8008348:	7d1b      	ldrb	r3, [r3, #20]
 800834a:	f003 0304 	and.w	r3, r3, #4
 800834e:	2b00      	cmp	r3, #0
 8008350:	d016      	beq.n	8008380 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2206      	movs	r2, #6
 8008356:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 800837e:	e01b      	b.n	80083b8 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2208      	movs	r2, #8
 8008384:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f86c 	bl	800848a <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80083b2:	f7ff f9b3 	bl	800771c <__NVIC_SystemReset>
    return;
 80083b6:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20000048 	.word	0x20000048

080083c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	e01f      	b.n	800841c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	79fa      	ldrb	r2, [r7, #7]
 800840e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f001 fc53 	bl	8009cbc <USBD_LL_Init>
 8008416:	4603      	mov	r3, r0
 8008418:	75fb      	strb	r3, [r7, #23]

  return ret;
 800841a:	7dfb      	ldrb	r3, [r7, #23]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008438:	2303      	movs	r3, #3
 800843a:	e016      	b.n	800846a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800844a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008458:	f107 020e 	add.w	r2, r7, #14
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	4602      	mov	r2, r0
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fc6e 	bl	8009d5c <USBD_LL_Start>
 8008480:	4603      	mov	r3, r0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 fc7d 	bl	8009d92 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d009      	beq.n	80084b6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6852      	ldr	r2, [r2, #4]
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	4611      	mov	r1, r2
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4798      	blx	r3
  }

  return USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084e2:	2303      	movs	r3, #3
 80084e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d009      	beq.n	8008504 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	78fa      	ldrb	r2, [r7, #3]
 80084fa:	4611      	mov	r1, r2
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	4798      	blx	r3
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d007      	beq.n	8008534 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	4611      	mov	r1, r2
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
  }

  return USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f000 ffa3 	bl	800949c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008564:	461a      	mov	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008572:	f003 031f 	and.w	r3, r3, #31
 8008576:	2b02      	cmp	r3, #2
 8008578:	d01a      	beq.n	80085b0 <USBD_LL_SetupStage+0x72>
 800857a:	2b02      	cmp	r3, #2
 800857c:	d822      	bhi.n	80085c4 <USBD_LL_SetupStage+0x86>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <USBD_LL_SetupStage+0x4a>
 8008582:	2b01      	cmp	r3, #1
 8008584:	d00a      	beq.n	800859c <USBD_LL_SetupStage+0x5e>
 8008586:	e01d      	b.n	80085c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fa63 	bl	8008a5c <USBD_StdDevReq>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]
      break;
 800859a:	e020      	b.n	80085de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fac7 	bl	8008b38 <USBD_StdItfReq>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73fb      	strb	r3, [r7, #15]
      break;
 80085ae:	e016      	b.n	80085de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fb06 	bl	8008bca <USBD_StdEPReq>
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
      break;
 80085c2:	e00c      	b.n	80085de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80085ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 fc1e 	bl	8009e14 <USBD_LL_StallEP>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
      break;
 80085dc:	bf00      	nop
  }

  return ret;
 80085de:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	460b      	mov	r3, r1
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085f6:	7afb      	ldrb	r3, [r7, #11]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d138      	bne.n	800866e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800860a:	2b03      	cmp	r3, #3
 800860c:	d14a      	bne.n	80086a4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	429a      	cmp	r2, r3
 8008618:	d913      	bls.n	8008642 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	1ad2      	subs	r2, r2, r3
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	4293      	cmp	r3, r2
 8008632:	bf28      	it	cs
 8008634:	4613      	movcs	r3, r2
 8008636:	461a      	mov	r2, r3
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f001 f822 	bl	8009684 <USBD_CtlContinueRx>
 8008640:	e030      	b.n	80086a4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d10b      	bne.n	8008666 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f001 f81d 	bl	80096a6 <USBD_CtlSendStatus>
 800866c:	e01a      	b.n	80086a4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b03      	cmp	r3, #3
 8008678:	d114      	bne.n	80086a4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00e      	beq.n	80086a4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	7afa      	ldrb	r2, [r7, #11]
 8008690:	4611      	mov	r1, r2
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	e000      	b.n	80086a6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b086      	sub	sp, #24
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	460b      	mov	r3, r1
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d16b      	bne.n	800879a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3314      	adds	r3, #20
 80086c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d156      	bne.n	8008780 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d914      	bls.n	8008708 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	461a      	mov	r2, r3
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 ff97 	bl	8009628 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086fa:	2300      	movs	r3, #0
 80086fc:	2200      	movs	r2, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f001 fc31 	bl	8009f68 <USBD_LL_PrepareReceive>
 8008706:	e03b      	b.n	8008780 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	429a      	cmp	r2, r3
 8008712:	d11c      	bne.n	800874e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800871c:	429a      	cmp	r2, r3
 800871e:	d316      	bcc.n	800874e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800872a:	429a      	cmp	r2, r3
 800872c:	d20f      	bcs.n	800874e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800872e:	2200      	movs	r2, #0
 8008730:	2100      	movs	r1, #0
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 ff78 	bl	8009628 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008740:	2300      	movs	r3, #0
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 fc0e 	bl	8009f68 <USBD_LL_PrepareReceive>
 800874c:	e018      	b.n	8008780 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d10b      	bne.n	8008772 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d005      	beq.n	8008772 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008772:	2180      	movs	r1, #128	@ 0x80
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f001 fb4d 	bl	8009e14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 ffa6 	bl	80096cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008786:	2b01      	cmp	r3, #1
 8008788:	d122      	bne.n	80087d0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f7ff fe98 	bl	80084c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008798:	e01a      	b.n	80087d0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d114      	bne.n	80087d0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00e      	beq.n	80087d0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	7afa      	ldrb	r2, [r7, #11]
 80087bc:	4611      	mov	r1, r2
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	4798      	blx	r3
 80087c2:	4603      	mov	r3, r0
 80087c4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d001      	beq.n	80087d0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
 80087ce:	e000      	b.n	80087d2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800880a:	2303      	movs	r3, #3
 800880c:	e02f      	b.n	800886e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00f      	beq.n	8008838 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	6852      	ldr	r2, [r2, #4]
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	4611      	mov	r1, r2
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008838:	2340      	movs	r3, #64	@ 0x40
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f001 fac2 	bl	8009dc8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2240      	movs	r2, #64	@ 0x40
 8008850:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008854:	2340      	movs	r3, #64	@ 0x40
 8008856:	2200      	movs	r2, #0
 8008858:	2180      	movs	r1, #128	@ 0x80
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fab4 	bl	8009dc8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2240      	movs	r2, #64	@ 0x40
 800886a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	78fa      	ldrb	r2, [r7, #3]
 8008886:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2204      	movs	r2, #4
 80088b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d106      	bne.n	80088e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008904:	2303      	movs	r3, #3
 8008906:	e012      	b.n	800892e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b03      	cmp	r3, #3
 8008912:	d10b      	bne.n	800892c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800894c:	2303      	movs	r3, #3
 800894e:	e014      	b.n	800897a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b03      	cmp	r3, #3
 800895a:	d10d      	bne.n	8008978 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d007      	beq.n	8008978 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800896e:	6a1b      	ldr	r3, [r3, #32]
 8008970:	78fa      	ldrb	r2, [r7, #3]
 8008972:	4611      	mov	r1, r2
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	e014      	b.n	80089c6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d10d      	bne.n	80089c4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d007      	beq.n	80089c4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	4611      	mov	r1, r2
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6852      	ldr	r2, [r2, #4]
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	4798      	blx	r3
  }

  return USBD_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	3301      	adds	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	b21a      	sxth	r2, r3
 8008a42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b21b      	sxth	r3, r3
 8008a4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a4c:	89fb      	ldrh	r3, [r7, #14]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a72:	2b40      	cmp	r3, #64	@ 0x40
 8008a74:	d005      	beq.n	8008a82 <USBD_StdDevReq+0x26>
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	d853      	bhi.n	8008b22 <USBD_StdDevReq+0xc6>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <USBD_StdDevReq+0x3a>
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d14f      	bne.n	8008b22 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
 8008a90:	4603      	mov	r3, r0
 8008a92:	73fb      	strb	r3, [r7, #15]
      break;
 8008a94:	e04a      	b.n	8008b2c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b09      	cmp	r3, #9
 8008a9c:	d83b      	bhi.n	8008b16 <USBD_StdDevReq+0xba>
 8008a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa4 <USBD_StdDevReq+0x48>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008af9 	.word	0x08008af9
 8008aa8:	08008b0d 	.word	0x08008b0d
 8008aac:	08008b17 	.word	0x08008b17
 8008ab0:	08008b03 	.word	0x08008b03
 8008ab4:	08008b17 	.word	0x08008b17
 8008ab8:	08008ad7 	.word	0x08008ad7
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008b17 	.word	0x08008b17
 8008ac4:	08008aef 	.word	0x08008aef
 8008ac8:	08008ae1 	.word	0x08008ae1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9de 	bl	8008e90 <USBD_GetDescriptor>
          break;
 8008ad4:	e024      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fb55 	bl	8009188 <USBD_SetAddress>
          break;
 8008ade:	e01f      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fb94 	bl	8009210 <USBD_SetConfig>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]
          break;
 8008aec:	e018      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fc33 	bl	800935c <USBD_GetConfig>
          break;
 8008af6:	e013      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fc64 	bl	80093c8 <USBD_GetStatus>
          break;
 8008b00:	e00e      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fc93 	bl	8009430 <USBD_SetFeature>
          break;
 8008b0a:	e009      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fca2 	bl	8009458 <USBD_ClrFeature>
          break;
 8008b14:	e004      	b.n	8008b20 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fcf9 	bl	8009510 <USBD_CtlError>
          break;
 8008b1e:	bf00      	nop
      }
      break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fcf3 	bl	8009510 <USBD_CtlError>
      break;
 8008b2a:	bf00      	nop
  }

  return ret;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b4e:	2b40      	cmp	r3, #64	@ 0x40
 8008b50:	d005      	beq.n	8008b5e <USBD_StdItfReq+0x26>
 8008b52:	2b40      	cmp	r3, #64	@ 0x40
 8008b54:	d82f      	bhi.n	8008bb6 <USBD_StdItfReq+0x7e>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <USBD_StdItfReq+0x26>
 8008b5a:	2b20      	cmp	r3, #32
 8008b5c:	d12b      	bne.n	8008bb6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d81d      	bhi.n	8008ba8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	889b      	ldrh	r3, [r3, #4]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d813      	bhi.n	8008b9e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	88db      	ldrh	r3, [r3, #6]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d110      	bne.n	8008bb2 <USBD_StdItfReq+0x7a>
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10d      	bne.n	8008bb2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fd85 	bl	80096a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b9c:	e009      	b.n	8008bb2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fcb5 	bl	8009510 <USBD_CtlError>
          break;
 8008ba6:	e004      	b.n	8008bb2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fcb0 	bl	8009510 <USBD_CtlError>
          break;
 8008bb0:	e000      	b.n	8008bb4 <USBD_StdItfReq+0x7c>
          break;
 8008bb2:	bf00      	nop
      }
      break;
 8008bb4:	e004      	b.n	8008bc0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fca9 	bl	8009510 <USBD_CtlError>
      break;
 8008bbe:	bf00      	nop
  }

  return ret;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	889b      	ldrh	r3, [r3, #4]
 8008bdc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008be6:	2b40      	cmp	r3, #64	@ 0x40
 8008be8:	d007      	beq.n	8008bfa <USBD_StdEPReq+0x30>
 8008bea:	2b40      	cmp	r3, #64	@ 0x40
 8008bec:	f200 8145 	bhi.w	8008e7a <USBD_StdEPReq+0x2b0>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00c      	beq.n	8008c0e <USBD_StdEPReq+0x44>
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	f040 8140 	bne.w	8008e7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	4798      	blx	r3
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c0c:	e13a      	b.n	8008e84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d007      	beq.n	8008c26 <USBD_StdEPReq+0x5c>
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	f300 8129 	bgt.w	8008e6e <USBD_StdEPReq+0x2a4>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d07f      	beq.n	8008d20 <USBD_StdEPReq+0x156>
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d03c      	beq.n	8008c9e <USBD_StdEPReq+0xd4>
 8008c24:	e123      	b.n	8008e6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d002      	beq.n	8008c38 <USBD_StdEPReq+0x6e>
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d016      	beq.n	8008c64 <USBD_StdEPReq+0x9a>
 8008c36:	e02c      	b.n	8008c92 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00d      	beq.n	8008c5a <USBD_StdEPReq+0x90>
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	2b80      	cmp	r3, #128	@ 0x80
 8008c42:	d00a      	beq.n	8008c5a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 f8e3 	bl	8009e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c4e:	2180      	movs	r1, #128	@ 0x80
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 f8df 	bl	8009e14 <USBD_LL_StallEP>
 8008c56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c58:	e020      	b.n	8008c9c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fc57 	bl	8009510 <USBD_CtlError>
              break;
 8008c62:	e01b      	b.n	8008c9c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	885b      	ldrh	r3, [r3, #2]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10e      	bne.n	8008c8a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00b      	beq.n	8008c8a <USBD_StdEPReq+0xc0>
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	2b80      	cmp	r3, #128	@ 0x80
 8008c76:	d008      	beq.n	8008c8a <USBD_StdEPReq+0xc0>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	88db      	ldrh	r3, [r3, #6]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d104      	bne.n	8008c8a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 f8c5 	bl	8009e14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fd0b 	bl	80096a6 <USBD_CtlSendStatus>

              break;
 8008c90:	e004      	b.n	8008c9c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fc3b 	bl	8009510 <USBD_CtlError>
              break;
 8008c9a:	bf00      	nop
          }
          break;
 8008c9c:	e0ec      	b.n	8008e78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d002      	beq.n	8008cb0 <USBD_StdEPReq+0xe6>
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d016      	beq.n	8008cdc <USBD_StdEPReq+0x112>
 8008cae:	e030      	b.n	8008d12 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00d      	beq.n	8008cd2 <USBD_StdEPReq+0x108>
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	2b80      	cmp	r3, #128	@ 0x80
 8008cba:	d00a      	beq.n	8008cd2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f001 f8a7 	bl	8009e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cc6:	2180      	movs	r1, #128	@ 0x80
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f8a3 	bl	8009e14 <USBD_LL_StallEP>
 8008cce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cd0:	e025      	b.n	8008d1e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fc1b 	bl	8009510 <USBD_CtlError>
              break;
 8008cda:	e020      	b.n	8008d1e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	885b      	ldrh	r3, [r3, #2]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d11b      	bne.n	8008d1c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 f8ad 	bl	8009e52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fcd4 	bl	80096a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	4798      	blx	r3
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d10:	e004      	b.n	8008d1c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fbfb 	bl	8009510 <USBD_CtlError>
              break;
 8008d1a:	e000      	b.n	8008d1e <USBD_StdEPReq+0x154>
              break;
 8008d1c:	bf00      	nop
          }
          break;
 8008d1e:	e0ab      	b.n	8008e78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d002      	beq.n	8008d32 <USBD_StdEPReq+0x168>
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d032      	beq.n	8008d96 <USBD_StdEPReq+0x1cc>
 8008d30:	e097      	b.n	8008e62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <USBD_StdEPReq+0x17e>
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b80      	cmp	r3, #128	@ 0x80
 8008d3c:	d004      	beq.n	8008d48 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fbe5 	bl	8009510 <USBD_CtlError>
                break;
 8008d46:	e091      	b.n	8008e6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	da0b      	bge.n	8008d68 <USBD_StdEPReq+0x19e>
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	3310      	adds	r3, #16
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	3304      	adds	r3, #4
 8008d66:	e00b      	b.n	8008d80 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	3304      	adds	r3, #4
 8008d80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2200      	movs	r2, #0
 8008d86:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fc2f 	bl	80095f2 <USBD_CtlSendData>
              break;
 8008d94:	e06a      	b.n	8008e6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	da11      	bge.n	8008dc2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	f003 020f 	and.w	r2, r3, #15
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	440b      	add	r3, r1
 8008db0:	3324      	adds	r3, #36	@ 0x24
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d117      	bne.n	8008de8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fba8 	bl	8009510 <USBD_CtlError>
                  break;
 8008dc0:	e054      	b.n	8008e6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	f003 020f 	and.w	r2, r3, #15
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	440b      	add	r3, r1
 8008dd4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d104      	bne.n	8008de8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fb95 	bl	8009510 <USBD_CtlError>
                  break;
 8008de6:	e041      	b.n	8008e6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	da0b      	bge.n	8008e08 <USBD_StdEPReq+0x23e>
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	3310      	adds	r3, #16
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	3304      	adds	r3, #4
 8008e06:	e00b      	b.n	8008e20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3304      	adds	r3, #4
 8008e20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <USBD_StdEPReq+0x264>
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	2b80      	cmp	r3, #128	@ 0x80
 8008e2c:	d103      	bne.n	8008e36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e00e      	b.n	8008e54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f001 f828 	bl	8009e90 <USBD_LL_IsStallEP>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e002      	b.n	8008e54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2202      	movs	r2, #2
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fbc9 	bl	80095f2 <USBD_CtlSendData>
              break;
 8008e60:	e004      	b.n	8008e6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb53 	bl	8009510 <USBD_CtlError>
              break;
 8008e6a:	bf00      	nop
          }
          break;
 8008e6c:	e004      	b.n	8008e78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fb4d 	bl	8009510 <USBD_CtlError>
          break;
 8008e76:	bf00      	nop
      }
      break;
 8008e78:	e004      	b.n	8008e84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fb47 	bl	8009510 <USBD_CtlError>
      break;
 8008e82:	bf00      	nop
  }

  return ret;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	885b      	ldrh	r3, [r3, #2]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	2b06      	cmp	r3, #6
 8008eb2:	f200 813b 	bhi.w	800912c <USBD_GetDescriptor+0x29c>
 8008eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <USBD_GetDescriptor+0x2c>)
 8008eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebc:	08008ed9 	.word	0x08008ed9
 8008ec0:	08008ef1 	.word	0x08008ef1
 8008ec4:	08008f31 	.word	0x08008f31
 8008ec8:	0800912d 	.word	0x0800912d
 8008ecc:	0800912d 	.word	0x0800912d
 8008ed0:	080090cd 	.word	0x080090cd
 8008ed4:	080090f9 	.word	0x080090f9
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	7c12      	ldrb	r2, [r2, #16]
 8008ee4:	f107 0108 	add.w	r1, r7, #8
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4798      	blx	r3
 8008eec:	60f8      	str	r0, [r7, #12]
      break;
 8008eee:	e125      	b.n	800913c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	7c1b      	ldrb	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10d      	bne.n	8008f14 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	f107 0208 	add.w	r2, r7, #8
 8008f04:	4610      	mov	r0, r2
 8008f06:	4798      	blx	r3
 8008f08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	2202      	movs	r2, #2
 8008f10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f12:	e113      	b.n	800913c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1c:	f107 0208 	add.w	r2, r7, #8
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
 8008f24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	701a      	strb	r2, [r3, #0]
      break;
 8008f2e:	e105      	b.n	800913c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	885b      	ldrh	r3, [r3, #2]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b05      	cmp	r3, #5
 8008f38:	f200 80ac 	bhi.w	8009094 <USBD_GetDescriptor+0x204>
 8008f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f44 <USBD_GetDescriptor+0xb4>)
 8008f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f42:	bf00      	nop
 8008f44:	08008f5d 	.word	0x08008f5d
 8008f48:	08008f91 	.word	0x08008f91
 8008f4c:	08008fc5 	.word	0x08008fc5
 8008f50:	08008ff9 	.word	0x08008ff9
 8008f54:	0800902d 	.word	0x0800902d
 8008f58:	08009061 	.word	0x08009061
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	7c12      	ldrb	r2, [r2, #16]
 8008f74:	f107 0108 	add.w	r1, r7, #8
 8008f78:	4610      	mov	r0, r2
 8008f7a:	4798      	blx	r3
 8008f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7e:	e0a4      	b.n	80090ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fac4 	bl	8009510 <USBD_CtlError>
            err++;
 8008f88:	7afb      	ldrb	r3, [r7, #11]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8e:	e09c      	b.n	80090ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	7c12      	ldrb	r2, [r2, #16]
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb2:	e08a      	b.n	80090ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 faaa 	bl	8009510 <USBD_CtlError>
            err++;
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc2:	e082      	b.n	80090ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe6:	e070      	b.n	80090ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fa90 	bl	8009510 <USBD_CtlError>
            err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff6:	e068      	b.n	80090ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e056      	b.n	80090ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa76 	bl	8009510 <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e04e      	b.n	80090ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904e:	e03c      	b.n	80090ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa5c 	bl	8009510 <USBD_CtlError>
            err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
          break;
 800905e:	e034      	b.n	80090ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	7c12      	ldrb	r2, [r2, #16]
 8009078:	f107 0108 	add.w	r1, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009082:	e022      	b.n	80090ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa42 	bl	8009510 <USBD_CtlError>
            err++;
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	3301      	adds	r3, #1
 8009090:	72fb      	strb	r3, [r7, #11]
          break;
 8009092:	e01a      	b.n	80090ca <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800909a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00c      	beq.n	80090ba <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	8852      	ldrh	r2, [r2, #2]
 80090ac:	b2d1      	uxtb	r1, r2
 80090ae:	f107 0208 	add.w	r2, r7, #8
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	4798      	blx	r3
 80090b6:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80090b8:	e006      	b.n	80090c8 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa27 	bl	8009510 <USBD_CtlError>
            err++;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	3301      	adds	r3, #1
 80090c6:	72fb      	strb	r3, [r7, #11]
          break;
 80090c8:	bf00      	nop
      }
      break;
 80090ca:	e037      	b.n	800913c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	7c1b      	ldrb	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090dc:	f107 0208 	add.w	r2, r7, #8
 80090e0:	4610      	mov	r0, r2
 80090e2:	4798      	blx	r3
 80090e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090e6:	e029      	b.n	800913c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa10 	bl	8009510 <USBD_CtlError>
        err++;
 80090f0:	7afb      	ldrb	r3, [r7, #11]
 80090f2:	3301      	adds	r3, #1
 80090f4:	72fb      	strb	r3, [r7, #11]
      break;
 80090f6:	e021      	b.n	800913c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	7c1b      	ldrb	r3, [r3, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10d      	bne.n	800911c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009108:	f107 0208 	add.w	r2, r7, #8
 800910c:	4610      	mov	r0, r2
 800910e:	4798      	blx	r3
 8009110:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	2207      	movs	r2, #7
 8009118:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800911a:	e00f      	b.n	800913c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f9f6 	bl	8009510 <USBD_CtlError>
        err++;
 8009124:	7afb      	ldrb	r3, [r7, #11]
 8009126:	3301      	adds	r3, #1
 8009128:	72fb      	strb	r3, [r7, #11]
      break;
 800912a:	e007      	b.n	800913c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f9ee 	bl	8009510 <USBD_CtlError>
      err++;
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	3301      	adds	r3, #1
 8009138:	72fb      	strb	r3, [r7, #11]
      break;
 800913a:	bf00      	nop
  }

  if (err != 0U)
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d11e      	bne.n	8009180 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	88db      	ldrh	r3, [r3, #6]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d016      	beq.n	8009178 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800914a:	893b      	ldrh	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00e      	beq.n	800916e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	88da      	ldrh	r2, [r3, #6]
 8009154:	893b      	ldrh	r3, [r7, #8]
 8009156:	4293      	cmp	r3, r2
 8009158:	bf28      	it	cs
 800915a:	4613      	movcs	r3, r2
 800915c:	b29b      	uxth	r3, r3
 800915e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009160:	893b      	ldrh	r3, [r7, #8]
 8009162:	461a      	mov	r2, r3
 8009164:	68f9      	ldr	r1, [r7, #12]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fa43 	bl	80095f2 <USBD_CtlSendData>
 800916c:	e009      	b.n	8009182 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f9cd 	bl	8009510 <USBD_CtlError>
 8009176:	e004      	b.n	8009182 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa94 	bl	80096a6 <USBD_CtlSendStatus>
 800917e:	e000      	b.n	8009182 <USBD_GetDescriptor+0x2f2>
    return;
 8009180:	bf00      	nop
  }
}
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	889b      	ldrh	r3, [r3, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d131      	bne.n	80091fe <USBD_SetAddress+0x76>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	88db      	ldrh	r3, [r3, #6]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d12d      	bne.n	80091fe <USBD_SetAddress+0x76>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	885b      	ldrh	r3, [r3, #2]
 80091a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80091a8:	d829      	bhi.n	80091fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	885b      	ldrh	r3, [r3, #2]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d104      	bne.n	80091cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f9a3 	bl	8009510 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ca:	e01d      	b.n	8009208 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	7bfa      	ldrb	r2, [r7, #15]
 80091d0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	4619      	mov	r1, r3
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fe85 	bl	8009ee8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa61 	bl	80096a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d004      	beq.n	80091f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2202      	movs	r2, #2
 80091ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f2:	e009      	b.n	8009208 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fc:	e004      	b.n	8009208 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091fe:	6839      	ldr	r1, [r7, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 f985 	bl	8009510 <USBD_CtlError>
  }
}
 8009206:	bf00      	nop
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	885b      	ldrh	r3, [r3, #2]
 8009222:	b2da      	uxtb	r2, r3
 8009224:	4b4c      	ldr	r3, [pc, #304]	@ (8009358 <USBD_SetConfig+0x148>)
 8009226:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009228:	4b4b      	ldr	r3, [pc, #300]	@ (8009358 <USBD_SetConfig+0x148>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d905      	bls.n	800923c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f96c 	bl	8009510 <USBD_CtlError>
    return USBD_FAIL;
 8009238:	2303      	movs	r3, #3
 800923a:	e088      	b.n	800934e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b02      	cmp	r3, #2
 8009246:	d002      	beq.n	800924e <USBD_SetConfig+0x3e>
 8009248:	2b03      	cmp	r3, #3
 800924a:	d025      	beq.n	8009298 <USBD_SetConfig+0x88>
 800924c:	e071      	b.n	8009332 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800924e:	4b42      	ldr	r3, [pc, #264]	@ (8009358 <USBD_SetConfig+0x148>)
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d01c      	beq.n	8009290 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009256:	4b40      	ldr	r3, [pc, #256]	@ (8009358 <USBD_SetConfig+0x148>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009260:	4b3d      	ldr	r3, [pc, #244]	@ (8009358 <USBD_SetConfig+0x148>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff f935 	bl	80084d6 <USBD_SetClassConfig>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d004      	beq.n	8009280 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f949 	bl	8009510 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800927e:	e065      	b.n	800934c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fa10 	bl	80096a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2203      	movs	r2, #3
 800928a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800928e:	e05d      	b.n	800934c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fa08 	bl	80096a6 <USBD_CtlSendStatus>
      break;
 8009296:	e059      	b.n	800934c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009298:	4b2f      	ldr	r3, [pc, #188]	@ (8009358 <USBD_SetConfig+0x148>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d112      	bne.n	80092c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80092a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009358 <USBD_SetConfig+0x148>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092b2:	4b29      	ldr	r3, [pc, #164]	@ (8009358 <USBD_SetConfig+0x148>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff f928 	bl	800850e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f9f1 	bl	80096a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092c4:	e042      	b.n	800934c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80092c6:	4b24      	ldr	r3, [pc, #144]	@ (8009358 <USBD_SetConfig+0x148>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d02a      	beq.n	800932a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff f916 	bl	800850e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009358 <USBD_SetConfig+0x148>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009358 <USBD_SetConfig+0x148>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	4619      	mov	r1, r3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff f8ef 	bl	80084d6 <USBD_SetClassConfig>
 80092f8:	4603      	mov	r3, r0
 80092fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00f      	beq.n	8009322 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f903 	bl	8009510 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff f8fb 	bl	800850e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009320:	e014      	b.n	800934c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f9bf 	bl	80096a6 <USBD_CtlSendStatus>
      break;
 8009328:	e010      	b.n	800934c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f9bb 	bl	80096a6 <USBD_CtlSendStatus>
      break;
 8009330:	e00c      	b.n	800934c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f8eb 	bl	8009510 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800933a:	4b07      	ldr	r3, [pc, #28]	@ (8009358 <USBD_SetConfig+0x148>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff f8e4 	bl	800850e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009346:	2303      	movs	r3, #3
 8009348:	73fb      	strb	r3, [r7, #15]
      break;
 800934a:	bf00      	nop
  }

  return ret;
 800934c:	7bfb      	ldrb	r3, [r7, #15]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000413 	.word	0x20000413

0800935c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	88db      	ldrh	r3, [r3, #6]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d004      	beq.n	8009378 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f8cd 	bl	8009510 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009376:	e023      	b.n	80093c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	dc02      	bgt.n	800938a <USBD_GetConfig+0x2e>
 8009384:	2b00      	cmp	r3, #0
 8009386:	dc03      	bgt.n	8009390 <USBD_GetConfig+0x34>
 8009388:	e015      	b.n	80093b6 <USBD_GetConfig+0x5a>
 800938a:	2b03      	cmp	r3, #3
 800938c:	d00b      	beq.n	80093a6 <USBD_GetConfig+0x4a>
 800938e:	e012      	b.n	80093b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3308      	adds	r3, #8
 800939a:	2201      	movs	r2, #1
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f927 	bl	80095f2 <USBD_CtlSendData>
        break;
 80093a4:	e00c      	b.n	80093c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	3304      	adds	r3, #4
 80093aa:	2201      	movs	r2, #1
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f91f 	bl	80095f2 <USBD_CtlSendData>
        break;
 80093b4:	e004      	b.n	80093c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f8a9 	bl	8009510 <USBD_CtlError>
        break;
 80093be:	bf00      	nop
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	3b01      	subs	r3, #1
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d81e      	bhi.n	800941e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	88db      	ldrh	r3, [r3, #6]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d004      	beq.n	80093f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f890 	bl	8009510 <USBD_CtlError>
        break;
 80093f0:	e01a      	b.n	8009428 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d005      	beq.n	800940e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f043 0202 	orr.w	r2, r3, #2
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	330c      	adds	r3, #12
 8009412:	2202      	movs	r2, #2
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f8eb 	bl	80095f2 <USBD_CtlSendData>
      break;
 800941c:	e004      	b.n	8009428 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f875 	bl	8009510 <USBD_CtlError>
      break;
 8009426:	bf00      	nop
  }
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	885b      	ldrh	r3, [r3, #2]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d106      	bne.n	8009450 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f92b 	bl	80096a6 <USBD_CtlSendStatus>
  }
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009468:	b2db      	uxtb	r3, r3
 800946a:	3b01      	subs	r3, #1
 800946c:	2b02      	cmp	r3, #2
 800946e:	d80b      	bhi.n	8009488 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	885b      	ldrh	r3, [r3, #2]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d10c      	bne.n	8009492 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f910 	bl	80096a6 <USBD_CtlSendStatus>
      }
      break;
 8009486:	e004      	b.n	8009492 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f840 	bl	8009510 <USBD_CtlError>
      break;
 8009490:	e000      	b.n	8009494 <USBD_ClrFeature+0x3c>
      break;
 8009492:	bf00      	nop
  }
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	781a      	ldrb	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3301      	adds	r3, #1
 80094c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff faa8 	bl	8008a1c <SWAPBYTE>
 80094cc:	4603      	mov	r3, r0
 80094ce:	461a      	mov	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3301      	adds	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3301      	adds	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7ff fa9b 	bl	8008a1c <SWAPBYTE>
 80094e6:	4603      	mov	r3, r0
 80094e8:	461a      	mov	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3301      	adds	r3, #1
 80094f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	3301      	adds	r3, #1
 80094f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff fa8e 	bl	8008a1c <SWAPBYTE>
 8009500:	4603      	mov	r3, r0
 8009502:	461a      	mov	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	80da      	strh	r2, [r3, #6]
}
 8009508:	bf00      	nop
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800951a:	2180      	movs	r1, #128	@ 0x80
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fc79 	bl	8009e14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009522:	2100      	movs	r1, #0
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fc75 	bl	8009e14 <USBD_LL_StallEP>
}
 800952a:	bf00      	nop
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b086      	sub	sp, #24
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d036      	beq.n	80095b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800954c:	6938      	ldr	r0, [r7, #16]
 800954e:	f000 f836 	bl	80095be <USBD_GetLen>
 8009552:	4603      	mov	r3, r0
 8009554:	3301      	adds	r3, #1
 8009556:	b29b      	uxth	r3, r3
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	b29a      	uxth	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	4413      	add	r3, r2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	701a      	strb	r2, [r3, #0]
  idx++;
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	3301      	adds	r3, #1
 8009570:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	4413      	add	r3, r2
 8009578:	2203      	movs	r2, #3
 800957a:	701a      	strb	r2, [r3, #0]
  idx++;
 800957c:	7dfb      	ldrb	r3, [r7, #23]
 800957e:	3301      	adds	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009582:	e013      	b.n	80095ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	4413      	add	r3, r2
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	3301      	adds	r3, #1
 8009594:	613b      	str	r3, [r7, #16]
    idx++;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	3301      	adds	r3, #1
 800959a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	4413      	add	r3, r2
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
 80095a8:	3301      	adds	r3, #1
 80095aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e7      	bne.n	8009584 <USBD_GetString+0x52>
 80095b4:	e000      	b.n	80095b8 <USBD_GetString+0x86>
    return;
 80095b6:	bf00      	nop
  }
}
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095be:	b480      	push	{r7}
 80095c0:	b085      	sub	sp, #20
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095ce:	e005      	b.n	80095dc <USBD_GetLen+0x1e>
  {
    len++;
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	3301      	adds	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	3301      	adds	r3, #1
 80095da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1f5      	bne.n	80095d0 <USBD_GetLen+0x12>
  }

  return len;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr

080095f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2202      	movs	r2, #2
 8009602:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	2100      	movs	r1, #0
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 fc84 	bl	8009f26 <USBD_LL_Transmit>

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fc73 	bl	8009f26 <USBD_LL_Transmit>

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2203      	movs	r2, #3
 800965a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	2100      	movs	r1, #0
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 fc77 	bl	8009f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	2100      	movs	r1, #0
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fc66 	bl	8009f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2204      	movs	r2, #4
 80096b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096b6:	2300      	movs	r3, #0
 80096b8:	2200      	movs	r2, #0
 80096ba:	2100      	movs	r1, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fc32 	bl	8009f26 <USBD_LL_Transmit>

  return USBD_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2205      	movs	r2, #5
 80096d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096dc:	2300      	movs	r3, #0
 80096de:	2200      	movs	r2, #0
 80096e0:	2100      	movs	r1, #0
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc40 	bl	8009f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096f8:	2200      	movs	r2, #0
 80096fa:	4912      	ldr	r1, [pc, #72]	@ (8009744 <MX_USB_DEVICE_Init+0x50>)
 80096fc:	4812      	ldr	r0, [pc, #72]	@ (8009748 <MX_USB_DEVICE_Init+0x54>)
 80096fe:	f7fe fe61 	bl	80083c4 <USBD_Init>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009708:	f7f7 fb1c 	bl	8000d44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800970c:	490f      	ldr	r1, [pc, #60]	@ (800974c <MX_USB_DEVICE_Init+0x58>)
 800970e:	480e      	ldr	r0, [pc, #56]	@ (8009748 <MX_USB_DEVICE_Init+0x54>)
 8009710:	f7fe fe88 	bl	8008424 <USBD_RegisterClass>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800971a:	f7f7 fb13 	bl	8000d44 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800971e:	490c      	ldr	r1, [pc, #48]	@ (8009750 <MX_USB_DEVICE_Init+0x5c>)
 8009720:	4809      	ldr	r0, [pc, #36]	@ (8009748 <MX_USB_DEVICE_Init+0x54>)
 8009722:	f7fe facd 	bl	8007cc0 <USBD_DFU_RegisterMedia>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800972c:	f7f7 fb0a 	bl	8000d44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009730:	4805      	ldr	r0, [pc, #20]	@ (8009748 <MX_USB_DEVICE_Init+0x54>)
 8009732:	f7fe fe9e 	bl	8008472 <USBD_Start>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800973c:	f7f7 fb02 	bl	8000d44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009740:	bf00      	nop
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000070 	.word	0x20000070
 8009748:	20000414 	.word	0x20000414
 800974c:	2000000c 	.word	0x2000000c
 8009750:	200000c0 	.word	0x200000c0

08009754 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2212      	movs	r2, #18
 8009764:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009766:	4b03      	ldr	r3, [pc, #12]	@ (8009774 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	2000008c 	.word	0x2000008c

08009778 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2204      	movs	r2, #4
 8009788:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800978a:	4b03      	ldr	r3, [pc, #12]	@ (8009798 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	200000a0 	.word	0x200000a0

0800979c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d105      	bne.n	80097ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4907      	ldr	r1, [pc, #28]	@ (80097d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80097b2:	4808      	ldr	r0, [pc, #32]	@ (80097d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80097b4:	f7ff febd 	bl	8009532 <USBD_GetString>
 80097b8:	e004      	b.n	80097c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	4904      	ldr	r1, [pc, #16]	@ (80097d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80097be:	4805      	ldr	r0, [pc, #20]	@ (80097d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80097c0:	f7ff feb7 	bl	8009532 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097c4:	4b02      	ldr	r3, [pc, #8]	@ (80097d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	200006e4 	.word	0x200006e4
 80097d4:	0800b1bc 	.word	0x0800b1bc

080097d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	6039      	str	r1, [r7, #0]
 80097e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	4904      	ldr	r1, [pc, #16]	@ (80097f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097e8:	4804      	ldr	r0, [pc, #16]	@ (80097fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097ea:	f7ff fea2 	bl	8009532 <USBD_GetString>
  return USBD_StrDesc;
 80097ee:	4b02      	ldr	r3, [pc, #8]	@ (80097f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	200006e4 	.word	0x200006e4
 80097fc:	0800b1dc 	.word	0x0800b1dc

08009800 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	6039      	str	r1, [r7, #0]
 800980a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	221a      	movs	r2, #26
 8009810:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009812:	f000 f843 	bl	800989c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009816:	4b02      	ldr	r3, [pc, #8]	@ (8009820 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	200000a4 	.word	0x200000a4

08009824 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4907      	ldr	r1, [pc, #28]	@ (8009858 <USBD_FS_ConfigStrDescriptor+0x34>)
 800983a:	4808      	ldr	r0, [pc, #32]	@ (800985c <USBD_FS_ConfigStrDescriptor+0x38>)
 800983c:	f7ff fe79 	bl	8009532 <USBD_GetString>
 8009840:	e004      	b.n	800984c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4904      	ldr	r1, [pc, #16]	@ (8009858 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009846:	4805      	ldr	r0, [pc, #20]	@ (800985c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009848:	f7ff fe73 	bl	8009532 <USBD_GetString>
  }
  return USBD_StrDesc;
 800984c:	4b02      	ldr	r3, [pc, #8]	@ (8009858 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200006e4 	.word	0x200006e4
 800985c:	0800b1f0 	.word	0x0800b1f0

08009860 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	4907      	ldr	r1, [pc, #28]	@ (8009894 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009876:	4808      	ldr	r0, [pc, #32]	@ (8009898 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009878:	f7ff fe5b 	bl	8009532 <USBD_GetString>
 800987c:	e004      	b.n	8009888 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4904      	ldr	r1, [pc, #16]	@ (8009894 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009882:	4805      	ldr	r0, [pc, #20]	@ (8009898 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009884:	f7ff fe55 	bl	8009532 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009888:	4b02      	ldr	r3, [pc, #8]	@ (8009894 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	200006e4 	.word	0x200006e4
 8009898:	0800b1fc 	.word	0x0800b1fc

0800989c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098a2:	4b0f      	ldr	r3, [pc, #60]	@ (80098e0 <Get_SerialNum+0x44>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098a8:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <Get_SerialNum+0x48>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098ae:	4b0e      	ldr	r3, [pc, #56]	@ (80098e8 <Get_SerialNum+0x4c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d009      	beq.n	80098d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098c2:	2208      	movs	r2, #8
 80098c4:	4909      	ldr	r1, [pc, #36]	@ (80098ec <Get_SerialNum+0x50>)
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f000 f814 	bl	80098f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098cc:	2204      	movs	r2, #4
 80098ce:	4908      	ldr	r1, [pc, #32]	@ (80098f0 <Get_SerialNum+0x54>)
 80098d0:	68b8      	ldr	r0, [r7, #8]
 80098d2:	f000 f80f 	bl	80098f4 <IntToUnicode>
  }
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	1fff7a10 	.word	0x1fff7a10
 80098e4:	1fff7a14 	.word	0x1fff7a14
 80098e8:	1fff7a18 	.word	0x1fff7a18
 80098ec:	200000a6 	.word	0x200000a6
 80098f0:	200000b6 	.word	0x200000b6

080098f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009906:	2300      	movs	r3, #0
 8009908:	75fb      	strb	r3, [r7, #23]
 800990a:	e027      	b.n	800995c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	0f1b      	lsrs	r3, r3, #28
 8009910:	2b09      	cmp	r3, #9
 8009912:	d80b      	bhi.n	800992c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	0f1b      	lsrs	r3, r3, #28
 8009918:	b2da      	uxtb	r2, r3
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4619      	mov	r1, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	440b      	add	r3, r1
 8009924:	3230      	adds	r2, #48	@ 0x30
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e00a      	b.n	8009942 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	0f1b      	lsrs	r3, r3, #28
 8009930:	b2da      	uxtb	r2, r3
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	005b      	lsls	r3, r3, #1
 8009936:	4619      	mov	r1, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	440b      	add	r3, r1
 800993c:	3237      	adds	r2, #55	@ 0x37
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	011b      	lsls	r3, r3, #4
 8009946:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	005b      	lsls	r3, r3, #1
 800994c:	3301      	adds	r3, #1
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4413      	add	r3, r2
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	3301      	adds	r3, #1
 800995a:	75fb      	strb	r3, [r7, #23]
 800995c:	7dfa      	ldrb	r2, [r7, #23]
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	429a      	cmp	r2, r3
 8009962:	d3d3      	bcc.n	800990c <IntToUnicode+0x18>
  }
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8009972:	b480      	push	{r7}
 8009974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8009976:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8009978:	4618      	mov	r0, r3
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8009982:	b480      	push	{r7}
 8009984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8009986:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8009988:	4618      	mov	r0, r3
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800999a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80099b4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b085      	sub	sp, #20
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	60f8      	str	r0, [r7, #12]
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 80099ce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	460b      	mov	r3, r1
 80099e6:	607a      	str	r2, [r7, #4]
 80099e8:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 80099ee:	bf00      	nop
  }
  return (USBD_OK);
 80099f0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b0a0      	sub	sp, #128	@ 0x80
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	605a      	str	r2, [r3, #4]
 8009a12:	609a      	str	r2, [r3, #8]
 8009a14:	60da      	str	r2, [r3, #12]
 8009a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009a18:	f107 0314 	add.w	r3, r7, #20
 8009a1c:	2258      	movs	r2, #88	@ 0x58
 8009a1e:	2100      	movs	r1, #0
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fd11 	bl	800a448 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a2e:	d155      	bne.n	8009adc <HAL_PCD_MspInit+0xdc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009a30:	2320      	movs	r3, #32
 8009a32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009a34:	2300      	movs	r3, #0
 8009a36:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a38:	f107 0314 	add.w	r3, r7, #20
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7fb fb6b 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8009a48:	f7f7 f97c 	bl	8000d44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	613b      	str	r3, [r7, #16]
 8009a50:	4b24      	ldr	r3, [pc, #144]	@ (8009ae4 <HAL_PCD_MspInit+0xe4>)
 8009a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a54:	4a23      	ldr	r2, [pc, #140]	@ (8009ae4 <HAL_PCD_MspInit+0xe4>)
 8009a56:	f043 0301 	orr.w	r3, r3, #1
 8009a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a5c:	4b21      	ldr	r3, [pc, #132]	@ (8009ae4 <HAL_PCD_MspInit+0xe4>)
 8009a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009a68:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8009a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a6e:	2302      	movs	r3, #2
 8009a70:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a76:	2303      	movs	r3, #3
 8009a78:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a7a:	230a      	movs	r3, #10
 8009a7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a7e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a82:	4619      	mov	r1, r3
 8009a84:	4818      	ldr	r0, [pc, #96]	@ (8009ae8 <HAL_PCD_MspInit+0xe8>)
 8009a86:	f7f8 f993 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009a8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a90:	2300      	movs	r3, #0
 8009a92:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a94:	2300      	movs	r3, #0
 8009a96:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009a98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4812      	ldr	r0, [pc, #72]	@ (8009ae8 <HAL_PCD_MspInit+0xe8>)
 8009aa0:	f7f8 f986 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae4 <HAL_PCD_MspInit+0xe4>)
 8009aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009ae4 <HAL_PCD_MspInit+0xe4>)
 8009aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aae:	6353      	str	r3, [r2, #52]	@ 0x34
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ae4 <HAL_PCD_MspInit+0xe4>)
 8009ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae4 <HAL_PCD_MspInit+0xe4>)
 8009aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009abe:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ac0:	4b08      	ldr	r3, [pc, #32]	@ (8009ae4 <HAL_PCD_MspInit+0xe4>)
 8009ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ac8:	60fb      	str	r3, [r7, #12]
 8009aca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009acc:	2200      	movs	r2, #0
 8009ace:	2100      	movs	r1, #0
 8009ad0:	2043      	movs	r0, #67	@ 0x43
 8009ad2:	f7f8 f936 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ad6:	2043      	movs	r0, #67	@ 0x43
 8009ad8:	f7f8 f94f 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009adc:	bf00      	nop
 8009ade:	3780      	adds	r7, #128	@ 0x80
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	40023800 	.word	0x40023800
 8009ae8:	40020000 	.word	0x40020000

08009aec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8009b00:	4619      	mov	r1, r3
 8009b02:	4610      	mov	r0, r2
 8009b04:	f7fe fd1b 	bl	800853e <USBD_LL_SetupStage>
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009b22:	78fa      	ldrb	r2, [r7, #3]
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4613      	mov	r3, r2
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	1a9b      	subs	r3, r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	78fb      	ldrb	r3, [r7, #3]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	f7fe fd55 	bl	80085e8 <USBD_LL_DataOutStage>
}
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009b58:	78fa      	ldrb	r2, [r7, #3]
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	1a9b      	subs	r3, r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	440b      	add	r3, r1
 8009b66:	3348      	adds	r3, #72	@ 0x48
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f7fe fd9e 	bl	80086ae <USBD_LL_DataInStage>
}
 8009b72:	bf00      	nop
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fe feb2 	bl	80088f2 <USBD_LL_SOF>
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d001      	beq.n	8009bae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009baa:	f7f7 f8cb 	bl	8000d44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009bb4:	7bfa      	ldrb	r2, [r7, #15]
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe fe5c 	bl	8008876 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe fe08 	bl	80087da <USBD_LL_Reset>
}
 8009bca:	bf00      	nop
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fe57 	bl	8008896 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	6812      	ldr	r2, [r2, #0]
 8009bf6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bfa:	f043 0301 	orr.w	r3, r3, #1
 8009bfe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d005      	beq.n	8009c14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c08:	4b04      	ldr	r3, [pc, #16]	@ (8009c1c <HAL_PCD_SuspendCallback+0x48>)
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	4a03      	ldr	r2, [pc, #12]	@ (8009c1c <HAL_PCD_SuspendCallback+0x48>)
 8009c0e:	f043 0306 	orr.w	r3, r3, #6
 8009c12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	e000ed00 	.word	0xe000ed00

08009c20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe fe47 	bl	80088c2 <USBD_LL_Resume>
}
 8009c34:	bf00      	nop
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009c4e:	78fa      	ldrb	r2, [r7, #3]
 8009c50:	4611      	mov	r1, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fe95 	bl	8008982 <USBD_LL_IsoOUTIncomplete>
}
 8009c58:	bf00      	nop
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fe fe5d 	bl	8008936 <USBD_LL_IsoINIncomplete>
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fe9b 	bl	80089ce <USBD_LL_DevConnected>
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fe98 	bl	80089e4 <USBD_LL_DevDisconnected>
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d13f      	bne.n	8009d4c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ccc:	4a22      	ldr	r2, [pc, #136]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a20      	ldr	r2, [pc, #128]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009cd8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009cde:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009ce2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009ce6:	2206      	movs	r2, #6
 8009ce8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009cea:	4b1b      	ldr	r3, [pc, #108]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009cec:	2202      	movs	r2, #2
 8009cee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cf0:	4b19      	ldr	r3, [pc, #100]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cf6:	4b18      	ldr	r3, [pc, #96]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009cfc:	4b16      	ldr	r3, [pc, #88]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009cfe:	2201      	movs	r2, #1
 8009d00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d02:	4b15      	ldr	r3, [pc, #84]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d08:	4b13      	ldr	r3, [pc, #76]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8009d0e:	4b12      	ldr	r3, [pc, #72]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d10:	2201      	movs	r2, #1
 8009d12:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009d14:	4b10      	ldr	r3, [pc, #64]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d16:	2201      	movs	r2, #1
 8009d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d20:	480d      	ldr	r0, [pc, #52]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d22:	f7f9 fe26 	bl	8003972 <HAL_PCD_Init>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8009d2c:	f7f7 f80a 	bl	8000d44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d30:	2180      	movs	r1, #128	@ 0x80
 8009d32:	4809      	ldr	r0, [pc, #36]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d34:	f7fa ff8f 	bl	8004c56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d38:	2240      	movs	r2, #64	@ 0x40
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	4806      	ldr	r0, [pc, #24]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d3e:	f7fa ff43 	bl	8004bc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d42:	2280      	movs	r2, #128	@ 0x80
 8009d44:	2101      	movs	r1, #1
 8009d46:	4804      	ldr	r0, [pc, #16]	@ (8009d58 <USBD_LL_Init+0x9c>)
 8009d48:	f7fa ff3e 	bl	8004bc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3708      	adds	r7, #8
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	200008e4 	.word	0x200008e4

08009d5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7f9 ff21 	bl	8003bba <HAL_PCD_Start>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 f92c 	bl	8009fdc <USBD_Get_USB_Status>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7f9 ff39 	bl	8003c20 <HAL_PCD_Stop>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 f911 	bl	8009fdc <USBD_Get_USB_Status>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	70fb      	strb	r3, [r7, #3]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70bb      	strb	r3, [r7, #2]
 8009dde:	4613      	mov	r3, r2
 8009de0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009df0:	78bb      	ldrb	r3, [r7, #2]
 8009df2:	883a      	ldrh	r2, [r7, #0]
 8009df4:	78f9      	ldrb	r1, [r7, #3]
 8009df6:	f7fa fb50 	bl	800449a <HAL_PCD_EP_Open>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 f8eb 	bl	8009fdc <USBD_Get_USB_Status>
 8009e06:	4603      	mov	r3, r0
 8009e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009e2e:	78fa      	ldrb	r2, [r7, #3]
 8009e30:	4611      	mov	r1, r2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fa fc2e 	bl	8004694 <HAL_PCD_EP_SetStall>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f8cc 	bl	8009fdc <USBD_Get_USB_Status>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009e6c:	78fa      	ldrb	r2, [r7, #3]
 8009e6e:	4611      	mov	r1, r2
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fa fc73 	bl	800475c <HAL_PCD_EP_ClrStall>
 8009e76:	4603      	mov	r3, r0
 8009e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f000 f8ad 	bl	8009fdc <USBD_Get_USB_Status>
 8009e82:	4603      	mov	r3, r0
 8009e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009ea2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	da0b      	bge.n	8009ec4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009eac:	78fb      	ldrb	r3, [r7, #3]
 8009eae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009eb2:	68f9      	ldr	r1, [r7, #12]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	00db      	lsls	r3, r3, #3
 8009eb8:	1a9b      	subs	r3, r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	440b      	add	r3, r1
 8009ebe:	333e      	adds	r3, #62	@ 0x3e
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	e00b      	b.n	8009edc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009eda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009f02:	78fa      	ldrb	r2, [r7, #3]
 8009f04:	4611      	mov	r1, r2
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fa faa2 	bl	8004450 <HAL_PCD_SetAddress>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 f862 	bl	8009fdc <USBD_Get_USB_Status>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b086      	sub	sp, #24
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
 8009f32:	460b      	mov	r3, r1
 8009f34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f44:	7af9      	ldrb	r1, [r7, #11]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f7fa fb59 	bl	8004600 <HAL_PCD_EP_Transmit>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 f841 	bl	8009fdc <USBD_Get_USB_Status>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	460b      	mov	r3, r1
 8009f76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009f86:	7af9      	ldrb	r1, [r7, #11]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	f7fa faed 	bl	800456a <HAL_PCD_EP_Receive>
 8009f90:	4603      	mov	r3, r0
 8009f92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f94:	7dfb      	ldrb	r3, [r7, #23]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 f820 	bl	8009fdc <USBD_Get_USB_Status>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fa0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fb4:	4b03      	ldr	r3, [pc, #12]	@ (8009fc4 <USBD_static_malloc+0x18>)
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000cec 	.word	0x20000cec

08009fc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]

}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d817      	bhi.n	800a020 <USBD_Get_USB_Status+0x44>
 8009ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff8 <USBD_Get_USB_Status+0x1c>)
 8009ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff6:	bf00      	nop
 8009ff8:	0800a009 	.word	0x0800a009
 8009ffc:	0800a00f 	.word	0x0800a00f
 800a000:	0800a015 	.word	0x0800a015
 800a004:	0800a01b 	.word	0x0800a01b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
    break;
 800a00c:	e00b      	b.n	800a026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a00e:	2303      	movs	r3, #3
 800a010:	73fb      	strb	r3, [r7, #15]
    break;
 800a012:	e008      	b.n	800a026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a014:	2301      	movs	r3, #1
 800a016:	73fb      	strb	r3, [r7, #15]
    break;
 800a018:	e005      	b.n	800a026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a01a:	2303      	movs	r3, #3
 800a01c:	73fb      	strb	r3, [r7, #15]
    break;
 800a01e:	e002      	b.n	800a026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a020:	2303      	movs	r3, #3
 800a022:	73fb      	strb	r3, [r7, #15]
    break;
 800a024:	bf00      	nop
  }
  return usb_status;
 800a026:	7bfb      	ldrb	r3, [r7, #15]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <std>:
 800a034:	2300      	movs	r3, #0
 800a036:	b510      	push	{r4, lr}
 800a038:	4604      	mov	r4, r0
 800a03a:	e9c0 3300 	strd	r3, r3, [r0]
 800a03e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a042:	6083      	str	r3, [r0, #8]
 800a044:	8181      	strh	r1, [r0, #12]
 800a046:	6643      	str	r3, [r0, #100]	@ 0x64
 800a048:	81c2      	strh	r2, [r0, #14]
 800a04a:	6183      	str	r3, [r0, #24]
 800a04c:	4619      	mov	r1, r3
 800a04e:	2208      	movs	r2, #8
 800a050:	305c      	adds	r0, #92	@ 0x5c
 800a052:	f000 f9f9 	bl	800a448 <memset>
 800a056:	4b0d      	ldr	r3, [pc, #52]	@ (800a08c <std+0x58>)
 800a058:	6263      	str	r3, [r4, #36]	@ 0x24
 800a05a:	4b0d      	ldr	r3, [pc, #52]	@ (800a090 <std+0x5c>)
 800a05c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a05e:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <std+0x60>)
 800a060:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a062:	4b0d      	ldr	r3, [pc, #52]	@ (800a098 <std+0x64>)
 800a064:	6323      	str	r3, [r4, #48]	@ 0x30
 800a066:	4b0d      	ldr	r3, [pc, #52]	@ (800a09c <std+0x68>)
 800a068:	6224      	str	r4, [r4, #32]
 800a06a:	429c      	cmp	r4, r3
 800a06c:	d006      	beq.n	800a07c <std+0x48>
 800a06e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a072:	4294      	cmp	r4, r2
 800a074:	d002      	beq.n	800a07c <std+0x48>
 800a076:	33d0      	adds	r3, #208	@ 0xd0
 800a078:	429c      	cmp	r4, r3
 800a07a:	d105      	bne.n	800a088 <std+0x54>
 800a07c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a084:	f000 ba58 	b.w	800a538 <__retarget_lock_init_recursive>
 800a088:	bd10      	pop	{r4, pc}
 800a08a:	bf00      	nop
 800a08c:	0800a299 	.word	0x0800a299
 800a090:	0800a2bb 	.word	0x0800a2bb
 800a094:	0800a2f3 	.word	0x0800a2f3
 800a098:	0800a317 	.word	0x0800a317
 800a09c:	2000110c 	.word	0x2000110c

0800a0a0 <stdio_exit_handler>:
 800a0a0:	4a02      	ldr	r2, [pc, #8]	@ (800a0ac <stdio_exit_handler+0xc>)
 800a0a2:	4903      	ldr	r1, [pc, #12]	@ (800a0b0 <stdio_exit_handler+0x10>)
 800a0a4:	4803      	ldr	r0, [pc, #12]	@ (800a0b4 <stdio_exit_handler+0x14>)
 800a0a6:	f000 b869 	b.w	800a17c <_fwalk_sglue>
 800a0aa:	bf00      	nop
 800a0ac:	200000dc 	.word	0x200000dc
 800a0b0:	0800add5 	.word	0x0800add5
 800a0b4:	200000ec 	.word	0x200000ec

0800a0b8 <cleanup_stdio>:
 800a0b8:	6841      	ldr	r1, [r0, #4]
 800a0ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a0ec <cleanup_stdio+0x34>)
 800a0bc:	4299      	cmp	r1, r3
 800a0be:	b510      	push	{r4, lr}
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	d001      	beq.n	800a0c8 <cleanup_stdio+0x10>
 800a0c4:	f000 fe86 	bl	800add4 <_fflush_r>
 800a0c8:	68a1      	ldr	r1, [r4, #8]
 800a0ca:	4b09      	ldr	r3, [pc, #36]	@ (800a0f0 <cleanup_stdio+0x38>)
 800a0cc:	4299      	cmp	r1, r3
 800a0ce:	d002      	beq.n	800a0d6 <cleanup_stdio+0x1e>
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f000 fe7f 	bl	800add4 <_fflush_r>
 800a0d6:	68e1      	ldr	r1, [r4, #12]
 800a0d8:	4b06      	ldr	r3, [pc, #24]	@ (800a0f4 <cleanup_stdio+0x3c>)
 800a0da:	4299      	cmp	r1, r3
 800a0dc:	d004      	beq.n	800a0e8 <cleanup_stdio+0x30>
 800a0de:	4620      	mov	r0, r4
 800a0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0e4:	f000 be76 	b.w	800add4 <_fflush_r>
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	bf00      	nop
 800a0ec:	2000110c 	.word	0x2000110c
 800a0f0:	20001174 	.word	0x20001174
 800a0f4:	200011dc 	.word	0x200011dc

0800a0f8 <global_stdio_init.part.0>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a128 <global_stdio_init.part.0+0x30>)
 800a0fc:	4c0b      	ldr	r4, [pc, #44]	@ (800a12c <global_stdio_init.part.0+0x34>)
 800a0fe:	4a0c      	ldr	r2, [pc, #48]	@ (800a130 <global_stdio_init.part.0+0x38>)
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	4620      	mov	r0, r4
 800a104:	2200      	movs	r2, #0
 800a106:	2104      	movs	r1, #4
 800a108:	f7ff ff94 	bl	800a034 <std>
 800a10c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a110:	2201      	movs	r2, #1
 800a112:	2109      	movs	r1, #9
 800a114:	f7ff ff8e 	bl	800a034 <std>
 800a118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a11c:	2202      	movs	r2, #2
 800a11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a122:	2112      	movs	r1, #18
 800a124:	f7ff bf86 	b.w	800a034 <std>
 800a128:	20001244 	.word	0x20001244
 800a12c:	2000110c 	.word	0x2000110c
 800a130:	0800a0a1 	.word	0x0800a0a1

0800a134 <__sfp_lock_acquire>:
 800a134:	4801      	ldr	r0, [pc, #4]	@ (800a13c <__sfp_lock_acquire+0x8>)
 800a136:	f000 ba00 	b.w	800a53a <__retarget_lock_acquire_recursive>
 800a13a:	bf00      	nop
 800a13c:	2000124d 	.word	0x2000124d

0800a140 <__sfp_lock_release>:
 800a140:	4801      	ldr	r0, [pc, #4]	@ (800a148 <__sfp_lock_release+0x8>)
 800a142:	f000 b9fb 	b.w	800a53c <__retarget_lock_release_recursive>
 800a146:	bf00      	nop
 800a148:	2000124d 	.word	0x2000124d

0800a14c <__sinit>:
 800a14c:	b510      	push	{r4, lr}
 800a14e:	4604      	mov	r4, r0
 800a150:	f7ff fff0 	bl	800a134 <__sfp_lock_acquire>
 800a154:	6a23      	ldr	r3, [r4, #32]
 800a156:	b11b      	cbz	r3, 800a160 <__sinit+0x14>
 800a158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a15c:	f7ff bff0 	b.w	800a140 <__sfp_lock_release>
 800a160:	4b04      	ldr	r3, [pc, #16]	@ (800a174 <__sinit+0x28>)
 800a162:	6223      	str	r3, [r4, #32]
 800a164:	4b04      	ldr	r3, [pc, #16]	@ (800a178 <__sinit+0x2c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1f5      	bne.n	800a158 <__sinit+0xc>
 800a16c:	f7ff ffc4 	bl	800a0f8 <global_stdio_init.part.0>
 800a170:	e7f2      	b.n	800a158 <__sinit+0xc>
 800a172:	bf00      	nop
 800a174:	0800a0b9 	.word	0x0800a0b9
 800a178:	20001244 	.word	0x20001244

0800a17c <_fwalk_sglue>:
 800a17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a180:	4607      	mov	r7, r0
 800a182:	4688      	mov	r8, r1
 800a184:	4614      	mov	r4, r2
 800a186:	2600      	movs	r6, #0
 800a188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a18c:	f1b9 0901 	subs.w	r9, r9, #1
 800a190:	d505      	bpl.n	800a19e <_fwalk_sglue+0x22>
 800a192:	6824      	ldr	r4, [r4, #0]
 800a194:	2c00      	cmp	r4, #0
 800a196:	d1f7      	bne.n	800a188 <_fwalk_sglue+0xc>
 800a198:	4630      	mov	r0, r6
 800a19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d907      	bls.n	800a1b4 <_fwalk_sglue+0x38>
 800a1a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	d003      	beq.n	800a1b4 <_fwalk_sglue+0x38>
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	47c0      	blx	r8
 800a1b2:	4306      	orrs	r6, r0
 800a1b4:	3568      	adds	r5, #104	@ 0x68
 800a1b6:	e7e9      	b.n	800a18c <_fwalk_sglue+0x10>

0800a1b8 <iprintf>:
 800a1b8:	b40f      	push	{r0, r1, r2, r3}
 800a1ba:	b507      	push	{r0, r1, r2, lr}
 800a1bc:	4906      	ldr	r1, [pc, #24]	@ (800a1d8 <iprintf+0x20>)
 800a1be:	ab04      	add	r3, sp, #16
 800a1c0:	6808      	ldr	r0, [r1, #0]
 800a1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c6:	6881      	ldr	r1, [r0, #8]
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	f000 fadb 	bl	800a784 <_vfiprintf_r>
 800a1ce:	b003      	add	sp, #12
 800a1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d4:	b004      	add	sp, #16
 800a1d6:	4770      	bx	lr
 800a1d8:	200000e8 	.word	0x200000e8

0800a1dc <_puts_r>:
 800a1dc:	6a03      	ldr	r3, [r0, #32]
 800a1de:	b570      	push	{r4, r5, r6, lr}
 800a1e0:	6884      	ldr	r4, [r0, #8]
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	460e      	mov	r6, r1
 800a1e6:	b90b      	cbnz	r3, 800a1ec <_puts_r+0x10>
 800a1e8:	f7ff ffb0 	bl	800a14c <__sinit>
 800a1ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1ee:	07db      	lsls	r3, r3, #31
 800a1f0:	d405      	bmi.n	800a1fe <_puts_r+0x22>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	0598      	lsls	r0, r3, #22
 800a1f6:	d402      	bmi.n	800a1fe <_puts_r+0x22>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1fa:	f000 f99e 	bl	800a53a <__retarget_lock_acquire_recursive>
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	0719      	lsls	r1, r3, #28
 800a202:	d502      	bpl.n	800a20a <_puts_r+0x2e>
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d135      	bne.n	800a276 <_puts_r+0x9a>
 800a20a:	4621      	mov	r1, r4
 800a20c:	4628      	mov	r0, r5
 800a20e:	f000 f8c5 	bl	800a39c <__swsetup_r>
 800a212:	b380      	cbz	r0, 800a276 <_puts_r+0x9a>
 800a214:	f04f 35ff 	mov.w	r5, #4294967295
 800a218:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a21a:	07da      	lsls	r2, r3, #31
 800a21c:	d405      	bmi.n	800a22a <_puts_r+0x4e>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	059b      	lsls	r3, r3, #22
 800a222:	d402      	bmi.n	800a22a <_puts_r+0x4e>
 800a224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a226:	f000 f989 	bl	800a53c <__retarget_lock_release_recursive>
 800a22a:	4628      	mov	r0, r5
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	2b00      	cmp	r3, #0
 800a230:	da04      	bge.n	800a23c <_puts_r+0x60>
 800a232:	69a2      	ldr	r2, [r4, #24]
 800a234:	429a      	cmp	r2, r3
 800a236:	dc17      	bgt.n	800a268 <_puts_r+0x8c>
 800a238:	290a      	cmp	r1, #10
 800a23a:	d015      	beq.n	800a268 <_puts_r+0x8c>
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	6022      	str	r2, [r4, #0]
 800a242:	7019      	strb	r1, [r3, #0]
 800a244:	68a3      	ldr	r3, [r4, #8]
 800a246:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a24a:	3b01      	subs	r3, #1
 800a24c:	60a3      	str	r3, [r4, #8]
 800a24e:	2900      	cmp	r1, #0
 800a250:	d1ed      	bne.n	800a22e <_puts_r+0x52>
 800a252:	2b00      	cmp	r3, #0
 800a254:	da11      	bge.n	800a27a <_puts_r+0x9e>
 800a256:	4622      	mov	r2, r4
 800a258:	210a      	movs	r1, #10
 800a25a:	4628      	mov	r0, r5
 800a25c:	f000 f85f 	bl	800a31e <__swbuf_r>
 800a260:	3001      	adds	r0, #1
 800a262:	d0d7      	beq.n	800a214 <_puts_r+0x38>
 800a264:	250a      	movs	r5, #10
 800a266:	e7d7      	b.n	800a218 <_puts_r+0x3c>
 800a268:	4622      	mov	r2, r4
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 f857 	bl	800a31e <__swbuf_r>
 800a270:	3001      	adds	r0, #1
 800a272:	d1e7      	bne.n	800a244 <_puts_r+0x68>
 800a274:	e7ce      	b.n	800a214 <_puts_r+0x38>
 800a276:	3e01      	subs	r6, #1
 800a278:	e7e4      	b.n	800a244 <_puts_r+0x68>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	6022      	str	r2, [r4, #0]
 800a280:	220a      	movs	r2, #10
 800a282:	701a      	strb	r2, [r3, #0]
 800a284:	e7ee      	b.n	800a264 <_puts_r+0x88>
	...

0800a288 <puts>:
 800a288:	4b02      	ldr	r3, [pc, #8]	@ (800a294 <puts+0xc>)
 800a28a:	4601      	mov	r1, r0
 800a28c:	6818      	ldr	r0, [r3, #0]
 800a28e:	f7ff bfa5 	b.w	800a1dc <_puts_r>
 800a292:	bf00      	nop
 800a294:	200000e8 	.word	0x200000e8

0800a298 <__sread>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	f000 f8fc 	bl	800a49c <_read_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	bfab      	itete	ge
 800a2a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a2ac:	181b      	addge	r3, r3, r0
 800a2ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2b2:	bfac      	ite	ge
 800a2b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2b6:	81a3      	strhlt	r3, [r4, #12]
 800a2b8:	bd10      	pop	{r4, pc}

0800a2ba <__swrite>:
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	461f      	mov	r7, r3
 800a2c0:	898b      	ldrh	r3, [r1, #12]
 800a2c2:	05db      	lsls	r3, r3, #23
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	d505      	bpl.n	800a2d8 <__swrite+0x1e>
 800a2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f000 f8d0 	bl	800a478 <_lseek_r>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	4632      	mov	r2, r6
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ee:	f000 b8e7 	b.w	800a4c0 <_write_r>

0800a2f2 <__sseek>:
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fa:	f000 f8bd 	bl	800a478 <_lseek_r>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	bf15      	itete	ne
 800a304:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a30a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a30e:	81a3      	strheq	r3, [r4, #12]
 800a310:	bf18      	it	ne
 800a312:	81a3      	strhne	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__sclose>:
 800a316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31a:	f000 b89d 	b.w	800a458 <_close_r>

0800a31e <__swbuf_r>:
 800a31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a320:	460e      	mov	r6, r1
 800a322:	4614      	mov	r4, r2
 800a324:	4605      	mov	r5, r0
 800a326:	b118      	cbz	r0, 800a330 <__swbuf_r+0x12>
 800a328:	6a03      	ldr	r3, [r0, #32]
 800a32a:	b90b      	cbnz	r3, 800a330 <__swbuf_r+0x12>
 800a32c:	f7ff ff0e 	bl	800a14c <__sinit>
 800a330:	69a3      	ldr	r3, [r4, #24]
 800a332:	60a3      	str	r3, [r4, #8]
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	071a      	lsls	r2, r3, #28
 800a338:	d501      	bpl.n	800a33e <__swbuf_r+0x20>
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	b943      	cbnz	r3, 800a350 <__swbuf_r+0x32>
 800a33e:	4621      	mov	r1, r4
 800a340:	4628      	mov	r0, r5
 800a342:	f000 f82b 	bl	800a39c <__swsetup_r>
 800a346:	b118      	cbz	r0, 800a350 <__swbuf_r+0x32>
 800a348:	f04f 37ff 	mov.w	r7, #4294967295
 800a34c:	4638      	mov	r0, r7
 800a34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	6922      	ldr	r2, [r4, #16]
 800a354:	1a98      	subs	r0, r3, r2
 800a356:	6963      	ldr	r3, [r4, #20]
 800a358:	b2f6      	uxtb	r6, r6
 800a35a:	4283      	cmp	r3, r0
 800a35c:	4637      	mov	r7, r6
 800a35e:	dc05      	bgt.n	800a36c <__swbuf_r+0x4e>
 800a360:	4621      	mov	r1, r4
 800a362:	4628      	mov	r0, r5
 800a364:	f000 fd36 	bl	800add4 <_fflush_r>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d1ed      	bne.n	800a348 <__swbuf_r+0x2a>
 800a36c:	68a3      	ldr	r3, [r4, #8]
 800a36e:	3b01      	subs	r3, #1
 800a370:	60a3      	str	r3, [r4, #8]
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	1c5a      	adds	r2, r3, #1
 800a376:	6022      	str	r2, [r4, #0]
 800a378:	701e      	strb	r6, [r3, #0]
 800a37a:	6962      	ldr	r2, [r4, #20]
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	429a      	cmp	r2, r3
 800a380:	d004      	beq.n	800a38c <__swbuf_r+0x6e>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	07db      	lsls	r3, r3, #31
 800a386:	d5e1      	bpl.n	800a34c <__swbuf_r+0x2e>
 800a388:	2e0a      	cmp	r6, #10
 800a38a:	d1df      	bne.n	800a34c <__swbuf_r+0x2e>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 fd20 	bl	800add4 <_fflush_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	d0d9      	beq.n	800a34c <__swbuf_r+0x2e>
 800a398:	e7d6      	b.n	800a348 <__swbuf_r+0x2a>
	...

0800a39c <__swsetup_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4b29      	ldr	r3, [pc, #164]	@ (800a444 <__swsetup_r+0xa8>)
 800a3a0:	4605      	mov	r5, r0
 800a3a2:	6818      	ldr	r0, [r3, #0]
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	b118      	cbz	r0, 800a3b0 <__swsetup_r+0x14>
 800a3a8:	6a03      	ldr	r3, [r0, #32]
 800a3aa:	b90b      	cbnz	r3, 800a3b0 <__swsetup_r+0x14>
 800a3ac:	f7ff fece 	bl	800a14c <__sinit>
 800a3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b4:	0719      	lsls	r1, r3, #28
 800a3b6:	d422      	bmi.n	800a3fe <__swsetup_r+0x62>
 800a3b8:	06da      	lsls	r2, r3, #27
 800a3ba:	d407      	bmi.n	800a3cc <__swsetup_r+0x30>
 800a3bc:	2209      	movs	r2, #9
 800a3be:	602a      	str	r2, [r5, #0]
 800a3c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ca:	e033      	b.n	800a434 <__swsetup_r+0x98>
 800a3cc:	0758      	lsls	r0, r3, #29
 800a3ce:	d512      	bpl.n	800a3f6 <__swsetup_r+0x5a>
 800a3d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3d2:	b141      	cbz	r1, 800a3e6 <__swsetup_r+0x4a>
 800a3d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3d8:	4299      	cmp	r1, r3
 800a3da:	d002      	beq.n	800a3e2 <__swsetup_r+0x46>
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f000 f8af 	bl	800a540 <_free_r>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3ec:	81a3      	strh	r3, [r4, #12]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6063      	str	r3, [r4, #4]
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	f043 0308 	orr.w	r3, r3, #8
 800a3fc:	81a3      	strh	r3, [r4, #12]
 800a3fe:	6923      	ldr	r3, [r4, #16]
 800a400:	b94b      	cbnz	r3, 800a416 <__swsetup_r+0x7a>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a40c:	d003      	beq.n	800a416 <__swsetup_r+0x7a>
 800a40e:	4621      	mov	r1, r4
 800a410:	4628      	mov	r0, r5
 800a412:	f000 fd2d 	bl	800ae70 <__smakebuf_r>
 800a416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41a:	f013 0201 	ands.w	r2, r3, #1
 800a41e:	d00a      	beq.n	800a436 <__swsetup_r+0x9a>
 800a420:	2200      	movs	r2, #0
 800a422:	60a2      	str	r2, [r4, #8]
 800a424:	6962      	ldr	r2, [r4, #20]
 800a426:	4252      	negs	r2, r2
 800a428:	61a2      	str	r2, [r4, #24]
 800a42a:	6922      	ldr	r2, [r4, #16]
 800a42c:	b942      	cbnz	r2, 800a440 <__swsetup_r+0xa4>
 800a42e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a432:	d1c5      	bne.n	800a3c0 <__swsetup_r+0x24>
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	0799      	lsls	r1, r3, #30
 800a438:	bf58      	it	pl
 800a43a:	6962      	ldrpl	r2, [r4, #20]
 800a43c:	60a2      	str	r2, [r4, #8]
 800a43e:	e7f4      	b.n	800a42a <__swsetup_r+0x8e>
 800a440:	2000      	movs	r0, #0
 800a442:	e7f7      	b.n	800a434 <__swsetup_r+0x98>
 800a444:	200000e8 	.word	0x200000e8

0800a448 <memset>:
 800a448:	4402      	add	r2, r0
 800a44a:	4603      	mov	r3, r0
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d100      	bne.n	800a452 <memset+0xa>
 800a450:	4770      	bx	lr
 800a452:	f803 1b01 	strb.w	r1, [r3], #1
 800a456:	e7f9      	b.n	800a44c <memset+0x4>

0800a458 <_close_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4d06      	ldr	r5, [pc, #24]	@ (800a474 <_close_r+0x1c>)
 800a45c:	2300      	movs	r3, #0
 800a45e:	4604      	mov	r4, r0
 800a460:	4608      	mov	r0, r1
 800a462:	602b      	str	r3, [r5, #0]
 800a464:	f7f6 fee7 	bl	8001236 <_close>
 800a468:	1c43      	adds	r3, r0, #1
 800a46a:	d102      	bne.n	800a472 <_close_r+0x1a>
 800a46c:	682b      	ldr	r3, [r5, #0]
 800a46e:	b103      	cbz	r3, 800a472 <_close_r+0x1a>
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	bd38      	pop	{r3, r4, r5, pc}
 800a474:	20001248 	.word	0x20001248

0800a478 <_lseek_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	@ (800a498 <_lseek_r+0x20>)
 800a47c:	4604      	mov	r4, r0
 800a47e:	4608      	mov	r0, r1
 800a480:	4611      	mov	r1, r2
 800a482:	2200      	movs	r2, #0
 800a484:	602a      	str	r2, [r5, #0]
 800a486:	461a      	mov	r2, r3
 800a488:	f7f6 fefc 	bl	8001284 <_lseek>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_lseek_r+0x1e>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_lseek_r+0x1e>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20001248 	.word	0x20001248

0800a49c <_read_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d07      	ldr	r5, [pc, #28]	@ (800a4bc <_read_r+0x20>)
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	4608      	mov	r0, r1
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	602a      	str	r2, [r5, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f7f6 fe8a 	bl	80011c4 <_read>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_read_r+0x1e>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_read_r+0x1e>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	20001248 	.word	0x20001248

0800a4c0 <_write_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	4d07      	ldr	r5, [pc, #28]	@ (800a4e0 <_write_r+0x20>)
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	4608      	mov	r0, r1
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	602a      	str	r2, [r5, #0]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f7f6 fe95 	bl	80011fe <_write>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_write_r+0x1e>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_write_r+0x1e>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20001248 	.word	0x20001248

0800a4e4 <__errno>:
 800a4e4:	4b01      	ldr	r3, [pc, #4]	@ (800a4ec <__errno+0x8>)
 800a4e6:	6818      	ldr	r0, [r3, #0]
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	200000e8 	.word	0x200000e8

0800a4f0 <__libc_init_array>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	4d0d      	ldr	r5, [pc, #52]	@ (800a528 <__libc_init_array+0x38>)
 800a4f4:	4c0d      	ldr	r4, [pc, #52]	@ (800a52c <__libc_init_array+0x3c>)
 800a4f6:	1b64      	subs	r4, r4, r5
 800a4f8:	10a4      	asrs	r4, r4, #2
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	42a6      	cmp	r6, r4
 800a4fe:	d109      	bne.n	800a514 <__libc_init_array+0x24>
 800a500:	4d0b      	ldr	r5, [pc, #44]	@ (800a530 <__libc_init_array+0x40>)
 800a502:	4c0c      	ldr	r4, [pc, #48]	@ (800a534 <__libc_init_array+0x44>)
 800a504:	f000 fd22 	bl	800af4c <_init>
 800a508:	1b64      	subs	r4, r4, r5
 800a50a:	10a4      	asrs	r4, r4, #2
 800a50c:	2600      	movs	r6, #0
 800a50e:	42a6      	cmp	r6, r4
 800a510:	d105      	bne.n	800a51e <__libc_init_array+0x2e>
 800a512:	bd70      	pop	{r4, r5, r6, pc}
 800a514:	f855 3b04 	ldr.w	r3, [r5], #4
 800a518:	4798      	blx	r3
 800a51a:	3601      	adds	r6, #1
 800a51c:	e7ee      	b.n	800a4fc <__libc_init_array+0xc>
 800a51e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a522:	4798      	blx	r3
 800a524:	3601      	adds	r6, #1
 800a526:	e7f2      	b.n	800a50e <__libc_init_array+0x1e>
 800a528:	0800b2c0 	.word	0x0800b2c0
 800a52c:	0800b2c0 	.word	0x0800b2c0
 800a530:	0800b2c0 	.word	0x0800b2c0
 800a534:	0800b2c4 	.word	0x0800b2c4

0800a538 <__retarget_lock_init_recursive>:
 800a538:	4770      	bx	lr

0800a53a <__retarget_lock_acquire_recursive>:
 800a53a:	4770      	bx	lr

0800a53c <__retarget_lock_release_recursive>:
 800a53c:	4770      	bx	lr
	...

0800a540 <_free_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4605      	mov	r5, r0
 800a544:	2900      	cmp	r1, #0
 800a546:	d041      	beq.n	800a5cc <_free_r+0x8c>
 800a548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a54c:	1f0c      	subs	r4, r1, #4
 800a54e:	2b00      	cmp	r3, #0
 800a550:	bfb8      	it	lt
 800a552:	18e4      	addlt	r4, r4, r3
 800a554:	f000 f8e0 	bl	800a718 <__malloc_lock>
 800a558:	4a1d      	ldr	r2, [pc, #116]	@ (800a5d0 <_free_r+0x90>)
 800a55a:	6813      	ldr	r3, [r2, #0]
 800a55c:	b933      	cbnz	r3, 800a56c <_free_r+0x2c>
 800a55e:	6063      	str	r3, [r4, #4]
 800a560:	6014      	str	r4, [r2, #0]
 800a562:	4628      	mov	r0, r5
 800a564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a568:	f000 b8dc 	b.w	800a724 <__malloc_unlock>
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	d908      	bls.n	800a582 <_free_r+0x42>
 800a570:	6820      	ldr	r0, [r4, #0]
 800a572:	1821      	adds	r1, r4, r0
 800a574:	428b      	cmp	r3, r1
 800a576:	bf01      	itttt	eq
 800a578:	6819      	ldreq	r1, [r3, #0]
 800a57a:	685b      	ldreq	r3, [r3, #4]
 800a57c:	1809      	addeq	r1, r1, r0
 800a57e:	6021      	streq	r1, [r4, #0]
 800a580:	e7ed      	b.n	800a55e <_free_r+0x1e>
 800a582:	461a      	mov	r2, r3
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	b10b      	cbz	r3, 800a58c <_free_r+0x4c>
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d9fa      	bls.n	800a582 <_free_r+0x42>
 800a58c:	6811      	ldr	r1, [r2, #0]
 800a58e:	1850      	adds	r0, r2, r1
 800a590:	42a0      	cmp	r0, r4
 800a592:	d10b      	bne.n	800a5ac <_free_r+0x6c>
 800a594:	6820      	ldr	r0, [r4, #0]
 800a596:	4401      	add	r1, r0
 800a598:	1850      	adds	r0, r2, r1
 800a59a:	4283      	cmp	r3, r0
 800a59c:	6011      	str	r1, [r2, #0]
 800a59e:	d1e0      	bne.n	800a562 <_free_r+0x22>
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	6053      	str	r3, [r2, #4]
 800a5a6:	4408      	add	r0, r1
 800a5a8:	6010      	str	r0, [r2, #0]
 800a5aa:	e7da      	b.n	800a562 <_free_r+0x22>
 800a5ac:	d902      	bls.n	800a5b4 <_free_r+0x74>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	e7d6      	b.n	800a562 <_free_r+0x22>
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	1821      	adds	r1, r4, r0
 800a5b8:	428b      	cmp	r3, r1
 800a5ba:	bf04      	itt	eq
 800a5bc:	6819      	ldreq	r1, [r3, #0]
 800a5be:	685b      	ldreq	r3, [r3, #4]
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	bf04      	itt	eq
 800a5c4:	1809      	addeq	r1, r1, r0
 800a5c6:	6021      	streq	r1, [r4, #0]
 800a5c8:	6054      	str	r4, [r2, #4]
 800a5ca:	e7ca      	b.n	800a562 <_free_r+0x22>
 800a5cc:	bd38      	pop	{r3, r4, r5, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20001254 	.word	0x20001254

0800a5d4 <sbrk_aligned>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	4e0f      	ldr	r6, [pc, #60]	@ (800a614 <sbrk_aligned+0x40>)
 800a5d8:	460c      	mov	r4, r1
 800a5da:	6831      	ldr	r1, [r6, #0]
 800a5dc:	4605      	mov	r5, r0
 800a5de:	b911      	cbnz	r1, 800a5e6 <sbrk_aligned+0x12>
 800a5e0:	f000 fca4 	bl	800af2c <_sbrk_r>
 800a5e4:	6030      	str	r0, [r6, #0]
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f000 fc9f 	bl	800af2c <_sbrk_r>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	d103      	bne.n	800a5fa <sbrk_aligned+0x26>
 800a5f2:	f04f 34ff 	mov.w	r4, #4294967295
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	1cc4      	adds	r4, r0, #3
 800a5fc:	f024 0403 	bic.w	r4, r4, #3
 800a600:	42a0      	cmp	r0, r4
 800a602:	d0f8      	beq.n	800a5f6 <sbrk_aligned+0x22>
 800a604:	1a21      	subs	r1, r4, r0
 800a606:	4628      	mov	r0, r5
 800a608:	f000 fc90 	bl	800af2c <_sbrk_r>
 800a60c:	3001      	adds	r0, #1
 800a60e:	d1f2      	bne.n	800a5f6 <sbrk_aligned+0x22>
 800a610:	e7ef      	b.n	800a5f2 <sbrk_aligned+0x1e>
 800a612:	bf00      	nop
 800a614:	20001250 	.word	0x20001250

0800a618 <_malloc_r>:
 800a618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a61c:	1ccd      	adds	r5, r1, #3
 800a61e:	f025 0503 	bic.w	r5, r5, #3
 800a622:	3508      	adds	r5, #8
 800a624:	2d0c      	cmp	r5, #12
 800a626:	bf38      	it	cc
 800a628:	250c      	movcc	r5, #12
 800a62a:	2d00      	cmp	r5, #0
 800a62c:	4606      	mov	r6, r0
 800a62e:	db01      	blt.n	800a634 <_malloc_r+0x1c>
 800a630:	42a9      	cmp	r1, r5
 800a632:	d904      	bls.n	800a63e <_malloc_r+0x26>
 800a634:	230c      	movs	r3, #12
 800a636:	6033      	str	r3, [r6, #0]
 800a638:	2000      	movs	r0, #0
 800a63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a714 <_malloc_r+0xfc>
 800a642:	f000 f869 	bl	800a718 <__malloc_lock>
 800a646:	f8d8 3000 	ldr.w	r3, [r8]
 800a64a:	461c      	mov	r4, r3
 800a64c:	bb44      	cbnz	r4, 800a6a0 <_malloc_r+0x88>
 800a64e:	4629      	mov	r1, r5
 800a650:	4630      	mov	r0, r6
 800a652:	f7ff ffbf 	bl	800a5d4 <sbrk_aligned>
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	4604      	mov	r4, r0
 800a65a:	d158      	bne.n	800a70e <_malloc_r+0xf6>
 800a65c:	f8d8 4000 	ldr.w	r4, [r8]
 800a660:	4627      	mov	r7, r4
 800a662:	2f00      	cmp	r7, #0
 800a664:	d143      	bne.n	800a6ee <_malloc_r+0xd6>
 800a666:	2c00      	cmp	r4, #0
 800a668:	d04b      	beq.n	800a702 <_malloc_r+0xea>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	4639      	mov	r1, r7
 800a66e:	4630      	mov	r0, r6
 800a670:	eb04 0903 	add.w	r9, r4, r3
 800a674:	f000 fc5a 	bl	800af2c <_sbrk_r>
 800a678:	4581      	cmp	r9, r0
 800a67a:	d142      	bne.n	800a702 <_malloc_r+0xea>
 800a67c:	6821      	ldr	r1, [r4, #0]
 800a67e:	1a6d      	subs	r5, r5, r1
 800a680:	4629      	mov	r1, r5
 800a682:	4630      	mov	r0, r6
 800a684:	f7ff ffa6 	bl	800a5d4 <sbrk_aligned>
 800a688:	3001      	adds	r0, #1
 800a68a:	d03a      	beq.n	800a702 <_malloc_r+0xea>
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	442b      	add	r3, r5
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	f8d8 3000 	ldr.w	r3, [r8]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	bb62      	cbnz	r2, 800a6f4 <_malloc_r+0xdc>
 800a69a:	f8c8 7000 	str.w	r7, [r8]
 800a69e:	e00f      	b.n	800a6c0 <_malloc_r+0xa8>
 800a6a0:	6822      	ldr	r2, [r4, #0]
 800a6a2:	1b52      	subs	r2, r2, r5
 800a6a4:	d420      	bmi.n	800a6e8 <_malloc_r+0xd0>
 800a6a6:	2a0b      	cmp	r2, #11
 800a6a8:	d917      	bls.n	800a6da <_malloc_r+0xc2>
 800a6aa:	1961      	adds	r1, r4, r5
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	6025      	str	r5, [r4, #0]
 800a6b0:	bf18      	it	ne
 800a6b2:	6059      	strne	r1, [r3, #4]
 800a6b4:	6863      	ldr	r3, [r4, #4]
 800a6b6:	bf08      	it	eq
 800a6b8:	f8c8 1000 	streq.w	r1, [r8]
 800a6bc:	5162      	str	r2, [r4, r5]
 800a6be:	604b      	str	r3, [r1, #4]
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f000 f82f 	bl	800a724 <__malloc_unlock>
 800a6c6:	f104 000b 	add.w	r0, r4, #11
 800a6ca:	1d23      	adds	r3, r4, #4
 800a6cc:	f020 0007 	bic.w	r0, r0, #7
 800a6d0:	1ac2      	subs	r2, r0, r3
 800a6d2:	bf1c      	itt	ne
 800a6d4:	1a1b      	subne	r3, r3, r0
 800a6d6:	50a3      	strne	r3, [r4, r2]
 800a6d8:	e7af      	b.n	800a63a <_malloc_r+0x22>
 800a6da:	6862      	ldr	r2, [r4, #4]
 800a6dc:	42a3      	cmp	r3, r4
 800a6de:	bf0c      	ite	eq
 800a6e0:	f8c8 2000 	streq.w	r2, [r8]
 800a6e4:	605a      	strne	r2, [r3, #4]
 800a6e6:	e7eb      	b.n	800a6c0 <_malloc_r+0xa8>
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	6864      	ldr	r4, [r4, #4]
 800a6ec:	e7ae      	b.n	800a64c <_malloc_r+0x34>
 800a6ee:	463c      	mov	r4, r7
 800a6f0:	687f      	ldr	r7, [r7, #4]
 800a6f2:	e7b6      	b.n	800a662 <_malloc_r+0x4a>
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	42a3      	cmp	r3, r4
 800a6fa:	d1fb      	bne.n	800a6f4 <_malloc_r+0xdc>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	6053      	str	r3, [r2, #4]
 800a700:	e7de      	b.n	800a6c0 <_malloc_r+0xa8>
 800a702:	230c      	movs	r3, #12
 800a704:	6033      	str	r3, [r6, #0]
 800a706:	4630      	mov	r0, r6
 800a708:	f000 f80c 	bl	800a724 <__malloc_unlock>
 800a70c:	e794      	b.n	800a638 <_malloc_r+0x20>
 800a70e:	6005      	str	r5, [r0, #0]
 800a710:	e7d6      	b.n	800a6c0 <_malloc_r+0xa8>
 800a712:	bf00      	nop
 800a714:	20001254 	.word	0x20001254

0800a718 <__malloc_lock>:
 800a718:	4801      	ldr	r0, [pc, #4]	@ (800a720 <__malloc_lock+0x8>)
 800a71a:	f7ff bf0e 	b.w	800a53a <__retarget_lock_acquire_recursive>
 800a71e:	bf00      	nop
 800a720:	2000124c 	.word	0x2000124c

0800a724 <__malloc_unlock>:
 800a724:	4801      	ldr	r0, [pc, #4]	@ (800a72c <__malloc_unlock+0x8>)
 800a726:	f7ff bf09 	b.w	800a53c <__retarget_lock_release_recursive>
 800a72a:	bf00      	nop
 800a72c:	2000124c 	.word	0x2000124c

0800a730 <__sfputc_r>:
 800a730:	6893      	ldr	r3, [r2, #8]
 800a732:	3b01      	subs	r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	b410      	push	{r4}
 800a738:	6093      	str	r3, [r2, #8]
 800a73a:	da08      	bge.n	800a74e <__sfputc_r+0x1e>
 800a73c:	6994      	ldr	r4, [r2, #24]
 800a73e:	42a3      	cmp	r3, r4
 800a740:	db01      	blt.n	800a746 <__sfputc_r+0x16>
 800a742:	290a      	cmp	r1, #10
 800a744:	d103      	bne.n	800a74e <__sfputc_r+0x1e>
 800a746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a74a:	f7ff bde8 	b.w	800a31e <__swbuf_r>
 800a74e:	6813      	ldr	r3, [r2, #0]
 800a750:	1c58      	adds	r0, r3, #1
 800a752:	6010      	str	r0, [r2, #0]
 800a754:	7019      	strb	r1, [r3, #0]
 800a756:	4608      	mov	r0, r1
 800a758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <__sfputs_r>:
 800a75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a760:	4606      	mov	r6, r0
 800a762:	460f      	mov	r7, r1
 800a764:	4614      	mov	r4, r2
 800a766:	18d5      	adds	r5, r2, r3
 800a768:	42ac      	cmp	r4, r5
 800a76a:	d101      	bne.n	800a770 <__sfputs_r+0x12>
 800a76c:	2000      	movs	r0, #0
 800a76e:	e007      	b.n	800a780 <__sfputs_r+0x22>
 800a770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a774:	463a      	mov	r2, r7
 800a776:	4630      	mov	r0, r6
 800a778:	f7ff ffda 	bl	800a730 <__sfputc_r>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d1f3      	bne.n	800a768 <__sfputs_r+0xa>
 800a780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a784 <_vfiprintf_r>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	460d      	mov	r5, r1
 800a78a:	b09d      	sub	sp, #116	@ 0x74
 800a78c:	4614      	mov	r4, r2
 800a78e:	4698      	mov	r8, r3
 800a790:	4606      	mov	r6, r0
 800a792:	b118      	cbz	r0, 800a79c <_vfiprintf_r+0x18>
 800a794:	6a03      	ldr	r3, [r0, #32]
 800a796:	b90b      	cbnz	r3, 800a79c <_vfiprintf_r+0x18>
 800a798:	f7ff fcd8 	bl	800a14c <__sinit>
 800a79c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a79e:	07d9      	lsls	r1, r3, #31
 800a7a0:	d405      	bmi.n	800a7ae <_vfiprintf_r+0x2a>
 800a7a2:	89ab      	ldrh	r3, [r5, #12]
 800a7a4:	059a      	lsls	r2, r3, #22
 800a7a6:	d402      	bmi.n	800a7ae <_vfiprintf_r+0x2a>
 800a7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7aa:	f7ff fec6 	bl	800a53a <__retarget_lock_acquire_recursive>
 800a7ae:	89ab      	ldrh	r3, [r5, #12]
 800a7b0:	071b      	lsls	r3, r3, #28
 800a7b2:	d501      	bpl.n	800a7b8 <_vfiprintf_r+0x34>
 800a7b4:	692b      	ldr	r3, [r5, #16]
 800a7b6:	b99b      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x5c>
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff fdee 	bl	800a39c <__swsetup_r>
 800a7c0:	b170      	cbz	r0, 800a7e0 <_vfiprintf_r+0x5c>
 800a7c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7c4:	07dc      	lsls	r4, r3, #31
 800a7c6:	d504      	bpl.n	800a7d2 <_vfiprintf_r+0x4e>
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	b01d      	add	sp, #116	@ 0x74
 800a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d2:	89ab      	ldrh	r3, [r5, #12]
 800a7d4:	0598      	lsls	r0, r3, #22
 800a7d6:	d4f7      	bmi.n	800a7c8 <_vfiprintf_r+0x44>
 800a7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7da:	f7ff feaf 	bl	800a53c <__retarget_lock_release_recursive>
 800a7de:	e7f3      	b.n	800a7c8 <_vfiprintf_r+0x44>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7e4:	2320      	movs	r3, #32
 800a7e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ee:	2330      	movs	r3, #48	@ 0x30
 800a7f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a9a0 <_vfiprintf_r+0x21c>
 800a7f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7f8:	f04f 0901 	mov.w	r9, #1
 800a7fc:	4623      	mov	r3, r4
 800a7fe:	469a      	mov	sl, r3
 800a800:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a804:	b10a      	cbz	r2, 800a80a <_vfiprintf_r+0x86>
 800a806:	2a25      	cmp	r2, #37	@ 0x25
 800a808:	d1f9      	bne.n	800a7fe <_vfiprintf_r+0x7a>
 800a80a:	ebba 0b04 	subs.w	fp, sl, r4
 800a80e:	d00b      	beq.n	800a828 <_vfiprintf_r+0xa4>
 800a810:	465b      	mov	r3, fp
 800a812:	4622      	mov	r2, r4
 800a814:	4629      	mov	r1, r5
 800a816:	4630      	mov	r0, r6
 800a818:	f7ff ffa1 	bl	800a75e <__sfputs_r>
 800a81c:	3001      	adds	r0, #1
 800a81e:	f000 80a7 	beq.w	800a970 <_vfiprintf_r+0x1ec>
 800a822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a824:	445a      	add	r2, fp
 800a826:	9209      	str	r2, [sp, #36]	@ 0x24
 800a828:	f89a 3000 	ldrb.w	r3, [sl]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 809f 	beq.w	800a970 <_vfiprintf_r+0x1ec>
 800a832:	2300      	movs	r3, #0
 800a834:	f04f 32ff 	mov.w	r2, #4294967295
 800a838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a83c:	f10a 0a01 	add.w	sl, sl, #1
 800a840:	9304      	str	r3, [sp, #16]
 800a842:	9307      	str	r3, [sp, #28]
 800a844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a848:	931a      	str	r3, [sp, #104]	@ 0x68
 800a84a:	4654      	mov	r4, sl
 800a84c:	2205      	movs	r2, #5
 800a84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a852:	4853      	ldr	r0, [pc, #332]	@ (800a9a0 <_vfiprintf_r+0x21c>)
 800a854:	f7f5 fce4 	bl	8000220 <memchr>
 800a858:	9a04      	ldr	r2, [sp, #16]
 800a85a:	b9d8      	cbnz	r0, 800a894 <_vfiprintf_r+0x110>
 800a85c:	06d1      	lsls	r1, r2, #27
 800a85e:	bf44      	itt	mi
 800a860:	2320      	movmi	r3, #32
 800a862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a866:	0713      	lsls	r3, r2, #28
 800a868:	bf44      	itt	mi
 800a86a:	232b      	movmi	r3, #43	@ 0x2b
 800a86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a870:	f89a 3000 	ldrb.w	r3, [sl]
 800a874:	2b2a      	cmp	r3, #42	@ 0x2a
 800a876:	d015      	beq.n	800a8a4 <_vfiprintf_r+0x120>
 800a878:	9a07      	ldr	r2, [sp, #28]
 800a87a:	4654      	mov	r4, sl
 800a87c:	2000      	movs	r0, #0
 800a87e:	f04f 0c0a 	mov.w	ip, #10
 800a882:	4621      	mov	r1, r4
 800a884:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a888:	3b30      	subs	r3, #48	@ 0x30
 800a88a:	2b09      	cmp	r3, #9
 800a88c:	d94b      	bls.n	800a926 <_vfiprintf_r+0x1a2>
 800a88e:	b1b0      	cbz	r0, 800a8be <_vfiprintf_r+0x13a>
 800a890:	9207      	str	r2, [sp, #28]
 800a892:	e014      	b.n	800a8be <_vfiprintf_r+0x13a>
 800a894:	eba0 0308 	sub.w	r3, r0, r8
 800a898:	fa09 f303 	lsl.w	r3, r9, r3
 800a89c:	4313      	orrs	r3, r2
 800a89e:	9304      	str	r3, [sp, #16]
 800a8a0:	46a2      	mov	sl, r4
 800a8a2:	e7d2      	b.n	800a84a <_vfiprintf_r+0xc6>
 800a8a4:	9b03      	ldr	r3, [sp, #12]
 800a8a6:	1d19      	adds	r1, r3, #4
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	9103      	str	r1, [sp, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	bfbb      	ittet	lt
 800a8b0:	425b      	neglt	r3, r3
 800a8b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a8b6:	9307      	strge	r3, [sp, #28]
 800a8b8:	9307      	strlt	r3, [sp, #28]
 800a8ba:	bfb8      	it	lt
 800a8bc:	9204      	strlt	r2, [sp, #16]
 800a8be:	7823      	ldrb	r3, [r4, #0]
 800a8c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8c2:	d10a      	bne.n	800a8da <_vfiprintf_r+0x156>
 800a8c4:	7863      	ldrb	r3, [r4, #1]
 800a8c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8c8:	d132      	bne.n	800a930 <_vfiprintf_r+0x1ac>
 800a8ca:	9b03      	ldr	r3, [sp, #12]
 800a8cc:	1d1a      	adds	r2, r3, #4
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	9203      	str	r2, [sp, #12]
 800a8d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8d6:	3402      	adds	r4, #2
 800a8d8:	9305      	str	r3, [sp, #20]
 800a8da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9b0 <_vfiprintf_r+0x22c>
 800a8de:	7821      	ldrb	r1, [r4, #0]
 800a8e0:	2203      	movs	r2, #3
 800a8e2:	4650      	mov	r0, sl
 800a8e4:	f7f5 fc9c 	bl	8000220 <memchr>
 800a8e8:	b138      	cbz	r0, 800a8fa <_vfiprintf_r+0x176>
 800a8ea:	9b04      	ldr	r3, [sp, #16]
 800a8ec:	eba0 000a 	sub.w	r0, r0, sl
 800a8f0:	2240      	movs	r2, #64	@ 0x40
 800a8f2:	4082      	lsls	r2, r0
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	3401      	adds	r4, #1
 800a8f8:	9304      	str	r3, [sp, #16]
 800a8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8fe:	4829      	ldr	r0, [pc, #164]	@ (800a9a4 <_vfiprintf_r+0x220>)
 800a900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a904:	2206      	movs	r2, #6
 800a906:	f7f5 fc8b 	bl	8000220 <memchr>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d03f      	beq.n	800a98e <_vfiprintf_r+0x20a>
 800a90e:	4b26      	ldr	r3, [pc, #152]	@ (800a9a8 <_vfiprintf_r+0x224>)
 800a910:	bb1b      	cbnz	r3, 800a95a <_vfiprintf_r+0x1d6>
 800a912:	9b03      	ldr	r3, [sp, #12]
 800a914:	3307      	adds	r3, #7
 800a916:	f023 0307 	bic.w	r3, r3, #7
 800a91a:	3308      	adds	r3, #8
 800a91c:	9303      	str	r3, [sp, #12]
 800a91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a920:	443b      	add	r3, r7
 800a922:	9309      	str	r3, [sp, #36]	@ 0x24
 800a924:	e76a      	b.n	800a7fc <_vfiprintf_r+0x78>
 800a926:	fb0c 3202 	mla	r2, ip, r2, r3
 800a92a:	460c      	mov	r4, r1
 800a92c:	2001      	movs	r0, #1
 800a92e:	e7a8      	b.n	800a882 <_vfiprintf_r+0xfe>
 800a930:	2300      	movs	r3, #0
 800a932:	3401      	adds	r4, #1
 800a934:	9305      	str	r3, [sp, #20]
 800a936:	4619      	mov	r1, r3
 800a938:	f04f 0c0a 	mov.w	ip, #10
 800a93c:	4620      	mov	r0, r4
 800a93e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a942:	3a30      	subs	r2, #48	@ 0x30
 800a944:	2a09      	cmp	r2, #9
 800a946:	d903      	bls.n	800a950 <_vfiprintf_r+0x1cc>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0c6      	beq.n	800a8da <_vfiprintf_r+0x156>
 800a94c:	9105      	str	r1, [sp, #20]
 800a94e:	e7c4      	b.n	800a8da <_vfiprintf_r+0x156>
 800a950:	fb0c 2101 	mla	r1, ip, r1, r2
 800a954:	4604      	mov	r4, r0
 800a956:	2301      	movs	r3, #1
 800a958:	e7f0      	b.n	800a93c <_vfiprintf_r+0x1b8>
 800a95a:	ab03      	add	r3, sp, #12
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	462a      	mov	r2, r5
 800a960:	4b12      	ldr	r3, [pc, #72]	@ (800a9ac <_vfiprintf_r+0x228>)
 800a962:	a904      	add	r1, sp, #16
 800a964:	4630      	mov	r0, r6
 800a966:	f3af 8000 	nop.w
 800a96a:	4607      	mov	r7, r0
 800a96c:	1c78      	adds	r0, r7, #1
 800a96e:	d1d6      	bne.n	800a91e <_vfiprintf_r+0x19a>
 800a970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a972:	07d9      	lsls	r1, r3, #31
 800a974:	d405      	bmi.n	800a982 <_vfiprintf_r+0x1fe>
 800a976:	89ab      	ldrh	r3, [r5, #12]
 800a978:	059a      	lsls	r2, r3, #22
 800a97a:	d402      	bmi.n	800a982 <_vfiprintf_r+0x1fe>
 800a97c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a97e:	f7ff fddd 	bl	800a53c <__retarget_lock_release_recursive>
 800a982:	89ab      	ldrh	r3, [r5, #12]
 800a984:	065b      	lsls	r3, r3, #25
 800a986:	f53f af1f 	bmi.w	800a7c8 <_vfiprintf_r+0x44>
 800a98a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a98c:	e71e      	b.n	800a7cc <_vfiprintf_r+0x48>
 800a98e:	ab03      	add	r3, sp, #12
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	462a      	mov	r2, r5
 800a994:	4b05      	ldr	r3, [pc, #20]	@ (800a9ac <_vfiprintf_r+0x228>)
 800a996:	a904      	add	r1, sp, #16
 800a998:	4630      	mov	r0, r6
 800a99a:	f000 f879 	bl	800aa90 <_printf_i>
 800a99e:	e7e4      	b.n	800a96a <_vfiprintf_r+0x1e6>
 800a9a0:	0800b284 	.word	0x0800b284
 800a9a4:	0800b28e 	.word	0x0800b28e
 800a9a8:	00000000 	.word	0x00000000
 800a9ac:	0800a75f 	.word	0x0800a75f
 800a9b0:	0800b28a 	.word	0x0800b28a

0800a9b4 <_printf_common>:
 800a9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b8:	4616      	mov	r6, r2
 800a9ba:	4698      	mov	r8, r3
 800a9bc:	688a      	ldr	r2, [r1, #8]
 800a9be:	690b      	ldr	r3, [r1, #16]
 800a9c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	bfb8      	it	lt
 800a9c8:	4613      	movlt	r3, r2
 800a9ca:	6033      	str	r3, [r6, #0]
 800a9cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	b10a      	cbz	r2, 800a9da <_printf_common+0x26>
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	6033      	str	r3, [r6, #0]
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	0699      	lsls	r1, r3, #26
 800a9de:	bf42      	ittt	mi
 800a9e0:	6833      	ldrmi	r3, [r6, #0]
 800a9e2:	3302      	addmi	r3, #2
 800a9e4:	6033      	strmi	r3, [r6, #0]
 800a9e6:	6825      	ldr	r5, [r4, #0]
 800a9e8:	f015 0506 	ands.w	r5, r5, #6
 800a9ec:	d106      	bne.n	800a9fc <_printf_common+0x48>
 800a9ee:	f104 0a19 	add.w	sl, r4, #25
 800a9f2:	68e3      	ldr	r3, [r4, #12]
 800a9f4:	6832      	ldr	r2, [r6, #0]
 800a9f6:	1a9b      	subs	r3, r3, r2
 800a9f8:	42ab      	cmp	r3, r5
 800a9fa:	dc26      	bgt.n	800aa4a <_printf_common+0x96>
 800a9fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa00:	6822      	ldr	r2, [r4, #0]
 800aa02:	3b00      	subs	r3, #0
 800aa04:	bf18      	it	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	0692      	lsls	r2, r2, #26
 800aa0a:	d42b      	bmi.n	800aa64 <_printf_common+0xb0>
 800aa0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa10:	4641      	mov	r1, r8
 800aa12:	4638      	mov	r0, r7
 800aa14:	47c8      	blx	r9
 800aa16:	3001      	adds	r0, #1
 800aa18:	d01e      	beq.n	800aa58 <_printf_common+0xa4>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	6922      	ldr	r2, [r4, #16]
 800aa1e:	f003 0306 	and.w	r3, r3, #6
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	bf02      	ittt	eq
 800aa26:	68e5      	ldreq	r5, [r4, #12]
 800aa28:	6833      	ldreq	r3, [r6, #0]
 800aa2a:	1aed      	subeq	r5, r5, r3
 800aa2c:	68a3      	ldr	r3, [r4, #8]
 800aa2e:	bf0c      	ite	eq
 800aa30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa34:	2500      	movne	r5, #0
 800aa36:	4293      	cmp	r3, r2
 800aa38:	bfc4      	itt	gt
 800aa3a:	1a9b      	subgt	r3, r3, r2
 800aa3c:	18ed      	addgt	r5, r5, r3
 800aa3e:	2600      	movs	r6, #0
 800aa40:	341a      	adds	r4, #26
 800aa42:	42b5      	cmp	r5, r6
 800aa44:	d11a      	bne.n	800aa7c <_printf_common+0xc8>
 800aa46:	2000      	movs	r0, #0
 800aa48:	e008      	b.n	800aa5c <_printf_common+0xa8>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	4641      	mov	r1, r8
 800aa50:	4638      	mov	r0, r7
 800aa52:	47c8      	blx	r9
 800aa54:	3001      	adds	r0, #1
 800aa56:	d103      	bne.n	800aa60 <_printf_common+0xac>
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa60:	3501      	adds	r5, #1
 800aa62:	e7c6      	b.n	800a9f2 <_printf_common+0x3e>
 800aa64:	18e1      	adds	r1, r4, r3
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	2030      	movs	r0, #48	@ 0x30
 800aa6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa6e:	4422      	add	r2, r4
 800aa70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa78:	3302      	adds	r3, #2
 800aa7a:	e7c7      	b.n	800aa0c <_printf_common+0x58>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	4622      	mov	r2, r4
 800aa80:	4641      	mov	r1, r8
 800aa82:	4638      	mov	r0, r7
 800aa84:	47c8      	blx	r9
 800aa86:	3001      	adds	r0, #1
 800aa88:	d0e6      	beq.n	800aa58 <_printf_common+0xa4>
 800aa8a:	3601      	adds	r6, #1
 800aa8c:	e7d9      	b.n	800aa42 <_printf_common+0x8e>
	...

0800aa90 <_printf_i>:
 800aa90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa94:	7e0f      	ldrb	r7, [r1, #24]
 800aa96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa98:	2f78      	cmp	r7, #120	@ 0x78
 800aa9a:	4691      	mov	r9, r2
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	469a      	mov	sl, r3
 800aaa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aaa6:	d807      	bhi.n	800aab8 <_printf_i+0x28>
 800aaa8:	2f62      	cmp	r7, #98	@ 0x62
 800aaaa:	d80a      	bhi.n	800aac2 <_printf_i+0x32>
 800aaac:	2f00      	cmp	r7, #0
 800aaae:	f000 80d1 	beq.w	800ac54 <_printf_i+0x1c4>
 800aab2:	2f58      	cmp	r7, #88	@ 0x58
 800aab4:	f000 80b8 	beq.w	800ac28 <_printf_i+0x198>
 800aab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aabc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aac0:	e03a      	b.n	800ab38 <_printf_i+0xa8>
 800aac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aac6:	2b15      	cmp	r3, #21
 800aac8:	d8f6      	bhi.n	800aab8 <_printf_i+0x28>
 800aaca:	a101      	add	r1, pc, #4	@ (adr r1, 800aad0 <_printf_i+0x40>)
 800aacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aad0:	0800ab29 	.word	0x0800ab29
 800aad4:	0800ab3d 	.word	0x0800ab3d
 800aad8:	0800aab9 	.word	0x0800aab9
 800aadc:	0800aab9 	.word	0x0800aab9
 800aae0:	0800aab9 	.word	0x0800aab9
 800aae4:	0800aab9 	.word	0x0800aab9
 800aae8:	0800ab3d 	.word	0x0800ab3d
 800aaec:	0800aab9 	.word	0x0800aab9
 800aaf0:	0800aab9 	.word	0x0800aab9
 800aaf4:	0800aab9 	.word	0x0800aab9
 800aaf8:	0800aab9 	.word	0x0800aab9
 800aafc:	0800ac3b 	.word	0x0800ac3b
 800ab00:	0800ab67 	.word	0x0800ab67
 800ab04:	0800abf5 	.word	0x0800abf5
 800ab08:	0800aab9 	.word	0x0800aab9
 800ab0c:	0800aab9 	.word	0x0800aab9
 800ab10:	0800ac5d 	.word	0x0800ac5d
 800ab14:	0800aab9 	.word	0x0800aab9
 800ab18:	0800ab67 	.word	0x0800ab67
 800ab1c:	0800aab9 	.word	0x0800aab9
 800ab20:	0800aab9 	.word	0x0800aab9
 800ab24:	0800abfd 	.word	0x0800abfd
 800ab28:	6833      	ldr	r3, [r6, #0]
 800ab2a:	1d1a      	adds	r2, r3, #4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6032      	str	r2, [r6, #0]
 800ab30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e09c      	b.n	800ac76 <_printf_i+0x1e6>
 800ab3c:	6833      	ldr	r3, [r6, #0]
 800ab3e:	6820      	ldr	r0, [r4, #0]
 800ab40:	1d19      	adds	r1, r3, #4
 800ab42:	6031      	str	r1, [r6, #0]
 800ab44:	0606      	lsls	r6, r0, #24
 800ab46:	d501      	bpl.n	800ab4c <_printf_i+0xbc>
 800ab48:	681d      	ldr	r5, [r3, #0]
 800ab4a:	e003      	b.n	800ab54 <_printf_i+0xc4>
 800ab4c:	0645      	lsls	r5, r0, #25
 800ab4e:	d5fb      	bpl.n	800ab48 <_printf_i+0xb8>
 800ab50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab54:	2d00      	cmp	r5, #0
 800ab56:	da03      	bge.n	800ab60 <_printf_i+0xd0>
 800ab58:	232d      	movs	r3, #45	@ 0x2d
 800ab5a:	426d      	negs	r5, r5
 800ab5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab60:	4858      	ldr	r0, [pc, #352]	@ (800acc4 <_printf_i+0x234>)
 800ab62:	230a      	movs	r3, #10
 800ab64:	e011      	b.n	800ab8a <_printf_i+0xfa>
 800ab66:	6821      	ldr	r1, [r4, #0]
 800ab68:	6833      	ldr	r3, [r6, #0]
 800ab6a:	0608      	lsls	r0, r1, #24
 800ab6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab70:	d402      	bmi.n	800ab78 <_printf_i+0xe8>
 800ab72:	0649      	lsls	r1, r1, #25
 800ab74:	bf48      	it	mi
 800ab76:	b2ad      	uxthmi	r5, r5
 800ab78:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab7a:	4852      	ldr	r0, [pc, #328]	@ (800acc4 <_printf_i+0x234>)
 800ab7c:	6033      	str	r3, [r6, #0]
 800ab7e:	bf14      	ite	ne
 800ab80:	230a      	movne	r3, #10
 800ab82:	2308      	moveq	r3, #8
 800ab84:	2100      	movs	r1, #0
 800ab86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab8a:	6866      	ldr	r6, [r4, #4]
 800ab8c:	60a6      	str	r6, [r4, #8]
 800ab8e:	2e00      	cmp	r6, #0
 800ab90:	db05      	blt.n	800ab9e <_printf_i+0x10e>
 800ab92:	6821      	ldr	r1, [r4, #0]
 800ab94:	432e      	orrs	r6, r5
 800ab96:	f021 0104 	bic.w	r1, r1, #4
 800ab9a:	6021      	str	r1, [r4, #0]
 800ab9c:	d04b      	beq.n	800ac36 <_printf_i+0x1a6>
 800ab9e:	4616      	mov	r6, r2
 800aba0:	fbb5 f1f3 	udiv	r1, r5, r3
 800aba4:	fb03 5711 	mls	r7, r3, r1, r5
 800aba8:	5dc7      	ldrb	r7, [r0, r7]
 800abaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abae:	462f      	mov	r7, r5
 800abb0:	42bb      	cmp	r3, r7
 800abb2:	460d      	mov	r5, r1
 800abb4:	d9f4      	bls.n	800aba0 <_printf_i+0x110>
 800abb6:	2b08      	cmp	r3, #8
 800abb8:	d10b      	bne.n	800abd2 <_printf_i+0x142>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	07df      	lsls	r7, r3, #31
 800abbe:	d508      	bpl.n	800abd2 <_printf_i+0x142>
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	6861      	ldr	r1, [r4, #4]
 800abc4:	4299      	cmp	r1, r3
 800abc6:	bfde      	ittt	le
 800abc8:	2330      	movle	r3, #48	@ 0x30
 800abca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abd2:	1b92      	subs	r2, r2, r6
 800abd4:	6122      	str	r2, [r4, #16]
 800abd6:	f8cd a000 	str.w	sl, [sp]
 800abda:	464b      	mov	r3, r9
 800abdc:	aa03      	add	r2, sp, #12
 800abde:	4621      	mov	r1, r4
 800abe0:	4640      	mov	r0, r8
 800abe2:	f7ff fee7 	bl	800a9b4 <_printf_common>
 800abe6:	3001      	adds	r0, #1
 800abe8:	d14a      	bne.n	800ac80 <_printf_i+0x1f0>
 800abea:	f04f 30ff 	mov.w	r0, #4294967295
 800abee:	b004      	add	sp, #16
 800abf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf4:	6823      	ldr	r3, [r4, #0]
 800abf6:	f043 0320 	orr.w	r3, r3, #32
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	4832      	ldr	r0, [pc, #200]	@ (800acc8 <_printf_i+0x238>)
 800abfe:	2778      	movs	r7, #120	@ 0x78
 800ac00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	6831      	ldr	r1, [r6, #0]
 800ac08:	061f      	lsls	r7, r3, #24
 800ac0a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac0e:	d402      	bmi.n	800ac16 <_printf_i+0x186>
 800ac10:	065f      	lsls	r7, r3, #25
 800ac12:	bf48      	it	mi
 800ac14:	b2ad      	uxthmi	r5, r5
 800ac16:	6031      	str	r1, [r6, #0]
 800ac18:	07d9      	lsls	r1, r3, #31
 800ac1a:	bf44      	itt	mi
 800ac1c:	f043 0320 	orrmi.w	r3, r3, #32
 800ac20:	6023      	strmi	r3, [r4, #0]
 800ac22:	b11d      	cbz	r5, 800ac2c <_printf_i+0x19c>
 800ac24:	2310      	movs	r3, #16
 800ac26:	e7ad      	b.n	800ab84 <_printf_i+0xf4>
 800ac28:	4826      	ldr	r0, [pc, #152]	@ (800acc4 <_printf_i+0x234>)
 800ac2a:	e7e9      	b.n	800ac00 <_printf_i+0x170>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	f023 0320 	bic.w	r3, r3, #32
 800ac32:	6023      	str	r3, [r4, #0]
 800ac34:	e7f6      	b.n	800ac24 <_printf_i+0x194>
 800ac36:	4616      	mov	r6, r2
 800ac38:	e7bd      	b.n	800abb6 <_printf_i+0x126>
 800ac3a:	6833      	ldr	r3, [r6, #0]
 800ac3c:	6825      	ldr	r5, [r4, #0]
 800ac3e:	6961      	ldr	r1, [r4, #20]
 800ac40:	1d18      	adds	r0, r3, #4
 800ac42:	6030      	str	r0, [r6, #0]
 800ac44:	062e      	lsls	r6, r5, #24
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	d501      	bpl.n	800ac4e <_printf_i+0x1be>
 800ac4a:	6019      	str	r1, [r3, #0]
 800ac4c:	e002      	b.n	800ac54 <_printf_i+0x1c4>
 800ac4e:	0668      	lsls	r0, r5, #25
 800ac50:	d5fb      	bpl.n	800ac4a <_printf_i+0x1ba>
 800ac52:	8019      	strh	r1, [r3, #0]
 800ac54:	2300      	movs	r3, #0
 800ac56:	6123      	str	r3, [r4, #16]
 800ac58:	4616      	mov	r6, r2
 800ac5a:	e7bc      	b.n	800abd6 <_printf_i+0x146>
 800ac5c:	6833      	ldr	r3, [r6, #0]
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	6032      	str	r2, [r6, #0]
 800ac62:	681e      	ldr	r6, [r3, #0]
 800ac64:	6862      	ldr	r2, [r4, #4]
 800ac66:	2100      	movs	r1, #0
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f7f5 fad9 	bl	8000220 <memchr>
 800ac6e:	b108      	cbz	r0, 800ac74 <_printf_i+0x1e4>
 800ac70:	1b80      	subs	r0, r0, r6
 800ac72:	6060      	str	r0, [r4, #4]
 800ac74:	6863      	ldr	r3, [r4, #4]
 800ac76:	6123      	str	r3, [r4, #16]
 800ac78:	2300      	movs	r3, #0
 800ac7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac7e:	e7aa      	b.n	800abd6 <_printf_i+0x146>
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	4632      	mov	r2, r6
 800ac84:	4649      	mov	r1, r9
 800ac86:	4640      	mov	r0, r8
 800ac88:	47d0      	blx	sl
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d0ad      	beq.n	800abea <_printf_i+0x15a>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	079b      	lsls	r3, r3, #30
 800ac92:	d413      	bmi.n	800acbc <_printf_i+0x22c>
 800ac94:	68e0      	ldr	r0, [r4, #12]
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	4298      	cmp	r0, r3
 800ac9a:	bfb8      	it	lt
 800ac9c:	4618      	movlt	r0, r3
 800ac9e:	e7a6      	b.n	800abee <_printf_i+0x15e>
 800aca0:	2301      	movs	r3, #1
 800aca2:	4632      	mov	r2, r6
 800aca4:	4649      	mov	r1, r9
 800aca6:	4640      	mov	r0, r8
 800aca8:	47d0      	blx	sl
 800acaa:	3001      	adds	r0, #1
 800acac:	d09d      	beq.n	800abea <_printf_i+0x15a>
 800acae:	3501      	adds	r5, #1
 800acb0:	68e3      	ldr	r3, [r4, #12]
 800acb2:	9903      	ldr	r1, [sp, #12]
 800acb4:	1a5b      	subs	r3, r3, r1
 800acb6:	42ab      	cmp	r3, r5
 800acb8:	dcf2      	bgt.n	800aca0 <_printf_i+0x210>
 800acba:	e7eb      	b.n	800ac94 <_printf_i+0x204>
 800acbc:	2500      	movs	r5, #0
 800acbe:	f104 0619 	add.w	r6, r4, #25
 800acc2:	e7f5      	b.n	800acb0 <_printf_i+0x220>
 800acc4:	0800b295 	.word	0x0800b295
 800acc8:	0800b2a6 	.word	0x0800b2a6

0800accc <__sflush_r>:
 800accc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	0716      	lsls	r6, r2, #28
 800acd6:	4605      	mov	r5, r0
 800acd8:	460c      	mov	r4, r1
 800acda:	d454      	bmi.n	800ad86 <__sflush_r+0xba>
 800acdc:	684b      	ldr	r3, [r1, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dc02      	bgt.n	800ace8 <__sflush_r+0x1c>
 800ace2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd48      	ble.n	800ad7a <__sflush_r+0xae>
 800ace8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800acea:	2e00      	cmp	r6, #0
 800acec:	d045      	beq.n	800ad7a <__sflush_r+0xae>
 800acee:	2300      	movs	r3, #0
 800acf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800acf4:	682f      	ldr	r7, [r5, #0]
 800acf6:	6a21      	ldr	r1, [r4, #32]
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	d030      	beq.n	800ad5e <__sflush_r+0x92>
 800acfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	0759      	lsls	r1, r3, #29
 800ad02:	d505      	bpl.n	800ad10 <__sflush_r+0x44>
 800ad04:	6863      	ldr	r3, [r4, #4]
 800ad06:	1ad2      	subs	r2, r2, r3
 800ad08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad0a:	b10b      	cbz	r3, 800ad10 <__sflush_r+0x44>
 800ad0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad0e:	1ad2      	subs	r2, r2, r3
 800ad10:	2300      	movs	r3, #0
 800ad12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad14:	6a21      	ldr	r1, [r4, #32]
 800ad16:	4628      	mov	r0, r5
 800ad18:	47b0      	blx	r6
 800ad1a:	1c43      	adds	r3, r0, #1
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	d106      	bne.n	800ad2e <__sflush_r+0x62>
 800ad20:	6829      	ldr	r1, [r5, #0]
 800ad22:	291d      	cmp	r1, #29
 800ad24:	d82b      	bhi.n	800ad7e <__sflush_r+0xb2>
 800ad26:	4a2a      	ldr	r2, [pc, #168]	@ (800add0 <__sflush_r+0x104>)
 800ad28:	40ca      	lsrs	r2, r1
 800ad2a:	07d6      	lsls	r6, r2, #31
 800ad2c:	d527      	bpl.n	800ad7e <__sflush_r+0xb2>
 800ad2e:	2200      	movs	r2, #0
 800ad30:	6062      	str	r2, [r4, #4]
 800ad32:	04d9      	lsls	r1, r3, #19
 800ad34:	6922      	ldr	r2, [r4, #16]
 800ad36:	6022      	str	r2, [r4, #0]
 800ad38:	d504      	bpl.n	800ad44 <__sflush_r+0x78>
 800ad3a:	1c42      	adds	r2, r0, #1
 800ad3c:	d101      	bne.n	800ad42 <__sflush_r+0x76>
 800ad3e:	682b      	ldr	r3, [r5, #0]
 800ad40:	b903      	cbnz	r3, 800ad44 <__sflush_r+0x78>
 800ad42:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad46:	602f      	str	r7, [r5, #0]
 800ad48:	b1b9      	cbz	r1, 800ad7a <__sflush_r+0xae>
 800ad4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad4e:	4299      	cmp	r1, r3
 800ad50:	d002      	beq.n	800ad58 <__sflush_r+0x8c>
 800ad52:	4628      	mov	r0, r5
 800ad54:	f7ff fbf4 	bl	800a540 <_free_r>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad5c:	e00d      	b.n	800ad7a <__sflush_r+0xae>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	4628      	mov	r0, r5
 800ad62:	47b0      	blx	r6
 800ad64:	4602      	mov	r2, r0
 800ad66:	1c50      	adds	r0, r2, #1
 800ad68:	d1c9      	bne.n	800acfe <__sflush_r+0x32>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d0c6      	beq.n	800acfe <__sflush_r+0x32>
 800ad70:	2b1d      	cmp	r3, #29
 800ad72:	d001      	beq.n	800ad78 <__sflush_r+0xac>
 800ad74:	2b16      	cmp	r3, #22
 800ad76:	d11e      	bne.n	800adb6 <__sflush_r+0xea>
 800ad78:	602f      	str	r7, [r5, #0]
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	e022      	b.n	800adc4 <__sflush_r+0xf8>
 800ad7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad82:	b21b      	sxth	r3, r3
 800ad84:	e01b      	b.n	800adbe <__sflush_r+0xf2>
 800ad86:	690f      	ldr	r7, [r1, #16]
 800ad88:	2f00      	cmp	r7, #0
 800ad8a:	d0f6      	beq.n	800ad7a <__sflush_r+0xae>
 800ad8c:	0793      	lsls	r3, r2, #30
 800ad8e:	680e      	ldr	r6, [r1, #0]
 800ad90:	bf08      	it	eq
 800ad92:	694b      	ldreq	r3, [r1, #20]
 800ad94:	600f      	str	r7, [r1, #0]
 800ad96:	bf18      	it	ne
 800ad98:	2300      	movne	r3, #0
 800ad9a:	eba6 0807 	sub.w	r8, r6, r7
 800ad9e:	608b      	str	r3, [r1, #8]
 800ada0:	f1b8 0f00 	cmp.w	r8, #0
 800ada4:	dde9      	ble.n	800ad7a <__sflush_r+0xae>
 800ada6:	6a21      	ldr	r1, [r4, #32]
 800ada8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800adaa:	4643      	mov	r3, r8
 800adac:	463a      	mov	r2, r7
 800adae:	4628      	mov	r0, r5
 800adb0:	47b0      	blx	r6
 800adb2:	2800      	cmp	r0, #0
 800adb4:	dc08      	bgt.n	800adc8 <__sflush_r+0xfc>
 800adb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adbe:	81a3      	strh	r3, [r4, #12]
 800adc0:	f04f 30ff 	mov.w	r0, #4294967295
 800adc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc8:	4407      	add	r7, r0
 800adca:	eba8 0800 	sub.w	r8, r8, r0
 800adce:	e7e7      	b.n	800ada0 <__sflush_r+0xd4>
 800add0:	20400001 	.word	0x20400001

0800add4 <_fflush_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	690b      	ldr	r3, [r1, #16]
 800add8:	4605      	mov	r5, r0
 800adda:	460c      	mov	r4, r1
 800addc:	b913      	cbnz	r3, 800ade4 <_fflush_r+0x10>
 800adde:	2500      	movs	r5, #0
 800ade0:	4628      	mov	r0, r5
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	b118      	cbz	r0, 800adee <_fflush_r+0x1a>
 800ade6:	6a03      	ldr	r3, [r0, #32]
 800ade8:	b90b      	cbnz	r3, 800adee <_fflush_r+0x1a>
 800adea:	f7ff f9af 	bl	800a14c <__sinit>
 800adee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0f3      	beq.n	800adde <_fflush_r+0xa>
 800adf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800adf8:	07d0      	lsls	r0, r2, #31
 800adfa:	d404      	bmi.n	800ae06 <_fflush_r+0x32>
 800adfc:	0599      	lsls	r1, r3, #22
 800adfe:	d402      	bmi.n	800ae06 <_fflush_r+0x32>
 800ae00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae02:	f7ff fb9a 	bl	800a53a <__retarget_lock_acquire_recursive>
 800ae06:	4628      	mov	r0, r5
 800ae08:	4621      	mov	r1, r4
 800ae0a:	f7ff ff5f 	bl	800accc <__sflush_r>
 800ae0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae10:	07da      	lsls	r2, r3, #31
 800ae12:	4605      	mov	r5, r0
 800ae14:	d4e4      	bmi.n	800ade0 <_fflush_r+0xc>
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	059b      	lsls	r3, r3, #22
 800ae1a:	d4e1      	bmi.n	800ade0 <_fflush_r+0xc>
 800ae1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae1e:	f7ff fb8d 	bl	800a53c <__retarget_lock_release_recursive>
 800ae22:	e7dd      	b.n	800ade0 <_fflush_r+0xc>

0800ae24 <__swhatbuf_r>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	460c      	mov	r4, r1
 800ae28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	b096      	sub	sp, #88	@ 0x58
 800ae30:	4615      	mov	r5, r2
 800ae32:	461e      	mov	r6, r3
 800ae34:	da0d      	bge.n	800ae52 <__swhatbuf_r+0x2e>
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae3c:	f04f 0100 	mov.w	r1, #0
 800ae40:	bf14      	ite	ne
 800ae42:	2340      	movne	r3, #64	@ 0x40
 800ae44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae48:	2000      	movs	r0, #0
 800ae4a:	6031      	str	r1, [r6, #0]
 800ae4c:	602b      	str	r3, [r5, #0]
 800ae4e:	b016      	add	sp, #88	@ 0x58
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	466a      	mov	r2, sp
 800ae54:	f000 f848 	bl	800aee8 <_fstat_r>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	dbec      	blt.n	800ae36 <__swhatbuf_r+0x12>
 800ae5c:	9901      	ldr	r1, [sp, #4]
 800ae5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae66:	4259      	negs	r1, r3
 800ae68:	4159      	adcs	r1, r3
 800ae6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae6e:	e7eb      	b.n	800ae48 <__swhatbuf_r+0x24>

0800ae70 <__smakebuf_r>:
 800ae70:	898b      	ldrh	r3, [r1, #12]
 800ae72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae74:	079d      	lsls	r5, r3, #30
 800ae76:	4606      	mov	r6, r0
 800ae78:	460c      	mov	r4, r1
 800ae7a:	d507      	bpl.n	800ae8c <__smakebuf_r+0x1c>
 800ae7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	6123      	str	r3, [r4, #16]
 800ae84:	2301      	movs	r3, #1
 800ae86:	6163      	str	r3, [r4, #20]
 800ae88:	b003      	add	sp, #12
 800ae8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae8c:	ab01      	add	r3, sp, #4
 800ae8e:	466a      	mov	r2, sp
 800ae90:	f7ff ffc8 	bl	800ae24 <__swhatbuf_r>
 800ae94:	9f00      	ldr	r7, [sp, #0]
 800ae96:	4605      	mov	r5, r0
 800ae98:	4639      	mov	r1, r7
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f7ff fbbc 	bl	800a618 <_malloc_r>
 800aea0:	b948      	cbnz	r0, 800aeb6 <__smakebuf_r+0x46>
 800aea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea6:	059a      	lsls	r2, r3, #22
 800aea8:	d4ee      	bmi.n	800ae88 <__smakebuf_r+0x18>
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	f043 0302 	orr.w	r3, r3, #2
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	e7e2      	b.n	800ae7c <__smakebuf_r+0xc>
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	6020      	str	r0, [r4, #0]
 800aeba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aec6:	b15b      	cbz	r3, 800aee0 <__smakebuf_r+0x70>
 800aec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aecc:	4630      	mov	r0, r6
 800aece:	f000 f81d 	bl	800af0c <_isatty_r>
 800aed2:	b128      	cbz	r0, 800aee0 <__smakebuf_r+0x70>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f023 0303 	bic.w	r3, r3, #3
 800aeda:	f043 0301 	orr.w	r3, r3, #1
 800aede:	81a3      	strh	r3, [r4, #12]
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	431d      	orrs	r5, r3
 800aee4:	81a5      	strh	r5, [r4, #12]
 800aee6:	e7cf      	b.n	800ae88 <__smakebuf_r+0x18>

0800aee8 <_fstat_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d07      	ldr	r5, [pc, #28]	@ (800af08 <_fstat_r+0x20>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	4611      	mov	r1, r2
 800aef4:	602b      	str	r3, [r5, #0]
 800aef6:	f7f6 f9aa 	bl	800124e <_fstat>
 800aefa:	1c43      	adds	r3, r0, #1
 800aefc:	d102      	bne.n	800af04 <_fstat_r+0x1c>
 800aefe:	682b      	ldr	r3, [r5, #0]
 800af00:	b103      	cbz	r3, 800af04 <_fstat_r+0x1c>
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	bf00      	nop
 800af08:	20001248 	.word	0x20001248

0800af0c <_isatty_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d06      	ldr	r5, [pc, #24]	@ (800af28 <_isatty_r+0x1c>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7f6 f9a9 	bl	800126e <_isatty>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_isatty_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_isatty_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20001248 	.word	0x20001248

0800af2c <_sbrk_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d06      	ldr	r5, [pc, #24]	@ (800af48 <_sbrk_r+0x1c>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	602b      	str	r3, [r5, #0]
 800af38:	f7f6 f9b2 	bl	80012a0 <_sbrk>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_sbrk_r+0x1a>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_sbrk_r+0x1a>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	20001248 	.word	0x20001248

0800af4c <_init>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr

0800af58 <_fini>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	bf00      	nop
 800af5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af5e:	bc08      	pop	{r3}
 800af60:	469e      	mov	lr, r3
 800af62:	4770      	bx	lr

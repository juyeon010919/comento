
Comento_I2C_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097cc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080099a4  080099a4  0000a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a6c  08009a6c  0000b0dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009a6c  08009a6c  0000aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a74  08009a74  0000b0dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a74  08009a74  0000aa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a78  08009a78  0000aa78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08009a7c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  200000dc  08009b58  0000b0dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  08009b58  0000c0ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181c4  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f5  00000000  00000000  000232d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00026cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100e  00000000  00000000  00028180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025932  00000000  00000000  0002918e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1db  00000000  00000000  0004eac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbdd3  00000000  00000000  0006ac9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005788  00000000  00000000  00146ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0014c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000dc 	.word	0x200000dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800998c 	.word	0x0800998c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e0 	.word	0x200000e0
 8000214:	0800998c 	.word	0x0800998c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fd2b 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f849 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f9fd 	bl	8000950 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f9d1 	bl	80008fc <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800055a:	f000 f901 	bl	8000760 <MX_CAN1_Init>
  MX_I2C1_Init();
 800055e:	f000 f933 	bl	80007c8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000562:	f000 f95f 	bl	8000824 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000566:	f000 f993 	bl	8000890 <MX_SPI3_Init>
  MX_ADC1_Init();
 800056a:	f000 f8a7 	bl	80006bc <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800056e:	f008 fd41 	bl	8008ff4 <MX_USB_DEVICE_Init>
  // Fault 상태 저장할 구조체 선언
  FaultStatus_t faultStatus;
  // MP5475의 REG_FAULT_STATUS1 (0x00번) 레지스터 읽기
  HAL_I2C_Mem_Read(
 8000572:	2364      	movs	r3, #100	@ 0x64
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	2301      	movs	r3, #1
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2301      	movs	r3, #1
 8000582:	2200      	movs	r2, #0
 8000584:	21c0      	movs	r1, #192	@ 0xc0
 8000586:	4816      	ldr	r0, [pc, #88]	@ (80005e0 <main+0x9c>)
 8000588:	f002 f838 	bl	80025fc <HAL_I2C_Mem_Read>
      // 나중에 여기에 오류 처리 로직을 넣을 수 있음
      // 예: LED 켜기, UART로 메시지 출력 등
  }
  /* USER CODE BEGIN 2 */

  uint8_t i2c_tx_data = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
  uint8_t i2c_tx_addr = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	73bb      	strb	r3, [r7, #14]
  uint8_t i2c_rx_data = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	737b      	strb	r3, [r7, #13]
  uint8_t i2c_rx_addr = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	733b      	strb	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      test1.field.a = 1;
 800059c:	793b      	ldrb	r3, [r7, #4]
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	713b      	strb	r3, [r7, #4]
      i2c_tx_data = test1.Pmic_data;
 80005a4:	793b      	ldrb	r3, [r7, #4]
 80005a6:	73fb      	strb	r3, [r7, #15]

      uint8_t i2c_tx_data = 0x55;
 80005a8:	2355      	movs	r3, #85	@ 0x55
 80005aa:	70fb      	strb	r3, [r7, #3]
      uint8_t i2c_rx_data = 0x00;
 80005ac:	2300      	movs	r3, #0
 80005ae:	70bb      	strb	r3, [r7, #2]
       * @param  0xA0: 데이터를 보낼 슬레이브 장치 주소 (8비트 주소)
       * @param  i2c_tx_data: 전송할 데이터가 담긴 변수 주소
       * @param  1: 데이터 크기 (1 바이트)
       * @param  1000: 타임아웃 시간 (ms 단위)
       */
      HAL_I2C_Master_Transmit(&hi2c1, 0xA0, &i2c_tx_data, 1, 1000);
 80005b0:	1cfa      	adds	r2, r7, #3
 80005b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	21a0      	movs	r1, #160	@ 0xa0
 80005bc:	4808      	ldr	r0, [pc, #32]	@ (80005e0 <main+0x9c>)
 80005be:	f001 fcf9 	bl	8001fb4 <HAL_I2C_Master_Transmit>
       * @param  i2c_rx_data: 수신한 데이터를 저장할 변수 주소
       * @param  1: 수신할 바이트 수
       * @param  1000: 타임아웃 시간
       */

      HAL_I2C_Master_Receive(&hi2c1, 0xA0, &i2c_rx_data, 1, 1000);
 80005c2:	1cba      	adds	r2, r7, #2
 80005c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	21a0      	movs	r1, #160	@ 0xa0
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <main+0x9c>)
 80005d0:	f001 fdee 	bl	80021b0 <HAL_I2C_Master_Receive>

      HAL_Delay(1000);  // 반복 방지용 딜레이
 80005d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d8:	f000 fd56 	bl	8001088 <HAL_Delay>
  {
 80005dc:	bf00      	nop
 80005de:	e7dd      	b.n	800059c <main+0x58>
 80005e0:	20000168 	.word	0x20000168

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	@ 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	@ 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 f99e 	bl	8009934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <SystemClock_Config+0xd0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	4a28      	ldr	r2, [pc, #160]	@ (80006b4 <SystemClock_Config+0xd0>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	@ 0x40
 8000618:	4b26      	ldr	r3, [pc, #152]	@ (80006b4 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a22      	ldr	r2, [pc, #136]	@ (80006b8 <SystemClock_Config+0xd4>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000644:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000652:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000658:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800065c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000662:	2308      	movs	r3, #8
 8000664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fc5e 	bl	8004f30 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067a:	f000 fa17 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2103      	movs	r1, #3
 800069a:	4618      	mov	r0, r3
 800069c:	f003 ff9c 	bl	80045d8 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a6:	f000 fa01 	bl	8000aac <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <MX_ADC1_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006fe:	4a17      	ldr	r2, [pc, #92]	@ (800075c <MX_ADC1_Init+0xa0>)
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_ADC1_Init+0x98>)
 800070a:	2201      	movs	r2, #1
 800070c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000710:	2200      	movs	r2, #0
 8000712:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000718:	2201      	movs	r2, #1
 800071a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_ADC1_Init+0x98>)
 800071e:	f000 fcd7 	bl	80010d0 <HAL_ADC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000728:	f000 f9c0 	bl	8000aac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072c:	2301      	movs	r3, #1
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_ADC1_Init+0x98>)
 800073e:	f000 fd0b 	bl	8001158 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000748:	f000 f9b0 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000f8 	.word	0x200000f8
 8000758:	40012000 	.word	0x40012000
 800075c:	0f000001 	.word	0x0f000001

08000760 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_CAN1_Init+0x60>)
 8000766:	4a17      	ldr	r2, [pc, #92]	@ (80007c4 <MX_CAN1_Init+0x64>)
 8000768:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_CAN1_Init+0x60>)
 800076c:	2210      	movs	r2, #16
 800076e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_CAN1_Init+0x60>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000776:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_CAN1_Init+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800077c:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_CAN1_Init+0x60>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_CAN1_Init+0x60>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000788:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <MX_CAN1_Init+0x60>)
 800078a:	2200      	movs	r2, #0
 800078c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_CAN1_Init+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_CAN1_Init+0x60>)
 8000796:	2200      	movs	r2, #0
 8000798:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_CAN1_Init+0x60>)
 800079c:	2200      	movs	r2, #0
 800079e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_CAN1_Init+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_CAN1_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_CAN1_Init+0x60>)
 80007ae:	f000 ff01 	bl	80015b4 <HAL_CAN_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007b8:	f000 f978 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000140 	.word	0x20000140
 80007c4:	40006400 	.word	0x40006400

080007c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007cc:	4b12      	ldr	r3, [pc, #72]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007ce:	4a13      	ldr	r2, [pc, #76]	@ (800081c <MX_I2C1_Init+0x54>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <MX_I2C1_Init+0x58>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_I2C1_Init+0x50>)
 8000806:	f001 fa91 	bl	8001d2c <HAL_I2C_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000810:	f000 f94c 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000168 	.word	0x20000168
 800081c:	40005400 	.word	0x40005400
 8000820:	000186a0 	.word	0x000186a0

08000824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_SPI2_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	@ (800088c <MX_SPI2_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_SPI2_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_SPI2_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_SPI2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_SPI2_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_SPI2_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_SPI2_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_SPI2_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_SPI2_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_SPI2_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_SPI2_Init+0x64>)
 8000876:	f004 fddf 	bl	8005438 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 f914 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200001bc 	.word	0x200001bc
 800088c:	40003800 	.word	0x40003800

08000890 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_SPI3_Init+0x64>)
 8000896:	4a18      	ldr	r2, [pc, #96]	@ (80008f8 <MX_SPI3_Init+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_SPI3_Init+0x64>)
 800089c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008dc:	220a      	movs	r2, #10
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_SPI3_Init+0x64>)
 80008e2:	f004 fda9 	bl	8005438 <HAL_SPI_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008ec:	f000 f8de 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000214 	.word	0x20000214
 80008f8:	40003c00 	.word	0x40003c00

080008fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <MX_USART3_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART3_UART_Init+0x4c>)
 8000934:	f004 fe09 	bl	800554a <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f8b5 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000026c 	.word	0x2000026c
 800094c:	40004800 	.word	0x40004800

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	@ 0x30
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a4b      	ldr	r2, [pc, #300]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b49      	ldr	r3, [pc, #292]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	4b45      	ldr	r3, [pc, #276]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a44      	ldr	r2, [pc, #272]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b42      	ldr	r3, [pc, #264]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b3e      	ldr	r3, [pc, #248]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a3d      	ldr	r2, [pc, #244]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b3b      	ldr	r3, [pc, #236]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b37      	ldr	r3, [pc, #220]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a36      	ldr	r2, [pc, #216]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b34      	ldr	r3, [pc, #208]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	4b30      	ldr	r3, [pc, #192]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a2f      	ldr	r2, [pc, #188]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b29      	ldr	r3, [pc, #164]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a28      	ldr	r2, [pc, #160]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <MX_GPIO_Init+0x14c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a14:	4822      	ldr	r0, [pc, #136]	@ (8000aa0 <MX_GPIO_Init+0x150>)
 8000a16:	f001 f96f 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2140      	movs	r1, #64	@ 0x40
 8000a1e:	4821      	ldr	r0, [pc, #132]	@ (8000aa4 <MX_GPIO_Init+0x154>)
 8000a20:	f001 f96a 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481b      	ldr	r0, [pc, #108]	@ (8000aa8 <MX_GPIO_Init+0x158>)
 8000a3c:	f000 ffc8 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a40:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4811      	ldr	r0, [pc, #68]	@ (8000aa0 <MX_GPIO_Init+0x150>)
 8000a5a:	f000 ffb9 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a5e:	2340      	movs	r3, #64	@ 0x40
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <MX_GPIO_Init+0x154>)
 8000a76:	f000 ffab 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a7a:	2380      	movs	r3, #128	@ 0x80
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_GPIO_Init+0x154>)
 8000a8e:	f000 ff9f 	bl	80019d0 <HAL_GPIO_Init>

}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	@ 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40021800 	.word	0x40021800
 8000aa8:	40020800 	.word	0x40020800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add HAL_I2C_Master_Transmit()his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a17      	ldr	r2, [pc, #92]	@ (8000b84 <HAL_ADC_MspInit+0x7c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d127      	bne.n	8000b7a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	4a15      	ldr	r2, [pc, #84]	@ (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <HAL_ADC_MspInit+0x80>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b62:	2302      	movs	r3, #2
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <HAL_ADC_MspInit+0x84>)
 8000b76:	f000 ff2b 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	@ 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012000 	.word	0x40012000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	@ (8000c14 <HAL_CAN_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <HAL_CAN_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a17      	ldr	r2, [pc, #92]	@ (8000c18 <HAL_CAN_MspInit+0x88>)
 8000bbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <HAL_CAN_MspInit+0x88>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <HAL_CAN_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <HAL_CAN_MspInit+0x88>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <HAL_CAN_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bea:	2303      	movs	r3, #3
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bfa:	2309      	movs	r3, #9
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <HAL_CAN_MspInit+0x8c>)
 8000c06:	f000 fee3 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	@ 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40006400 	.word	0x40006400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40021800 	.word	0x40021800

08000c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <HAL_I2C_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12c      	bne.n	8000c9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c70:	2304      	movs	r3, #4
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <HAL_I2C_MspInit+0x8c>)
 8000c7c:	f000 fea8 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	@ 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	@ 0x38
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a51      	ldr	r2, [pc, #324]	@ (8000e14 <HAL_SPI_MspInit+0x164>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d14b      	bne.n	8000d6a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
 8000cd6:	4b50      	ldr	r3, [pc, #320]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a4f      	ldr	r2, [pc, #316]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b4d      	ldr	r3, [pc, #308]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cea:	623b      	str	r3, [r7, #32]
 8000cec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	4b49      	ldr	r3, [pc, #292]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a48      	ldr	r2, [pc, #288]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b46      	ldr	r3, [pc, #280]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	4b42      	ldr	r3, [pc, #264]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a41      	ldr	r2, [pc, #260]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
 8000d24:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d26:	230c      	movs	r3, #12
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d36:	2305      	movs	r3, #5
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4836      	ldr	r0, [pc, #216]	@ (8000e1c <HAL_SPI_MspInit+0x16c>)
 8000d42:	f000 fe45 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	482f      	ldr	r0, [pc, #188]	@ (8000e20 <HAL_SPI_MspInit+0x170>)
 8000d64:	f000 fe34 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d68:	e050      	b.n	8000e0c <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e24 <HAL_SPI_MspInit+0x174>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d14b      	bne.n	8000e0c <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	4a26      	ldr	r2, [pc, #152]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d98:	4a1f      	ldr	r2, [pc, #124]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	4a18      	ldr	r2, [pc, #96]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_SPI_MspInit+0x168>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	480e      	ldr	r0, [pc, #56]	@ (8000e20 <HAL_SPI_MspInit+0x170>)
 8000de6:	f000 fdf3 	bl	80019d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <HAL_SPI_MspInit+0x16c>)
 8000e08:	f000 fde2 	bl	80019d0 <HAL_GPIO_Init>
}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	@ 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40003800 	.word	0x40003800
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40003c00 	.word	0x40003c00

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a19      	ldr	r2, [pc, #100]	@ (8000eac <HAL_UART_MspInit+0x84>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d12c      	bne.n	8000ea4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a10      	ldr	r2, [pc, #64]	@ (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_UART_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e94:	2307      	movs	r3, #7
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_UART_MspInit+0x8c>)
 8000ea0:	f000 fd96 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	@ 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0e:	f000 f89b 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <OTG_FS_IRQHandler+0x10>)
 8000f1e:	f002 fb38 	bl	8003592 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000884 	.word	0x20000884

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	@ (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	@ (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff ffd7 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f008 fce1 	bl	8009944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fadf 	bl	8000544 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000f94:	08009a7c 	.word	0x08009a7c
  ldr r2, =_sbss
 8000f98:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000f9c:	200010ac 	.word	0x200010ac

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 fcbd 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fd6e 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fcd5 	bl	80019b6 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 fc9d 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	@ (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	@ (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	200002b0 	.word	0x200002b0

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200002b0 	.word	0x200002b0

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e033      	b.n	800114e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fd0a 	bl	8000b08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d118      	bne.n	8001140 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001116:	f023 0302 	bic.w	r3, r3, #2
 800111a:	f043 0202 	orr.w	r2, r3, #2
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f94a 	bl	80013bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f023 0303 	bic.w	r3, r3, #3
 8001136:	f043 0201 	orr.w	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40
 800113e:	e001      	b.n	8001144 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <HAL_ADC_ConfigChannel+0x1c>
 8001170:	2302      	movs	r3, #2
 8001172:	e113      	b.n	800139c <HAL_ADC_ConfigChannel+0x244>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b09      	cmp	r3, #9
 8001182:	d925      	bls.n	80011d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68d9      	ldr	r1, [r3, #12]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	b29b      	uxth	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	3b1e      	subs	r3, #30
 800119a:	2207      	movs	r2, #7
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43da      	mvns	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	400a      	ands	r2, r1
 80011a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68d9      	ldr	r1, [r3, #12]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	4603      	mov	r3, r0
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4403      	add	r3, r0
 80011c2:	3b1e      	subs	r3, #30
 80011c4:	409a      	lsls	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	e022      	b.n	8001216 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6919      	ldr	r1, [r3, #16]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	2207      	movs	r2, #7
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	400a      	ands	r2, r1
 80011f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6919      	ldr	r1, [r3, #16]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	4618      	mov	r0, r3
 8001206:	4603      	mov	r3, r0
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4403      	add	r3, r0
 800120c:	409a      	lsls	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b06      	cmp	r3, #6
 800121c:	d824      	bhi.n	8001268 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	3b05      	subs	r3, #5
 8001230:	221f      	movs	r2, #31
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b05      	subs	r3, #5
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	635a      	str	r2, [r3, #52]	@ 0x34
 8001266:	e04c      	b.n	8001302 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	d824      	bhi.n	80012ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b23      	subs	r3, #35	@ 0x23
 8001282:	221f      	movs	r2, #31
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43da      	mvns	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	400a      	ands	r2, r1
 8001290:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	3b23      	subs	r3, #35	@ 0x23
 80012ac:	fa00 f203 	lsl.w	r2, r0, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012b8:	e023      	b.n	8001302 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	3b41      	subs	r3, #65	@ 0x41
 80012cc:	221f      	movs	r2, #31
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	400a      	ands	r2, r1
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	3b41      	subs	r3, #65	@ 0x41
 80012f6:	fa00 f203 	lsl.w	r2, r0, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001302:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <HAL_ADC_ConfigChannel+0x250>)
 8001304:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a28      	ldr	r2, [pc, #160]	@ (80013ac <HAL_ADC_ConfigChannel+0x254>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d10f      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1d8>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b12      	cmp	r3, #18
 8001316:	d10b      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1d      	ldr	r2, [pc, #116]	@ (80013ac <HAL_ADC_ConfigChannel+0x254>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12b      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x23a>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a1c      	ldr	r2, [pc, #112]	@ (80013b0 <HAL_ADC_ConfigChannel+0x258>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d003      	beq.n	800134c <HAL_ADC_ConfigChannel+0x1f4>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b11      	cmp	r3, #17
 800134a:	d122      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a11      	ldr	r2, [pc, #68]	@ (80013b0 <HAL_ADC_ConfigChannel+0x258>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d111      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_ADC_ConfigChannel+0x25c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a11      	ldr	r2, [pc, #68]	@ (80013b8 <HAL_ADC_ConfigChannel+0x260>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	0c9a      	lsrs	r2, r3, #18
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001384:	e002      	b.n	800138c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	3b01      	subs	r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f9      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40012300 	.word	0x40012300
 80013ac:	40012000 	.word	0x40012000
 80013b0:	10000012 	.word	0x10000012
 80013b4:	20000000 	.word	0x20000000
 80013b8:	431bde83 	.word	0x431bde83

080013bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013c4:	4b79      	ldr	r3, [pc, #484]	@ (80015ac <ADC_Init+0x1f0>)
 80013c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	431a      	orrs	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	021a      	lsls	r2, r3, #8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001436:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6899      	ldr	r1, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144e:	4a58      	ldr	r2, [pc, #352]	@ (80015b0 <ADC_Init+0x1f4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d022      	beq.n	800149a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001462:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6899      	ldr	r1, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6899      	ldr	r1, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e00f      	b.n	80014ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0202 	bic.w	r2, r2, #2
 80014c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6899      	ldr	r1, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7e1b      	ldrb	r3, [r3, #24]
 80014d4:	005a      	lsls	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d01b      	beq.n	8001520 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001506:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	3b01      	subs	r3, #1
 8001514:	035a      	lsls	r2, r3, #13
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	e007      	b.n	8001530 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800152e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800153e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	3b01      	subs	r3, #1
 800154c:	051a      	lsls	r2, r3, #20
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6899      	ldr	r1, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001572:	025a      	lsls	r2, r3, #9
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800158a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6899      	ldr	r1, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	029a      	lsls	r2, r3, #10
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40012300 	.word	0x40012300
 80015b0:	0f000001 	.word	0x0f000001

080015b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0ed      	b.n	80017a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fadc 	bl	8000b90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e8:	f7ff fd42 	bl	8001070 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ee:	e012      	b.n	8001616 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015f0:	f7ff fd3e 	bl	8001070 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b0a      	cmp	r3, #10
 80015fc:	d90b      	bls.n	8001616 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2205      	movs	r2, #5
 800160e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0c5      	b.n	80017a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0e5      	beq.n	80015f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0202 	bic.w	r2, r2, #2
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff fd1c 	bl	8001070 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800163a:	e012      	b.n	8001662 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800163c:	f7ff fd18 	bl	8001070 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b0a      	cmp	r3, #10
 8001648:	d90b      	bls.n	8001662 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2205      	movs	r2, #5
 800165a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e09f      	b.n	80017a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e5      	bne.n	800163c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e1b      	ldrb	r3, [r3, #24]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d108      	bne.n	800168a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e007      	b.n	800169a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7e5b      	ldrb	r3, [r3, #25]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d108      	bne.n	80016b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e007      	b.n	80016c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7e9b      	ldrb	r3, [r3, #26]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d108      	bne.n	80016de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0220 	orr.w	r2, r2, #32
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e007      	b.n	80016ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0220 	bic.w	r2, r2, #32
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7edb      	ldrb	r3, [r3, #27]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0210 	bic.w	r2, r2, #16
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e007      	b.n	8001718 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0210 	orr.w	r2, r2, #16
 8001716:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7f1b      	ldrb	r3, [r3, #28]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0208 	orr.w	r2, r2, #8
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e007      	b.n	8001742 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0208 	bic.w	r2, r2, #8
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7f5b      	ldrb	r3, [r3, #29]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0204 	orr.w	r2, r2, #4
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e007      	b.n	800176c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0204 	bic.w	r2, r2, #4
 800176a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	ea42 0103 	orr.w	r1, r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	1e5a      	subs	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	@ (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	@ (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	@ (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	@ 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	@ 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	e165      	b.n	8001cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	f040 8154 	bne.w	8001cb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d005      	beq.n	8001a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d130      	bne.n	8001a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 0201 	and.w	r2, r3, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d017      	beq.n	8001ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 80ae 	beq.w	8001cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd0 <HAL_GPIO_Init+0x300>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd0 <HAL_GPIO_Init+0x300>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd0 <HAL_GPIO_Init+0x300>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b72:	4a58      	ldr	r2, [pc, #352]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd8 <HAL_GPIO_Init+0x308>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d025      	beq.n	8001bea <HAL_GPIO_Init+0x21a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cdc <HAL_GPIO_Init+0x30c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01f      	beq.n	8001be6 <HAL_GPIO_Init+0x216>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce0 <HAL_GPIO_Init+0x310>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x212>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce4 <HAL_GPIO_Init+0x314>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x20e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce8 <HAL_GPIO_Init+0x318>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x20a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8001cec <HAL_GPIO_Init+0x31c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x206>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a49      	ldr	r2, [pc, #292]	@ (8001cf0 <HAL_GPIO_Init+0x320>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x202>
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x21c>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x21c>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x21c>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x21c>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x21c>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x21c>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x21c>
 8001bea:	2300      	movs	r3, #0
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bfc:	4935      	ldr	r1, [pc, #212]	@ (8001cd4 <HAL_GPIO_Init+0x304>)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c2e:	4a31      	ldr	r2, [pc, #196]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c34:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c58:	4a26      	ldr	r2, [pc, #152]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5e:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c82:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cac:	4a11      	ldr	r2, [pc, #68]	@ (8001cf4 <HAL_GPIO_Init+0x324>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	f67f ae96 	bls.w	80019ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40021400 	.word	0x40021400
 8001cf0:	40021800 	.word	0x40021800
 8001cf4:	40013c00 	.word	0x40013c00

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e12b      	b.n	8001f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe ff64 	bl	8000c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2224      	movs	r2, #36	@ 0x24
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d90:	f002 fe1a 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8001d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a81      	ldr	r2, [pc, #516]	@ (8001fa0 <HAL_I2C_Init+0x274>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d807      	bhi.n	8001db0 <HAL_I2C_Init+0x84>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a80      	ldr	r2, [pc, #512]	@ (8001fa4 <HAL_I2C_Init+0x278>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	bf94      	ite	ls
 8001da8:	2301      	movls	r3, #1
 8001daa:	2300      	movhi	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e006      	b.n	8001dbe <HAL_I2C_Init+0x92>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fa8 <HAL_I2C_Init+0x27c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	bf94      	ite	ls
 8001db8:	2301      	movls	r3, #1
 8001dba:	2300      	movhi	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0e7      	b.n	8001f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a78      	ldr	r2, [pc, #480]	@ (8001fac <HAL_I2C_Init+0x280>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9b      	lsrs	r3, r3, #18
 8001dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa0 <HAL_I2C_Init+0x274>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d802      	bhi.n	8001e00 <HAL_I2C_Init+0xd4>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	e009      	b.n	8001e14 <HAL_I2C_Init+0xe8>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	4a69      	ldr	r2, [pc, #420]	@ (8001fb0 <HAL_I2C_Init+0x284>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	3301      	adds	r3, #1
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	495c      	ldr	r1, [pc, #368]	@ (8001fa0 <HAL_I2C_Init+0x274>)
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d819      	bhi.n	8001e68 <HAL_I2C_Init+0x13c>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e59      	subs	r1, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e48:	400b      	ands	r3, r1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_I2C_Init+0x138>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1e59      	subs	r1, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e62:	e051      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001e64:	2304      	movs	r3, #4
 8001e66:	e04f      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d111      	bne.n	8001e94 <HAL_I2C_Init+0x168>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1e58      	subs	r0, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	440b      	add	r3, r1
 8001e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e012      	b.n	8001eba <HAL_I2C_Init+0x18e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1e58      	subs	r0, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	0099      	lsls	r1, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_Init+0x196>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e022      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_I2C_Init+0x1bc>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e58      	subs	r0, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	440b      	add	r3, r1
 8001ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ee6:	e00f      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	0099      	lsls	r1, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	6809      	ldr	r1, [r1, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69da      	ldr	r2, [r3, #28]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6911      	ldr	r1, [r2, #16]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68d2      	ldr	r2, [r2, #12]
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	000186a0 	.word	0x000186a0
 8001fa4:	001e847f 	.word	0x001e847f
 8001fa8:	003d08ff 	.word	0x003d08ff
 8001fac:	431bde83 	.word	0x431bde83
 8001fb0:	10624dd3 	.word	0x10624dd3

08001fb4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	817b      	strh	r3, [r7, #10]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff f852 	bl	8001070 <HAL_GetTick>
 8001fcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	f040 80e0 	bne.w	800219c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2319      	movs	r3, #25
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4970      	ldr	r1, [pc, #448]	@ (80021a8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 ff66 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0d3      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_I2C_Master_Transmit+0x50>
 8002000:	2302      	movs	r3, #2
 8002002:	e0cc      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d007      	beq.n	800202a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002038:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2221      	movs	r2, #33	@ 0x21
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2210      	movs	r2, #16
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	893a      	ldrh	r2, [r7, #8]
 800205a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a50      	ldr	r2, [pc, #320]	@ (80021ac <HAL_I2C_Master_Transmit+0x1f8>)
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800206c:	8979      	ldrh	r1, [r7, #10]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	6a3a      	ldr	r2, [r7, #32]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fce8 	bl	8002a48 <I2C_MasterRequestWrite>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e08d      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002098:	e066      	b.n	8002168 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	6a39      	ldr	r1, [r7, #32]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 ffe0 	bl	8003064 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d107      	bne.n	80020c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d11b      	bne.n	800213c <HAL_I2C_Master_Transmit+0x188>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d017      	beq.n	800213c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	6a39      	ldr	r1, [r7, #32]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 ffd0 	bl	80030e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	2b04      	cmp	r3, #4
 8002152:	d107      	bne.n	8002164 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002162:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e01a      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d194      	bne.n	800209a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800217e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e000      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800219c:	2302      	movs	r3, #2
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	00100002 	.word	0x00100002
 80021ac:	ffff0000 	.word	0xffff0000

080021b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	@ 0x30
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	460b      	mov	r3, r1
 80021be:	817b      	strh	r3, [r7, #10]
 80021c0:	4613      	mov	r3, r2
 80021c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7fe ff54 	bl	8001070 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	f040 820b 	bne.w	80025ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2319      	movs	r3, #25
 80021de:	2201      	movs	r2, #1
 80021e0:	497c      	ldr	r1, [pc, #496]	@ (80023d4 <HAL_I2C_Master_Receive+0x224>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fe68 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
 80021f0:	e1fe      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_I2C_Master_Receive+0x50>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e1f7      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d007      	beq.n	8002226 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2222      	movs	r2, #34	@ 0x22
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2210      	movs	r2, #16
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	893a      	ldrh	r2, [r7, #8]
 8002256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a5c      	ldr	r2, [pc, #368]	@ (80023d8 <HAL_I2C_Master_Receive+0x228>)
 8002266:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002268:	8979      	ldrh	r1, [r7, #10]
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fc6c 	bl	8002b4c <I2C_MasterRequestRead>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1b8      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d113      	bne.n	80022ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e18c      	b.n	80025c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d11b      	bne.n	80022ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e16c      	b.n	80025c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d11b      	bne.n	800232e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002304:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	e14c      	b.n	80025c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800233c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002354:	e138      	b.n	80025c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235a:	2b03      	cmp	r3, #3
 800235c:	f200 80f1 	bhi.w	8002542 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002364:	2b01      	cmp	r3, #1
 8002366:	d123      	bne.n	80023b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800236a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fefb 	bl	8003168 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e139      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023ae:	e10b      	b.n	80025c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d14e      	bne.n	8002456 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	2200      	movs	r2, #0
 80023c0:	4906      	ldr	r1, [pc, #24]	@ (80023dc <HAL_I2C_Master_Receive+0x22c>)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fd78 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e10e      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
 80023d2:	bf00      	nop
 80023d4:	00100002 	.word	0x00100002
 80023d8:	ffff0000 	.word	0xffff0000
 80023dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002454:	e0b8      	b.n	80025c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	2200      	movs	r2, #0
 800245e:	4966      	ldr	r1, [pc, #408]	@ (80025f8 <HAL_I2C_Master_Receive+0x448>)
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fd29 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0bf      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800247e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	2200      	movs	r2, #0
 80024ba:	494f      	ldr	r1, [pc, #316]	@ (80025f8 <HAL_I2C_Master_Receive+0x448>)
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fcfb 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e091      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002540:	e042      	b.n	80025c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002544:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fe0e 	bl	8003168 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e04c      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b04      	cmp	r3, #4
 8002594:	d118      	bne.n	80025c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f47f aec2 	bne.w	8002356 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3728      	adds	r7, #40	@ 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	00010004 	.word	0x00010004

080025fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	@ 0x30
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4603      	mov	r3, r0
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	460b      	mov	r3, r1
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002616:	f7fe fd2b 	bl	8001070 <HAL_GetTick>
 800261a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b20      	cmp	r3, #32
 8002626:	f040 8208 	bne.w	8002a3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2319      	movs	r3, #25
 8002630:	2201      	movs	r2, #1
 8002632:	497b      	ldr	r1, [pc, #492]	@ (8002820 <HAL_I2C_Mem_Read+0x224>)
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fc3f 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	e1fb      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Mem_Read+0x56>
 800264e:	2302      	movs	r3, #2
 8002650:	e1f4      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d007      	beq.n	8002678 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2222      	movs	r2, #34	@ 0x22
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2240      	movs	r2, #64	@ 0x40
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002824 <HAL_I2C_Mem_Read+0x228>)
 80026b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ba:	88f8      	ldrh	r0, [r7, #6]
 80026bc:	893a      	ldrh	r2, [r7, #8]
 80026be:	8979      	ldrh	r1, [r7, #10]
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4603      	mov	r3, r0
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fb0c 	bl	8002ce8 <I2C_RequestMemoryRead>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e1b0      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d113      	bne.n	800270a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	623b      	str	r3, [r7, #32]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e184      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270e:	2b01      	cmp	r3, #1
 8002710:	d11b      	bne.n	800274a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e164      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	2b02      	cmp	r3, #2
 8002750:	d11b      	bne.n	800278a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002760:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	e144      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027a0:	e138      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	f200 80f1 	bhi.w	800298e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d123      	bne.n	80027fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fcd5 	bl	8003168 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e139      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027fa:	e10b      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002800:	2b02      	cmp	r3, #2
 8002802:	d14e      	bne.n	80028a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280a:	2200      	movs	r2, #0
 800280c:	4906      	ldr	r1, [pc, #24]	@ (8002828 <HAL_I2C_Mem_Read+0x22c>)
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fb52 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e10e      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
 800281e:	bf00      	nop
 8002820:	00100002 	.word	0x00100002
 8002824:	ffff0000 	.word	0xffff0000
 8002828:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028a0:	e0b8      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	2200      	movs	r2, #0
 80028aa:	4966      	ldr	r1, [pc, #408]	@ (8002a44 <HAL_I2C_Mem_Read+0x448>)
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fb03 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0bf      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002904:	2200      	movs	r2, #0
 8002906:	494f      	ldr	r1, [pc, #316]	@ (8002a44 <HAL_I2C_Mem_Read+0x448>)
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fad5 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e091      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800298c:	e042      	b.n	8002a14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002990:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fbe8 	bl	8003168 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e04c      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d118      	bne.n	8002a14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f47f aec2 	bne.w	80027a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3728      	adds	r7, #40	@ 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	00010004 	.word	0x00010004

08002a48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	460b      	mov	r3, r1
 8002a56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d006      	beq.n	8002a72 <I2C_MasterRequestWrite+0x2a>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d003      	beq.n	8002a72 <I2C_MasterRequestWrite+0x2a>
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a70:	d108      	bne.n	8002a84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e00b      	b.n	8002a9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	2b12      	cmp	r3, #18
 8002a8a:	d107      	bne.n	8002a9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fa05 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00d      	beq.n	8002ad0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac2:	d103      	bne.n	8002acc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e035      	b.n	8002b3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ad8:	d108      	bne.n	8002aec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ae8:	611a      	str	r2, [r3, #16]
 8002aea:	e01b      	b.n	8002b24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	11db      	asrs	r3, r3, #7
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f003 0306 	and.w	r3, r3, #6
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f063 030f 	orn	r3, r3, #15
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	490e      	ldr	r1, [pc, #56]	@ (8002b44 <I2C_MasterRequestWrite+0xfc>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fa2b 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e010      	b.n	8002b3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	4907      	ldr	r1, [pc, #28]	@ (8002b48 <I2C_MasterRequestWrite+0x100>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa1b 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	00010008 	.word	0x00010008
 8002b48:	00010002 	.word	0x00010002

08002b4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d006      	beq.n	8002b86 <I2C_MasterRequestRead+0x3a>
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d003      	beq.n	8002b86 <I2C_MasterRequestRead+0x3a>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b84:	d108      	bne.n	8002b98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e00b      	b.n	8002bb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	2b11      	cmp	r3, #17
 8002b9e:	d107      	bne.n	8002bb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f97b 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd6:	d103      	bne.n	8002be0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e079      	b.n	8002cd8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bec:	d108      	bne.n	8002c00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bee:	897b      	ldrh	r3, [r7, #10]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	611a      	str	r2, [r3, #16]
 8002bfe:	e05f      	b.n	8002cc0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	11db      	asrs	r3, r3, #7
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 0306 	and.w	r3, r3, #6
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f063 030f 	orn	r3, r3, #15
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4930      	ldr	r1, [pc, #192]	@ (8002ce0 <I2C_MasterRequestRead+0x194>)
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f9a1 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e054      	b.n	8002cd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c2e:	897b      	ldrh	r3, [r7, #10]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4929      	ldr	r1, [pc, #164]	@ (8002ce4 <I2C_MasterRequestRead+0x198>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f991 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e044      	b.n	8002cd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f919 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c9a:	d103      	bne.n	8002ca4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e017      	b.n	8002cd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	11db      	asrs	r3, r3, #7
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 0306 	and.w	r3, r3, #6
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f063 030e 	orn	r3, r3, #14
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4907      	ldr	r1, [pc, #28]	@ (8002ce4 <I2C_MasterRequestRead+0x198>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f94d 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	00010008 	.word	0x00010008
 8002ce4:	00010002 	.word	0x00010002

08002ce8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f8c2 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d48:	d103      	bne.n	8002d52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0aa      	b.n	8002eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d56:	897b      	ldrh	r3, [r7, #10]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	4952      	ldr	r1, [pc, #328]	@ (8002eb4 <I2C_RequestMemoryRead+0x1cc>)
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f8fa 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e097      	b.n	8002eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	6a39      	ldr	r1, [r7, #32]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f964 	bl	8003064 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d107      	bne.n	8002dba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e076      	b.n	8002eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc4:	893b      	ldrh	r3, [r7, #8]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	611a      	str	r2, [r3, #16]
 8002dce:	e021      	b.n	8002e14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dd0:	893b      	ldrh	r3, [r7, #8]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de0:	6a39      	ldr	r1, [r7, #32]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f93e 	bl	8003064 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d107      	bne.n	8002e06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e050      	b.n	8002eac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0a:	893b      	ldrh	r3, [r7, #8]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e16:	6a39      	ldr	r1, [r7, #32]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f923 	bl	8003064 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d107      	bne.n	8002e3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e035      	b.n	8002eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f82b 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00d      	beq.n	8002e84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e76:	d103      	bne.n	8002e80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e013      	b.n	8002eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e84:	897b      	ldrh	r3, [r7, #10]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	6a3a      	ldr	r2, [r7, #32]
 8002e98:	4906      	ldr	r1, [pc, #24]	@ (8002eb4 <I2C_RequestMemoryRead+0x1cc>)
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f863 	bl	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	00010002 	.word	0x00010002

08002eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec8:	e025      	b.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d021      	beq.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe f8cd 	bl	8001070 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d116      	bne.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e023      	b.n	8002f5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10d      	bne.n	8002f3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	e00c      	b.n	8002f56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4013      	ands	r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf0c      	ite	eq
 8002f4e:	2301      	moveq	r3, #1
 8002f50:	2300      	movne	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d0b6      	beq.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f74:	e051      	b.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f84:	d123      	bne.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	f043 0204 	orr.w	r2, r3, #4
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e046      	b.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d021      	beq.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe f84b 	bl	8001070 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e020      	b.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10c      	bne.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	e00b      	b.n	8003056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	43da      	mvns	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d18d      	bne.n	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003070:	e02d      	b.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f8ce 	bl	8003214 <I2C_IsAcknowledgeFailed>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e02d      	b.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d021      	beq.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fd fff1 	bl	8001070 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d116      	bne.n	80030ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e007      	b.n	80030de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d8:	2b80      	cmp	r3, #128	@ 0x80
 80030da:	d1ca      	bne.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f2:	e02d      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f88d 	bl	8003214 <I2C_IsAcknowledgeFailed>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e02d      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d021      	beq.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fd ffb0 	bl	8001070 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e007      	b.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d1ca      	bne.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003174:	e042      	b.n	80031fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b10      	cmp	r3, #16
 8003182:	d119      	bne.n	80031b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0210 	mvn.w	r2, #16
 800318c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e029      	b.n	800320c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fd ff5a 	bl	8001070 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d116      	bne.n	80031fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e007      	b.n	800320c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003206:	2b40      	cmp	r3, #64	@ 0x40
 8003208:	d1b5      	bne.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800322a:	d11b      	bne.n	8003264 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003234:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	f043 0204 	orr.w	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003274:	b08f      	sub	sp, #60	@ 0x3c
 8003276:	af0a      	add	r7, sp, #40	@ 0x28
 8003278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e116      	b.n	80034b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f006 f82e 	bl	8009300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fd27 	bl	8005d16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	687e      	ldr	r6, [r7, #4]
 80032d0:	466d      	mov	r5, sp
 80032d2:	f106 0410 	add.w	r4, r6, #16
 80032d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80032e6:	1d33      	adds	r3, r6, #4
 80032e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	f002 fbfe 	bl	8005aec <USB_CoreInit>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0d7      	b.n	80034b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f002 fd15 	bl	8005d38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e04a      	b.n	80033aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	333d      	adds	r3, #61	@ 0x3d
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	333c      	adds	r3, #60	@ 0x3c
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	b298      	uxth	r0, r3
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3342      	adds	r3, #66	@ 0x42
 8003350:	4602      	mov	r2, r0
 8003352:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	333f      	adds	r3, #63	@ 0x3f
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3344      	adds	r3, #68	@ 0x44
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3348      	adds	r3, #72	@ 0x48
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3350      	adds	r3, #80	@ 0x50
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	3301      	adds	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d3af      	bcc.n	8003314 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	e044      	b.n	8003444 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3301      	adds	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d3b5      	bcc.n	80033ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	687e      	ldr	r6, [r7, #4]
 8003456:	466d      	mov	r5, sp
 8003458:	f106 0410 	add.w	r4, r6, #16
 800345c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800345e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003464:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003468:	e885 0003 	stmia.w	r5, {r0, r1}
 800346c:	1d33      	adds	r3, r6, #4
 800346e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003470:	6838      	ldr	r0, [r7, #0]
 8003472:	f002 fcad 	bl	8005dd0 <USB_DevInit>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e014      	b.n	80034b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	2b01      	cmp	r3, #1
 800349e:	d102      	bne.n	80034a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f001 f869 	bl	8004578 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 fc40 	bl	8006d30 <USB_DevDisconnect>

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_PCD_Start+0x1c>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e020      	b.n	8003518 <HAL_PCD_Start+0x5e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d109      	bne.n	80034fa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d005      	beq.n	80034fa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 fbf8 	bl	8005cf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f003 fbf0 	bl	8006cee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_PCD_Stop+0x1c>
 8003538:	2302      	movs	r3, #2
 800353a:	e026      	b.n	800358a <HAL_PCD_Stop+0x6a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fbe4 	bl	8005d16 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f003 fbec 	bl	8006d30 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2110      	movs	r1, #16
 800355e:	4618      	mov	r0, r3
 8003560:	f002 fd94 	bl	800608c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	2b01      	cmp	r3, #1
 800356a:	d109      	bne.n	8003580 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003570:	2b01      	cmp	r3, #1
 8003572:	d005      	beq.n	8003580 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003592:	b590      	push	{r4, r7, lr}
 8003594:	b08d      	sub	sp, #52	@ 0x34
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f003 fc75 	bl	8006e98 <USB_GetMode>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f040 83ca 	bne.w	8003d4a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 fbd9 	bl	8006d72 <USB_ReadInterrupts>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 83c0 	beq.w	8003d48 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 fbd0 	bl	8006d72 <USB_ReadInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d107      	bne.n	80035ec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f002 0202 	and.w	r2, r2, #2
 80035ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f003 fbbe 	bl	8006d72 <USB_ReadInterrupts>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d161      	bne.n	80036c4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0210 	bic.w	r2, r2, #16
 800360e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f003 020f 	and.w	r2, r3, #15
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	3304      	adds	r3, #4
 800362e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003636:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800363a:	d124      	bne.n	8003686 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d035      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003656:	b29b      	uxth	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	6a38      	ldr	r0, [r7, #32]
 800365c:	f003 f9f5 	bl	8006a4a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	091b      	lsrs	r3, r3, #4
 8003668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800366c:	441a      	add	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800367e:	441a      	add	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	619a      	str	r2, [r3, #24]
 8003684:	e016      	b.n	80036b4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800368c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003690:	d110      	bne.n	80036b4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003698:	2208      	movs	r2, #8
 800369a:	4619      	mov	r1, r3
 800369c:	6a38      	ldr	r0, [r7, #32]
 800369e:	f003 f9d4 	bl	8006a4a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ae:	441a      	add	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0210 	orr.w	r2, r2, #16
 80036c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 fb52 	bl	8006d72 <USB_ReadInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036d8:	d16e      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f003 fb58 	bl	8006d98 <USB_ReadDevAllOutEpInterrupt>
 80036e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80036ea:	e062      	b.n	80037b2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d057      	beq.n	80037a6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f003 fb7d 	bl	8006e00 <USB_ReadDevOutEPInterrupt>
 8003706:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800371e:	461a      	mov	r2, r3
 8003720:	2301      	movs	r3, #1
 8003722:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003724:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fd7c 	bl	8004224 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003742:	461a      	mov	r2, r3
 8003744:	2308      	movs	r3, #8
 8003746:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fe76 	bl	800443c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003766:	461a      	mov	r2, r3
 8003768:	2310      	movs	r3, #16
 800376a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003782:	461a      	mov	r2, r3
 8003784:	2320      	movs	r3, #32
 8003786:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379e:	461a      	mov	r2, r3
 80037a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	3301      	adds	r3, #1
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d199      	bne.n	80036ec <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f003 fad8 	bl	8006d72 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037cc:	f040 80c0 	bne.w	8003950 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 faf9 	bl	8006dcc <USB_ReadDevAllInEpInterrupt>
 80037da:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80037e0:	e0b2      	b.n	8003948 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a7 	beq.w	800393c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 fb1f 	bl	8006e3c <USB_ReadDevInEPInterrupt>
 80037fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d057      	beq.n	80038ba <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	2201      	movs	r2, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	43db      	mvns	r3, r3
 8003824:	69f9      	ldr	r1, [r7, #28]
 8003826:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800382a:	4013      	ands	r3, r2
 800382c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800383a:	461a      	mov	r2, r3
 800383c:	2301      	movs	r3, #1
 800383e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d132      	bne.n	80038ae <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3348      	adds	r3, #72	@ 0x48
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4403      	add	r3, r0
 8003868:	3344      	adds	r3, #68	@ 0x44
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4419      	add	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4403      	add	r3, r0
 800387c:	3348      	adds	r3, #72	@ 0x48
 800387e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	2b00      	cmp	r3, #0
 8003884:	d113      	bne.n	80038ae <HAL_PCD_IRQHandler+0x31c>
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3350      	adds	r3, #80	@ 0x50
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80038a6:	461a      	mov	r2, r3
 80038a8:	2101      	movs	r1, #1
 80038aa:	f003 fb27 	bl	8006efc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f005 fdc6 	bl	8009446 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0308 	and.w	r3, r3, #8
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d0:	461a      	mov	r2, r3
 80038d2:	2308      	movs	r3, #8
 80038d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ec:	461a      	mov	r2, r3
 80038ee:	2310      	movs	r3, #16
 80038f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003908:	461a      	mov	r2, r3
 800390a:	2340      	movs	r3, #64	@ 0x40
 800390c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003924:	461a      	mov	r2, r3
 8003926:	2302      	movs	r3, #2
 8003928:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fbe6 	bl	8004108 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	3301      	adds	r3, #1
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	2b00      	cmp	r3, #0
 800394c:	f47f af49 	bne.w	80037e2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fa0c 	bl	8006d72 <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003964:	d122      	bne.n	80039ac <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003980:	2b01      	cmp	r3, #1
 8003982:	d108      	bne.n	8003996 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800398c:	2100      	movs	r1, #0
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fe16 	bl	80045c0 <HAL_PCDEx_LPM_Callback>
 8003994:	e002      	b.n	800399c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f005 fdc2 	bl	8009520 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80039aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f003 f9de 	bl	8006d72 <USB_ReadInterrupts>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c0:	d112      	bne.n	80039e8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f005 fd7e 	bl	80094d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80039e6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 f9c0 	bl	8006d72 <USB_ReadInterrupts>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039fc:	d121      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003a0c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d111      	bne.n	8003a3c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	f003 020f 	and.w	r2, r3, #15
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a32:	2101      	movs	r1, #1
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fdc3 	bl	80045c0 <HAL_PCDEx_LPM_Callback>
 8003a3a:	e002      	b.n	8003a42 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f005 fd49 	bl	80094d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 f993 	bl	8006d72 <USB_ReadInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a56:	f040 80c7 	bne.w	8003be8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2110      	movs	r1, #16
 8003a74:	4618      	mov	r0, r3
 8003a76:	f002 fb09 	bl	800608c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a7e:	e056      	b.n	8003b2e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ab2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ace:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ad2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ae6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af8:	0151      	lsls	r1, r2, #5
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	440a      	add	r2, r1
 8003afe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b18:	0151      	lsls	r1, r2, #5
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d3a3      	bcc.n	8003a80 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b46:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003b4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d016      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b64:	f043 030b 	orr.w	r3, r3, #11
 8003b68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b7a:	f043 030b 	orr.w	r3, r3, #11
 8003b7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b80:	e015      	b.n	8003bae <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b94:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003b98:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ba8:	f043 030b 	orr.w	r3, r3, #11
 8003bac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bbc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003bc0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f003 f992 	bl	8006efc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f003 f8c0 	bl	8006d72 <USB_ReadInterrupts>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bfc:	d124      	bne.n	8003c48 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 f956 	bl	8006eb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f002 fa9a 	bl	8006146 <USB_GetDevSpeed>
 8003c12:	4603      	mov	r3, r0
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681c      	ldr	r4, [r3, #0]
 8003c1e:	f000 fec7 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 8003c22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f001 ffbf 	bl	8005bb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f005 fc2f 	bl	8009496 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f003 f890 	bl	8006d72 <USB_ReadInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d10a      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f005 fc0c 	bl	800947a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 0208 	and.w	r2, r2, #8
 8003c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f003 f87b 	bl	8006d72 <USB_ReadInterrupts>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c86:	d10f      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f005 fc64 	bl	8009560 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f003 f860 	bl	8006d72 <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cbc:	d10f      	bne.n	8003cde <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f005 fc37 	bl	800953c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f003 f845 	bl	8006d72 <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf2:	d10a      	bne.n	8003d0a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f005 fc45 	bl	8009584 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f003 f82f 	bl	8006d72 <USB_ReadInterrupts>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d115      	bne.n	8003d4a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f005 fc35 	bl	80095a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6859      	ldr	r1, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e000      	b.n	8003d4a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003d48:	bf00      	nop
    }
  }
}
 8003d4a:	3734      	adds	r7, #52	@ 0x34
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd90      	pop	{r4, r7, pc}

08003d50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_PCD_SetAddress+0x1a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e013      	b.n	8003d92 <HAL_PCD_SetAddress+0x42>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f002 ff8d 	bl	8006ca2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	4608      	mov	r0, r1
 8003da4:	4611      	mov	r1, r2
 8003da6:	461a      	mov	r2, r3
 8003da8:	4603      	mov	r3, r0
 8003daa:	70fb      	strb	r3, [r7, #3]
 8003dac:	460b      	mov	r3, r1
 8003dae:	803b      	strh	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	da0f      	bge.n	8003de0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 020f 	and.w	r2, r3, #15
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	3338      	adds	r3, #56	@ 0x38
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	705a      	strb	r2, [r3, #1]
 8003dde:	e00f      	b.n	8003e00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	3304      	adds	r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e0c:	883a      	ldrh	r2, [r7, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	78ba      	ldrb	r2, [r7, #2]
 8003e16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e2a:	78bb      	ldrb	r3, [r7, #2]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d102      	bne.n	8003e36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_PCD_EP_Open+0xaa>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e00e      	b.n	8003e62 <HAL_PCD_EP_Open+0xc8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f002 f99c 	bl	8006190 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8003e60:	7afb      	ldrb	r3, [r7, #11]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
 8003e76:	460b      	mov	r3, r1
 8003e78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	f003 020f 	and.w	r2, r3, #15
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	3304      	adds	r3, #4
 8003e92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eac:	7afb      	ldrb	r3, [r7, #11]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d102      	bne.n	8003ec6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ec6:	7afb      	ldrb	r3, [r7, #11]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	f002 fc23 	bl	8006728 <USB_EP0StartXfer>
 8003ee2:	e008      	b.n	8003ef6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	f002 f9d5 	bl	80062a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	f003 020f 	and.w	r2, r3, #15
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	3338      	adds	r3, #56	@ 0x38
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	3304      	adds	r3, #4
 8003f26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f40:	7afb      	ldrb	r3, [r7, #11]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d102      	bne.n	8003f5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6979      	ldr	r1, [r7, #20]
 8003f72:	f002 fbd9 	bl	8006728 <USB_EP0StartXfer>
 8003f76:	e008      	b.n	8003f8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	6979      	ldr	r1, [r7, #20]
 8003f86:	f002 f98b 	bl	80062a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d901      	bls.n	8003fb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e050      	b.n	8004054 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da0f      	bge.n	8003fda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	3338      	adds	r3, #56	@ 0x38
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	3304      	adds	r3, #4
 8003fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	705a      	strb	r2, [r3, #1]
 8003fd8:	e00d      	b.n	8003ff6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_EP_SetStall+0x82>
 8004012:	2302      	movs	r3, #2
 8004014:	e01e      	b.n	8004054 <HAL_PCD_EP_SetStall+0xc0>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	4618      	mov	r0, r3
 8004026:	f002 fd68 	bl	8006afa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	b2d9      	uxtb	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004044:	461a      	mov	r2, r3
 8004046:	f002 ff59 	bl	8006efc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	f003 020f 	and.w	r2, r3, #15
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d901      	bls.n	800407a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e042      	b.n	8004100 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800407a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	da0f      	bge.n	80040a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	3338      	adds	r3, #56	@ 0x38
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	3304      	adds	r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	705a      	strb	r2, [r3, #1]
 80040a0:	e00f      	b.n	80040c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_PCD_EP_ClrStall+0x86>
 80040de:	2302      	movs	r3, #2
 80040e0:	e00e      	b.n	8004100 <HAL_PCD_EP_ClrStall+0xa4>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f002 fd70 	bl	8006bd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	@ 0x28
 800410c:	af02      	add	r7, sp, #8
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3338      	adds	r3, #56	@ 0x38
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	699a      	ldr	r2, [r3, #24]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	429a      	cmp	r2, r3
 800413a:	d901      	bls.n	8004140 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e06c      	b.n	800421a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	429a      	cmp	r2, r3
 8004154:	d902      	bls.n	800415c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	3303      	adds	r3, #3
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004164:	e02b      	b.n	80041be <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	429a      	cmp	r2, r3
 800417a:	d902      	bls.n	8004182 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3303      	adds	r3, #3
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68d9      	ldr	r1, [r3, #12]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800419a:	b2db      	uxtb	r3, r3
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4603      	mov	r3, r0
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f002 fc14 	bl	80069ce <USB_WritePacket>

    ep->xfer_buff  += len;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	441a      	add	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	441a      	add	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d809      	bhi.n	80041e8 <PCD_WriteEmptyTxFifo+0xe0>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041dc:	429a      	cmp	r2, r3
 80041de:	d203      	bcs.n	80041e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1be      	bne.n	8004166 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d811      	bhi.n	8004218 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	2201      	movs	r2, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	43db      	mvns	r3, r3
 800420e:	6939      	ldr	r1, [r7, #16]
 8004210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004214:	4013      	ands	r3, r2
 8004216:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	333c      	adds	r3, #60	@ 0x3c
 800423c:	3304      	adds	r3, #4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b01      	cmp	r3, #1
 8004258:	f040 80a0 	bne.w	800439c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d015      	beq.n	8004292 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a72      	ldr	r2, [pc, #456]	@ (8004434 <PCD_EP_OutXfrComplete_int+0x210>)
 800426a:	4293      	cmp	r3, r2
 800426c:	f240 80dd 	bls.w	800442a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80d7 	beq.w	800442a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004288:	461a      	mov	r2, r3
 800428a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800428e:	6093      	str	r3, [r2, #8]
 8004290:	e0cb      	b.n	800442a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	2320      	movs	r3, #32
 80042ac:	6093      	str	r3, [r2, #8]
 80042ae:	e0bc      	b.n	800442a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 80b7 	bne.w	800442a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a5d      	ldr	r2, [pc, #372]	@ (8004434 <PCD_EP_OutXfrComplete_int+0x210>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d90f      	bls.n	80042e4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042da:	461a      	mov	r2, r3
 80042dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e0:	6093      	str	r3, [r2, #8]
 80042e2:	e0a2      	b.n	800442a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80042f6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	0159      	lsls	r1, r3, #5
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	440b      	add	r3, r1
 8004300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800430a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4403      	add	r3, r0
 800431a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800431e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004332:	6819      	ldr	r1, [r3, #0]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4403      	add	r3, r0
 8004342:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4419      	add	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4403      	add	r3, r0
 8004358:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800435c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d114      	bne.n	800438e <PCD_EP_OutXfrComplete_int+0x16a>
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004386:	461a      	mov	r2, r3
 8004388:	2101      	movs	r1, #1
 800438a:	f002 fdb7 	bl	8006efc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f005 f83b 	bl	8009410 <HAL_PCD_DataOutStageCallback>
 800439a:	e046      	b.n	800442a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a26      	ldr	r2, [pc, #152]	@ (8004438 <PCD_EP_OutXfrComplete_int+0x214>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d124      	bne.n	80043ee <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ba:	461a      	mov	r2, r3
 80043bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c0:	6093      	str	r3, [r2, #8]
 80043c2:	e032      	b.n	800442a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043da:	461a      	mov	r2, r3
 80043dc:	2320      	movs	r3, #32
 80043de:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f005 f812 	bl	8009410 <HAL_PCD_DataOutStageCallback>
 80043ec:	e01d      	b.n	800442a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d114      	bne.n	800441e <PCD_EP_OutXfrComplete_int+0x1fa>
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004416:	461a      	mov	r2, r3
 8004418:	2100      	movs	r1, #0
 800441a:	f002 fd6f 	bl	8006efc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f004 fff3 	bl	8009410 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	4f54300a 	.word	0x4f54300a
 8004438:	4f54310a 	.word	0x4f54310a

0800443c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	333c      	adds	r3, #60	@ 0x3c
 8004454:	3304      	adds	r3, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d90e      	bls.n	8004490 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004488:	461a      	mov	r2, r3
 800448a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f004 ffab 	bl	80093ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d90c      	bls.n	80044b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d108      	bne.n	80044b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80044b0:	461a      	mov	r2, r3
 80044b2:	2101      	movs	r1, #1
 80044b4:	f002 fd22 	bl	8006efc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	4f54300a 	.word	0x4f54300a

080044c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
 80044d4:	4613      	mov	r3, r2
 80044d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044e6:	883b      	ldrh	r3, [r7, #0]
 80044e8:	0419      	lsls	r1, r3, #16
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044f4:	e028      	b.n	8004548 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4413      	add	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	e00d      	b.n	8004526 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	3340      	adds	r3, #64	@ 0x40
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4413      	add	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	3301      	adds	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	3b01      	subs	r3, #1
 800452c:	429a      	cmp	r2, r3
 800452e:	d3ec      	bcc.n	800450a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004530:	883b      	ldrh	r3, [r7, #0]
 8004532:	0418      	lsls	r0, r3, #16
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	3b01      	subs	r3, #1
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4302      	orrs	r2, r0
 8004540:	3340      	adds	r3, #64	@ 0x40
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	460b      	mov	r3, r1
 8004560:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045aa:	f043 0303 	orr.w	r3, r3, #3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0cc      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ec:	4b68      	ldr	r3, [pc, #416]	@ (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d90c      	bls.n	8004614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b65      	ldr	r3, [pc, #404]	@ (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b63      	ldr	r3, [pc, #396]	@ (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0b8      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d020      	beq.n	8004662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800462c:	4b59      	ldr	r3, [pc, #356]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a58      	ldr	r2, [pc, #352]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004644:	4b53      	ldr	r3, [pc, #332]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a52      	ldr	r2, [pc, #328]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800464e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004650:	4b50      	ldr	r3, [pc, #320]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	494d      	ldr	r1, [pc, #308]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d044      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	4b47      	ldr	r3, [pc, #284]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d119      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07f      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d003      	beq.n	8004696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004692:	2b03      	cmp	r3, #3
 8004694:	d107      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004696:	4b3f      	ldr	r3, [pc, #252]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e06f      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e067      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b6:	4b37      	ldr	r3, [pc, #220]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f023 0203 	bic.w	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4934      	ldr	r1, [pc, #208]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c8:	f7fc fcd2 	bl	8001070 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d0:	f7fc fcce 	bl	8001070 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e04f      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 020c 	and.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d1eb      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046f8:	4b25      	ldr	r3, [pc, #148]	@ (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d20c      	bcs.n	8004720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b22      	ldr	r3, [pc, #136]	@ (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470e:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e032      	b.n	8004786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800472c:	4b19      	ldr	r3, [pc, #100]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4916      	ldr	r1, [pc, #88]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800474a:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	490e      	ldr	r1, [pc, #56]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800475e:	f000 f821 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8004762:	4602      	mov	r2, r0
 8004764:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	091b      	lsrs	r3, r3, #4
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	490a      	ldr	r1, [pc, #40]	@ (8004798 <HAL_RCC_ClockConfig+0x1c0>)
 8004770:	5ccb      	ldrb	r3, [r1, r3]
 8004772:	fa22 f303 	lsr.w	r3, r2, r3
 8004776:	4a09      	ldr	r2, [pc, #36]	@ (800479c <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800477a:	4b09      	ldr	r3, [pc, #36]	@ (80047a0 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7fc fc32 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40023c00 	.word	0x40023c00
 8004794:	40023800 	.word	0x40023800
 8004798:	08009a54 	.word	0x08009a54
 800479c:	20000000 	.word	0x20000000
 80047a0:	20000004 	.word	0x20000004

080047a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a8:	b094      	sub	sp, #80	@ 0x50
 80047aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80047b0:	2300      	movs	r3, #0
 80047b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b4:	2300      	movs	r3, #0
 80047b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047bc:	4b79      	ldr	r3, [pc, #484]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d00d      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x40>
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	f200 80e1 	bhi.w	8004990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x34>
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d003      	beq.n	80047de <HAL_RCC_GetSysClockFreq+0x3a>
 80047d6:	e0db      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047d8:	4b73      	ldr	r3, [pc, #460]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80047da:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80047dc:	e0db      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047de:	4b73      	ldr	r3, [pc, #460]	@ (80049ac <HAL_RCC_GetSysClockFreq+0x208>)
 80047e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047e2:	e0d8      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047e4:	4b6f      	ldr	r3, [pc, #444]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ee:	4b6d      	ldr	r3, [pc, #436]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d063      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fa:	4b6a      	ldr	r3, [pc, #424]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	099b      	lsrs	r3, r3, #6
 8004800:	2200      	movs	r2, #0
 8004802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004804:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480c:	633b      	str	r3, [r7, #48]	@ 0x30
 800480e:	2300      	movs	r3, #0
 8004810:	637b      	str	r3, [r7, #52]	@ 0x34
 8004812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004816:	4622      	mov	r2, r4
 8004818:	462b      	mov	r3, r5
 800481a:	f04f 0000 	mov.w	r0, #0
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	0159      	lsls	r1, r3, #5
 8004824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004828:	0150      	lsls	r0, r2, #5
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4621      	mov	r1, r4
 8004830:	1a51      	subs	r1, r2, r1
 8004832:	6139      	str	r1, [r7, #16]
 8004834:	4629      	mov	r1, r5
 8004836:	eb63 0301 	sbc.w	r3, r3, r1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004848:	4659      	mov	r1, fp
 800484a:	018b      	lsls	r3, r1, #6
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004852:	4651      	mov	r1, sl
 8004854:	018a      	lsls	r2, r1, #6
 8004856:	4651      	mov	r1, sl
 8004858:	ebb2 0801 	subs.w	r8, r2, r1
 800485c:	4659      	mov	r1, fp
 800485e:	eb63 0901 	sbc.w	r9, r3, r1
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004876:	4690      	mov	r8, r2
 8004878:	4699      	mov	r9, r3
 800487a:	4623      	mov	r3, r4
 800487c:	eb18 0303 	adds.w	r3, r8, r3
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	462b      	mov	r3, r5
 8004884:	eb49 0303 	adc.w	r3, r9, r3
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004896:	4629      	mov	r1, r5
 8004898:	024b      	lsls	r3, r1, #9
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048a0:	4621      	mov	r1, r4
 80048a2:	024a      	lsls	r2, r1, #9
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048aa:	2200      	movs	r2, #0
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048b4:	f7fb fcb0 	bl	8000218 <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c0:	e058      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c2:	4b38      	ldr	r3, [pc, #224]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	2200      	movs	r2, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	4611      	mov	r1, r2
 80048ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048d2:	623b      	str	r3, [r7, #32]
 80048d4:	2300      	movs	r3, #0
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	f04f 0000 	mov.w	r0, #0
 80048e4:	f04f 0100 	mov.w	r1, #0
 80048e8:	0159      	lsls	r1, r3, #5
 80048ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ee:	0150      	lsls	r0, r2, #5
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4641      	mov	r1, r8
 80048f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80048fa:	4649      	mov	r1, r9
 80048fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800490c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004914:	ebb2 040a 	subs.w	r4, r2, sl
 8004918:	eb63 050b 	sbc.w	r5, r3, fp
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	00eb      	lsls	r3, r5, #3
 8004926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800492a:	00e2      	lsls	r2, r4, #3
 800492c:	4614      	mov	r4, r2
 800492e:	461d      	mov	r5, r3
 8004930:	4643      	mov	r3, r8
 8004932:	18e3      	adds	r3, r4, r3
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	464b      	mov	r3, r9
 8004938:	eb45 0303 	adc.w	r3, r5, r3
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800494a:	4629      	mov	r1, r5
 800494c:	028b      	lsls	r3, r1, #10
 800494e:	4621      	mov	r1, r4
 8004950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004954:	4621      	mov	r1, r4
 8004956:	028a      	lsls	r2, r1, #10
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800495e:	2200      	movs	r2, #0
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	61fa      	str	r2, [r7, #28]
 8004964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004968:	f7fb fc56 	bl	8000218 <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4613      	mov	r3, r2
 8004972:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	3301      	adds	r3, #1
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004984:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800498e:	e002      	b.n	8004996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004992:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004998:	4618      	mov	r0, r3
 800499a:	3750      	adds	r7, #80	@ 0x50
 800499c:	46bd      	mov	sp, r7
 800499e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	00f42400 	.word	0x00f42400
 80049ac:	007a1200 	.word	0x007a1200

080049b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b03      	ldr	r3, [pc, #12]	@ (80049c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000000 	.word	0x20000000

080049c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049cc:	f7ff fff0 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	0a9b      	lsrs	r3, r3, #10
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4903      	ldr	r1, [pc, #12]	@ (80049ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40023800 	.word	0x40023800
 80049ec:	08009a64 	.word	0x08009a64

080049f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049f4:	f7ff ffdc 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0b5b      	lsrs	r3, r3, #13
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4903      	ldr	r1, [pc, #12]	@ (8004a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40023800 	.word	0x40023800
 8004a14:	08009a64 	.word	0x08009a64

08004a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d010      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004a3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a42:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	4977      	ldr	r1, [pc, #476]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d010      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a70:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	496b      	ldr	r1, [pc, #428]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d022      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004a98:	4b63      	ldr	r3, [pc, #396]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa6:	4960      	ldr	r1, [pc, #384]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004abe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ac2:	d10c      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004ac4:	4b58      	ldr	r3, [pc, #352]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aca:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	4954      	ldr	r1, [pc, #336]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d022      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004aea:	4b4f      	ldr	r3, [pc, #316]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004af0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af8:	494b      	ldr	r1, [pc, #300]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b14:	d10c      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004b16:	4b44      	ldr	r3, [pc, #272]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b1c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	493f      	ldr	r1, [pc, #252]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 808a 	beq.w	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	4a38      	ldr	r2, [pc, #224]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b4e:	4b36      	ldr	r3, [pc, #216]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b5a:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a33      	ldr	r2, [pc, #204]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b66:	f7fc fa83 	bl	8001070 <HAL_GetTick>
 8004b6a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b6e:	f7fc fa7f 	bl	8001070 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e1d1      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b80:	4b2a      	ldr	r3, [pc, #168]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b8c:	4b26      	ldr	r3, [pc, #152]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b94:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d02f      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d028      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004baa:	4b1f      	ldr	r3, [pc, #124]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bba:	4b1d      	ldr	r3, [pc, #116]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bc0:	4a19      	ldr	r2, [pc, #100]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bc6:	4b18      	ldr	r3, [pc, #96]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d114      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004bd2:	f7fc fa4d 	bl	8001070 <HAL_GetTick>
 8004bd6:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fc fa49 	bl	8001070 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e199      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ee      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c08:	d114      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004c0a:	4b07      	ldr	r3, [pc, #28]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1e:	4902      	ldr	r1, [pc, #8]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]
 8004c24:	e00c      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004c26:	bf00      	nop
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	42470e40 	.word	0x42470e40
 8004c34:	4b89      	ldr	r3, [pc, #548]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a88      	ldr	r2, [pc, #544]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c3e:	6093      	str	r3, [r2, #8]
 8004c40:	4b86      	ldr	r3, [pc, #536]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4c:	4983      	ldr	r1, [pc, #524]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8004c64:	4b7e      	ldr	r3, [pc, #504]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004c66:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004c74:	4b79      	ldr	r3, [pc, #484]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	4976      	ldr	r1, [pc, #472]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d011      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c96:	4b71      	ldr	r3, [pc, #452]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c9c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca4:	496d      	ldr	r1, [pc, #436]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb4:	d101      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004cc6:	4b65      	ldr	r3, [pc, #404]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ccc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd4:	4961      	ldr	r1, [pc, #388]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d004      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	f040 80c6 	bne.w	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cec:	4b5d      	ldr	r3, [pc, #372]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf2:	f7fc f9bd 	bl	8001070 <HAL_GetTick>
 8004cf6:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cfa:	f7fc f9b9 	bl	8001070 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e10b      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d0c:	4b53      	ldr	r3, [pc, #332]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f0      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004d18:	4a53      	ldr	r2, [pc, #332]	@ (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d023      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d019      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d5c:	d00e      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d019      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d115      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d7a:	d110      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	019b      	lsls	r3, r3, #6
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	061b      	lsls	r3, r3, #24
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	4931      	ldr	r1, [pc, #196]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d026      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d122      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dc6:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dcc:	0e1b      	lsrs	r3, r3, #24
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	019b      	lsls	r3, r3, #6
 8004dde:	431a      	orrs	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	061b      	lsls	r3, r3, #24
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	071b      	lsls	r3, r3, #28
 8004dec:	491b      	ldr	r1, [pc, #108]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004df4:	4b19      	ldr	r3, [pc, #100]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dfa:	f023 021f 	bic.w	r2, r3, #31
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	4915      	ldr	r1, [pc, #84]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	061b      	lsls	r3, r3, #24
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	071b      	lsls	r3, r3, #28
 8004e32:	490a      	ldr	r1, [pc, #40]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e40:	f7fc f916 	bl	8001070 <HAL_GetTick>
 8004e44:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e46:	e011      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e48:	f7fc f912 	bl	8001070 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d90a      	bls.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e064      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	424711e0 	.word	0x424711e0
 8004e64:	42470068 	.word	0x42470068
 8004e68:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0e7      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e84:	4b29      	ldr	r3, [pc, #164]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e92:	4926      	ldr	r1, [pc, #152]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ea6:	4b21      	ldr	r3, [pc, #132]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb4:	491d      	ldr	r1, [pc, #116]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004ec8:	4b18      	ldr	r3, [pc, #96]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ece:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed6:	4915      	ldr	r1, [pc, #84]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004eea:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ef0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	490c      	ldr	r1, [pc, #48]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f12:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	4904      	ldr	r1, [pc, #16]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40023800 	.word	0x40023800

08004f30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e273      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d075      	beq.n	800503a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f4e:	4b88      	ldr	r3, [pc, #544]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d00c      	beq.n	8004f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5a:	4b85      	ldr	r3, [pc, #532]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d112      	bne.n	8004f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f66:	4b82      	ldr	r3, [pc, #520]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f72:	d10b      	bne.n	8004f8c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f74:	4b7e      	ldr	r3, [pc, #504]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d05b      	beq.n	8005038 <HAL_RCC_OscConfig+0x108>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d157      	bne.n	8005038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e24e      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f94:	d106      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x74>
 8004f96:	4b76      	ldr	r3, [pc, #472]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a75      	ldr	r2, [pc, #468]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e01d      	b.n	8004fe0 <HAL_RCC_OscConfig+0xb0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fac:	d10c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x98>
 8004fae:	4b70      	ldr	r3, [pc, #448]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a6f      	ldr	r2, [pc, #444]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	4b6d      	ldr	r3, [pc, #436]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a6c      	ldr	r2, [pc, #432]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	e00b      	b.n	8004fe0 <HAL_RCC_OscConfig+0xb0>
 8004fc8:	4b69      	ldr	r3, [pc, #420]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a68      	ldr	r2, [pc, #416]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	4b66      	ldr	r3, [pc, #408]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a65      	ldr	r2, [pc, #404]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8004fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d013      	beq.n	8005010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fc f842 	bl	8001070 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff0:	f7fc f83e 	bl	8001070 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	@ 0x64
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e213      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b5b      	ldr	r3, [pc, #364]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0xc0>
 800500e:	e014      	b.n	800503a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005010:	f7fc f82e 	bl	8001070 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005018:	f7fc f82a 	bl	8001070 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b64      	cmp	r3, #100	@ 0x64
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1ff      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502a:	4b51      	ldr	r3, [pc, #324]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0xe8>
 8005036:	e000      	b.n	800503a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d063      	beq.n	800510e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005046:	4b4a      	ldr	r3, [pc, #296]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005052:	4b47      	ldr	r3, [pc, #284]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800505a:	2b08      	cmp	r3, #8
 800505c:	d11c      	bne.n	8005098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800505e:	4b44      	ldr	r3, [pc, #272]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d116      	bne.n	8005098 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506a:	4b41      	ldr	r3, [pc, #260]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d005      	beq.n	8005082 <HAL_RCC_OscConfig+0x152>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d001      	beq.n	8005082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e1d3      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005082:	4b3b      	ldr	r3, [pc, #236]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4937      	ldr	r1, [pc, #220]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8005092:	4313      	orrs	r3, r2
 8005094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005096:	e03a      	b.n	800510e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d020      	beq.n	80050e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a0:	4b34      	ldr	r3, [pc, #208]	@ (8005174 <HAL_RCC_OscConfig+0x244>)
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7fb ffe3 	bl	8001070 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ae:	f7fb ffdf 	bl	8001070 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e1b4      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050cc:	4b28      	ldr	r3, [pc, #160]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4925      	ldr	r1, [pc, #148]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	600b      	str	r3, [r1, #0]
 80050e0:	e015      	b.n	800510e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e2:	4b24      	ldr	r3, [pc, #144]	@ (8005174 <HAL_RCC_OscConfig+0x244>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fb ffc2 	bl	8001070 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f0:	f7fb ffbe 	bl	8001070 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e193      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005102:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d036      	beq.n	8005188 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d016      	beq.n	8005150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005122:	4b15      	ldr	r3, [pc, #84]	@ (8005178 <HAL_RCC_OscConfig+0x248>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005128:	f7fb ffa2 	bl	8001070 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005130:	f7fb ff9e 	bl	8001070 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e173      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005142:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <HAL_RCC_OscConfig+0x240>)
 8005144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0x200>
 800514e:	e01b      	b.n	8005188 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005150:	4b09      	ldr	r3, [pc, #36]	@ (8005178 <HAL_RCC_OscConfig+0x248>)
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005156:	f7fb ff8b 	bl	8001070 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800515c:	e00e      	b.n	800517c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800515e:	f7fb ff87 	bl	8001070 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d907      	bls.n	800517c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e15c      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
 8005170:	40023800 	.word	0x40023800
 8005174:	42470000 	.word	0x42470000
 8005178:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800517c:	4b8a      	ldr	r3, [pc, #552]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 800517e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1ea      	bne.n	800515e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8097 	beq.w	80052c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005196:	2300      	movs	r3, #0
 8005198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519a:	4b83      	ldr	r3, [pc, #524]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10f      	bne.n	80051c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	4b7f      	ldr	r3, [pc, #508]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	4a7e      	ldr	r2, [pc, #504]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051b6:	4b7c      	ldr	r3, [pc, #496]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c2:	2301      	movs	r3, #1
 80051c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c6:	4b79      	ldr	r3, [pc, #484]	@ (80053ac <HAL_RCC_OscConfig+0x47c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d118      	bne.n	8005204 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d2:	4b76      	ldr	r3, [pc, #472]	@ (80053ac <HAL_RCC_OscConfig+0x47c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a75      	ldr	r2, [pc, #468]	@ (80053ac <HAL_RCC_OscConfig+0x47c>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051de:	f7fb ff47 	bl	8001070 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7fb ff43 	bl	8001070 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e118      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f8:	4b6c      	ldr	r3, [pc, #432]	@ (80053ac <HAL_RCC_OscConfig+0x47c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <HAL_RCC_OscConfig+0x2ea>
 800520c:	4b66      	ldr	r3, [pc, #408]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 800520e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005210:	4a65      	ldr	r2, [pc, #404]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	6713      	str	r3, [r2, #112]	@ 0x70
 8005218:	e01c      	b.n	8005254 <HAL_RCC_OscConfig+0x324>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b05      	cmp	r3, #5
 8005220:	d10c      	bne.n	800523c <HAL_RCC_OscConfig+0x30c>
 8005222:	4b61      	ldr	r3, [pc, #388]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005226:	4a60      	ldr	r2, [pc, #384]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005228:	f043 0304 	orr.w	r3, r3, #4
 800522c:	6713      	str	r3, [r2, #112]	@ 0x70
 800522e:	4b5e      	ldr	r3, [pc, #376]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005232:	4a5d      	ldr	r2, [pc, #372]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	6713      	str	r3, [r2, #112]	@ 0x70
 800523a:	e00b      	b.n	8005254 <HAL_RCC_OscConfig+0x324>
 800523c:	4b5a      	ldr	r3, [pc, #360]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005240:	4a59      	ldr	r2, [pc, #356]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	6713      	str	r3, [r2, #112]	@ 0x70
 8005248:	4b57      	ldr	r3, [pc, #348]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524c:	4a56      	ldr	r2, [pc, #344]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 800524e:	f023 0304 	bic.w	r3, r3, #4
 8005252:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d015      	beq.n	8005288 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525c:	f7fb ff08 	bl	8001070 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005262:	e00a      	b.n	800527a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005264:	f7fb ff04 	bl	8001070 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e0d7      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527a:	4b4b      	ldr	r3, [pc, #300]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0ee      	beq.n	8005264 <HAL_RCC_OscConfig+0x334>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005288:	f7fb fef2 	bl	8001070 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528e:	e00a      	b.n	80052a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005290:	f7fb feee 	bl	8001070 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e0c1      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a6:	4b40      	ldr	r3, [pc, #256]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1ee      	bne.n	8005290 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d105      	bne.n	80052c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b8:	4b3b      	ldr	r3, [pc, #236]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 80052ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052bc:	4a3a      	ldr	r2, [pc, #232]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 80052be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 80ad 	beq.w	8005428 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052ce:	4b36      	ldr	r3, [pc, #216]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 030c 	and.w	r3, r3, #12
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d060      	beq.n	800539c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d145      	bne.n	800536e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b33      	ldr	r3, [pc, #204]	@ (80053b0 <HAL_RCC_OscConfig+0x480>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e8:	f7fb fec2 	bl	8001070 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fb febe 	bl	8001070 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e093      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005302:	4b29      	ldr	r3, [pc, #164]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69da      	ldr	r2, [r3, #28]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	019b      	lsls	r3, r3, #6
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	3b01      	subs	r3, #1
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005330:	061b      	lsls	r3, r3, #24
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	071b      	lsls	r3, r3, #28
 800533a:	491b      	ldr	r1, [pc, #108]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005340:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <HAL_RCC_OscConfig+0x480>)
 8005342:	2201      	movs	r2, #1
 8005344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005346:	f7fb fe93 	bl	8001070 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534e:	f7fb fe8f 	bl	8001070 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e064      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005360:	4b11      	ldr	r3, [pc, #68]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCC_OscConfig+0x41e>
 800536c:	e05c      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536e:	4b10      	ldr	r3, [pc, #64]	@ (80053b0 <HAL_RCC_OscConfig+0x480>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fb fe7c 	bl	8001070 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537c:	f7fb fe78 	bl	8001070 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e04d      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538e:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <HAL_RCC_OscConfig+0x478>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x44c>
 800539a:	e045      	b.n	8005428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d107      	bne.n	80053b4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e040      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40007000 	.word	0x40007000
 80053b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005434 <HAL_RCC_OscConfig+0x504>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d030      	beq.n	8005424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d129      	bne.n	8005424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	429a      	cmp	r2, r3
 80053dc:	d122      	bne.n	8005424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d119      	bne.n	8005424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005400:	429a      	cmp	r2, r3
 8005402:	d10f      	bne.n	8005424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005410:	429a      	cmp	r2, r3
 8005412:	d107      	bne.n	8005424 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800

08005438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e07b      	b.n	8005542 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d108      	bne.n	8005464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800545a:	d009      	beq.n	8005470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	61da      	str	r2, [r3, #28]
 8005462:	e005      	b.n	8005470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fb fc10 	bl	8000cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	ea42 0103 	orr.w	r1, r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	f003 0104 	and.w	r1, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	f003 0210 	and.w	r2, r3, #16
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005530:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e03f      	b.n	80055dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fb fc59 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2224      	movs	r2, #36	@ 0x24
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800558c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f828 	bl	80055e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695a      	ldr	r2, [r3, #20]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e8:	b0c0      	sub	sp, #256	@ 0x100
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005600:	68d9      	ldr	r1, [r3, #12]
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	ea40 0301 	orr.w	r3, r0, r1
 800560c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	431a      	orrs	r2, r3
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	431a      	orrs	r2, r3
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800563c:	f021 010c 	bic.w	r1, r1, #12
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800564a:	430b      	orrs	r3, r1
 800564c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565e:	6999      	ldr	r1, [r3, #24]
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	ea40 0301 	orr.w	r3, r0, r1
 800566a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4b95      	ldr	r3, [pc, #596]	@ (80058c8 <UART_SetConfig+0x2e4>)
 8005674:	429a      	cmp	r2, r3
 8005676:	d011      	beq.n	800569c <UART_SetConfig+0xb8>
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b93      	ldr	r3, [pc, #588]	@ (80058cc <UART_SetConfig+0x2e8>)
 8005680:	429a      	cmp	r2, r3
 8005682:	d00b      	beq.n	800569c <UART_SetConfig+0xb8>
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b91      	ldr	r3, [pc, #580]	@ (80058d0 <UART_SetConfig+0x2ec>)
 800568c:	429a      	cmp	r2, r3
 800568e:	d005      	beq.n	800569c <UART_SetConfig+0xb8>
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b8f      	ldr	r3, [pc, #572]	@ (80058d4 <UART_SetConfig+0x2f0>)
 8005698:	429a      	cmp	r2, r3
 800569a:	d104      	bne.n	80056a6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7ff f9a8 	bl	80049f0 <HAL_RCC_GetPCLK2Freq>
 80056a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056a4:	e003      	b.n	80056ae <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056a6:	f7ff f98f 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 80056aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056b8:	f040 8110 	bne.w	80058dc <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c0:	2200      	movs	r2, #0
 80056c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056ce:	4622      	mov	r2, r4
 80056d0:	462b      	mov	r3, r5
 80056d2:	1891      	adds	r1, r2, r2
 80056d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056d6:	415b      	adcs	r3, r3
 80056d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056de:	4621      	mov	r1, r4
 80056e0:	eb12 0801 	adds.w	r8, r2, r1
 80056e4:	4629      	mov	r1, r5
 80056e6:	eb43 0901 	adc.w	r9, r3, r1
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056fe:	4690      	mov	r8, r2
 8005700:	4699      	mov	r9, r3
 8005702:	4623      	mov	r3, r4
 8005704:	eb18 0303 	adds.w	r3, r8, r3
 8005708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800570c:	462b      	mov	r3, r5
 800570e:	eb49 0303 	adc.w	r3, r9, r3
 8005712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005722:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800572a:	460b      	mov	r3, r1
 800572c:	18db      	adds	r3, r3, r3
 800572e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005730:	4613      	mov	r3, r2
 8005732:	eb42 0303 	adc.w	r3, r2, r3
 8005736:	657b      	str	r3, [r7, #84]	@ 0x54
 8005738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800573c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005740:	f7fa fd6a 	bl	8000218 <__aeabi_uldivmod>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4b63      	ldr	r3, [pc, #396]	@ (80058d8 <UART_SetConfig+0x2f4>)
 800574a:	fba3 2302 	umull	r2, r3, r3, r2
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	011c      	lsls	r4, r3, #4
 8005752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005756:	2200      	movs	r2, #0
 8005758:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800575c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005764:	4642      	mov	r2, r8
 8005766:	464b      	mov	r3, r9
 8005768:	1891      	adds	r1, r2, r2
 800576a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800576c:	415b      	adcs	r3, r3
 800576e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005774:	4641      	mov	r1, r8
 8005776:	eb12 0a01 	adds.w	sl, r2, r1
 800577a:	4649      	mov	r1, r9
 800577c:	eb43 0b01 	adc.w	fp, r3, r1
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800578c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005794:	4692      	mov	sl, r2
 8005796:	469b      	mov	fp, r3
 8005798:	4643      	mov	r3, r8
 800579a:	eb1a 0303 	adds.w	r3, sl, r3
 800579e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057a2:	464b      	mov	r3, r9
 80057a4:	eb4b 0303 	adc.w	r3, fp, r3
 80057a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057c0:	460b      	mov	r3, r1
 80057c2:	18db      	adds	r3, r3, r3
 80057c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057c6:	4613      	mov	r3, r2
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057d6:	f7fa fd1f 	bl	8000218 <__aeabi_uldivmod>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4611      	mov	r1, r2
 80057e0:	4b3d      	ldr	r3, [pc, #244]	@ (80058d8 <UART_SetConfig+0x2f4>)
 80057e2:	fba3 2301 	umull	r2, r3, r3, r1
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	2264      	movs	r2, #100	@ 0x64
 80057ea:	fb02 f303 	mul.w	r3, r2, r3
 80057ee:	1acb      	subs	r3, r1, r3
 80057f0:	00db      	lsls	r3, r3, #3
 80057f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057f6:	4b38      	ldr	r3, [pc, #224]	@ (80058d8 <UART_SetConfig+0x2f4>)
 80057f8:	fba3 2302 	umull	r2, r3, r3, r2
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005804:	441c      	add	r4, r3
 8005806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580a:	2200      	movs	r2, #0
 800580c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005810:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005818:	4642      	mov	r2, r8
 800581a:	464b      	mov	r3, r9
 800581c:	1891      	adds	r1, r2, r2
 800581e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005820:	415b      	adcs	r3, r3
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005828:	4641      	mov	r1, r8
 800582a:	1851      	adds	r1, r2, r1
 800582c:	6339      	str	r1, [r7, #48]	@ 0x30
 800582e:	4649      	mov	r1, r9
 8005830:	414b      	adcs	r3, r1
 8005832:	637b      	str	r3, [r7, #52]	@ 0x34
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005840:	4659      	mov	r1, fp
 8005842:	00cb      	lsls	r3, r1, #3
 8005844:	4651      	mov	r1, sl
 8005846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800584a:	4651      	mov	r1, sl
 800584c:	00ca      	lsls	r2, r1, #3
 800584e:	4610      	mov	r0, r2
 8005850:	4619      	mov	r1, r3
 8005852:	4603      	mov	r3, r0
 8005854:	4642      	mov	r2, r8
 8005856:	189b      	adds	r3, r3, r2
 8005858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800585c:	464b      	mov	r3, r9
 800585e:	460a      	mov	r2, r1
 8005860:	eb42 0303 	adc.w	r3, r2, r3
 8005864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005874:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800587c:	460b      	mov	r3, r1
 800587e:	18db      	adds	r3, r3, r3
 8005880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005882:	4613      	mov	r3, r2
 8005884:	eb42 0303 	adc.w	r3, r2, r3
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800588a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800588e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005892:	f7fa fcc1 	bl	8000218 <__aeabi_uldivmod>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4b0f      	ldr	r3, [pc, #60]	@ (80058d8 <UART_SetConfig+0x2f4>)
 800589c:	fba3 1302 	umull	r1, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	2164      	movs	r1, #100	@ 0x64
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	3332      	adds	r3, #50	@ 0x32
 80058ae:	4a0a      	ldr	r2, [pc, #40]	@ (80058d8 <UART_SetConfig+0x2f4>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f003 0207 	and.w	r2, r3, #7
 80058ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4422      	add	r2, r4
 80058c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058c4:	e10a      	b.n	8005adc <UART_SetConfig+0x4f8>
 80058c6:	bf00      	nop
 80058c8:	40011000 	.word	0x40011000
 80058cc:	40011400 	.word	0x40011400
 80058d0:	40011800 	.word	0x40011800
 80058d4:	40011c00 	.word	0x40011c00
 80058d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058ee:	4642      	mov	r2, r8
 80058f0:	464b      	mov	r3, r9
 80058f2:	1891      	adds	r1, r2, r2
 80058f4:	6239      	str	r1, [r7, #32]
 80058f6:	415b      	adcs	r3, r3
 80058f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058fe:	4641      	mov	r1, r8
 8005900:	1854      	adds	r4, r2, r1
 8005902:	4649      	mov	r1, r9
 8005904:	eb43 0501 	adc.w	r5, r3, r1
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	00eb      	lsls	r3, r5, #3
 8005912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005916:	00e2      	lsls	r2, r4, #3
 8005918:	4614      	mov	r4, r2
 800591a:	461d      	mov	r5, r3
 800591c:	4643      	mov	r3, r8
 800591e:	18e3      	adds	r3, r4, r3
 8005920:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005924:	464b      	mov	r3, r9
 8005926:	eb45 0303 	adc.w	r3, r5, r3
 800592a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800593a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800594a:	4629      	mov	r1, r5
 800594c:	008b      	lsls	r3, r1, #2
 800594e:	4621      	mov	r1, r4
 8005950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005954:	4621      	mov	r1, r4
 8005956:	008a      	lsls	r2, r1, #2
 8005958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800595c:	f7fa fc5c 	bl	8000218 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b60      	ldr	r3, [pc, #384]	@ (8005ae8 <UART_SetConfig+0x504>)
 8005966:	fba3 2302 	umull	r2, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	011c      	lsls	r4, r3, #4
 800596e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005978:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800597c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	1891      	adds	r1, r2, r2
 8005986:	61b9      	str	r1, [r7, #24]
 8005988:	415b      	adcs	r3, r3
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005990:	4641      	mov	r1, r8
 8005992:	1851      	adds	r1, r2, r1
 8005994:	6139      	str	r1, [r7, #16]
 8005996:	4649      	mov	r1, r9
 8005998:	414b      	adcs	r3, r1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059a8:	4659      	mov	r1, fp
 80059aa:	00cb      	lsls	r3, r1, #3
 80059ac:	4651      	mov	r1, sl
 80059ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b2:	4651      	mov	r1, sl
 80059b4:	00ca      	lsls	r2, r1, #3
 80059b6:	4610      	mov	r0, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	4642      	mov	r2, r8
 80059be:	189b      	adds	r3, r3, r2
 80059c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059c4:	464b      	mov	r3, r9
 80059c6:	460a      	mov	r2, r1
 80059c8:	eb42 0303 	adc.w	r3, r2, r3
 80059cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059e8:	4649      	mov	r1, r9
 80059ea:	008b      	lsls	r3, r1, #2
 80059ec:	4641      	mov	r1, r8
 80059ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f2:	4641      	mov	r1, r8
 80059f4:	008a      	lsls	r2, r1, #2
 80059f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059fa:	f7fa fc0d 	bl	8000218 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	4b38      	ldr	r3, [pc, #224]	@ (8005ae8 <UART_SetConfig+0x504>)
 8005a06:	fba3 2301 	umull	r2, r3, r3, r1
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	2264      	movs	r2, #100	@ 0x64
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	1acb      	subs	r3, r1, r3
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	3332      	adds	r3, #50	@ 0x32
 8005a18:	4a33      	ldr	r2, [pc, #204]	@ (8005ae8 <UART_SetConfig+0x504>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a24:	441c      	add	r4, r3
 8005a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a44:	4641      	mov	r1, r8
 8005a46:	1851      	adds	r1, r2, r1
 8005a48:	6039      	str	r1, [r7, #0]
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	414b      	adcs	r3, r1
 8005a4e:	607b      	str	r3, [r7, #4]
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	00cb      	lsls	r3, r1, #3
 8005a60:	4651      	mov	r1, sl
 8005a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a66:	4651      	mov	r1, sl
 8005a68:	00ca      	lsls	r2, r1, #3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4642      	mov	r2, r8
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a76:	464b      	mov	r3, r9
 8005a78:	460a      	mov	r2, r1
 8005a7a:	eb42 0303 	adc.w	r3, r2, r3
 8005a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a98:	4649      	mov	r1, r9
 8005a9a:	008b      	lsls	r3, r1, #2
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	008a      	lsls	r2, r1, #2
 8005aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005aaa:	f7fa fbb5 	bl	8000218 <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <UART_SetConfig+0x504>)
 8005ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2164      	movs	r1, #100	@ 0x64
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	3332      	adds	r3, #50	@ 0x32
 8005ac6:	4a08      	ldr	r2, [pc, #32]	@ (8005ae8 <UART_SetConfig+0x504>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4422      	add	r2, r4
 8005ada:	609a      	str	r2, [r3, #8]
}
 8005adc:	bf00      	nop
 8005ade:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae8:	51eb851f 	.word	0x51eb851f

08005aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aec:	b084      	sub	sp, #16
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	f107 001c 	add.w	r0, r7, #28
 8005afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d122      	bne.n	8005b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f001 fa3a 	bl	8006fb8 <USB_CoreReset>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	e01a      	b.n	8005b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 fa2e 	bl	8006fb8 <USB_CoreReset>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b72:	e005      	b.n	8005b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d10b      	bne.n	8005b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f043 0206 	orr.w	r2, r3, #6
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005baa:	b004      	add	sp, #16
 8005bac:	4770      	bx	lr
	...

08005bb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d165      	bne.n	8005c90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4a41      	ldr	r2, [pc, #260]	@ (8005ccc <USB_SetTurnaroundTime+0x11c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d906      	bls.n	8005bda <USB_SetTurnaroundTime+0x2a>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4a40      	ldr	r2, [pc, #256]	@ (8005cd0 <USB_SetTurnaroundTime+0x120>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d202      	bcs.n	8005bda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005bd4:	230f      	movs	r3, #15
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e062      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd0 <USB_SetTurnaroundTime+0x120>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d306      	bcc.n	8005bf0 <USB_SetTurnaroundTime+0x40>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4a3b      	ldr	r2, [pc, #236]	@ (8005cd4 <USB_SetTurnaroundTime+0x124>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d202      	bcs.n	8005bf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005bea:	230e      	movs	r3, #14
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	e057      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4a38      	ldr	r2, [pc, #224]	@ (8005cd4 <USB_SetTurnaroundTime+0x124>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d306      	bcc.n	8005c06 <USB_SetTurnaroundTime+0x56>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4a37      	ldr	r2, [pc, #220]	@ (8005cd8 <USB_SetTurnaroundTime+0x128>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d202      	bcs.n	8005c06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c00:	230d      	movs	r3, #13
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e04c      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4a33      	ldr	r2, [pc, #204]	@ (8005cd8 <USB_SetTurnaroundTime+0x128>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d306      	bcc.n	8005c1c <USB_SetTurnaroundTime+0x6c>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a32      	ldr	r2, [pc, #200]	@ (8005cdc <USB_SetTurnaroundTime+0x12c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d802      	bhi.n	8005c1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c16:	230c      	movs	r3, #12
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e041      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8005cdc <USB_SetTurnaroundTime+0x12c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d906      	bls.n	8005c32 <USB_SetTurnaroundTime+0x82>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4a2e      	ldr	r2, [pc, #184]	@ (8005ce0 <USB_SetTurnaroundTime+0x130>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d802      	bhi.n	8005c32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c2c:	230b      	movs	r3, #11
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e036      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce0 <USB_SetTurnaroundTime+0x130>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d906      	bls.n	8005c48 <USB_SetTurnaroundTime+0x98>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4a29      	ldr	r2, [pc, #164]	@ (8005ce4 <USB_SetTurnaroundTime+0x134>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d802      	bhi.n	8005c48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c42:	230a      	movs	r3, #10
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	e02b      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4a26      	ldr	r2, [pc, #152]	@ (8005ce4 <USB_SetTurnaroundTime+0x134>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d906      	bls.n	8005c5e <USB_SetTurnaroundTime+0xae>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4a25      	ldr	r2, [pc, #148]	@ (8005ce8 <USB_SetTurnaroundTime+0x138>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d202      	bcs.n	8005c5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c58:	2309      	movs	r3, #9
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	e020      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4a21      	ldr	r2, [pc, #132]	@ (8005ce8 <USB_SetTurnaroundTime+0x138>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d306      	bcc.n	8005c74 <USB_SetTurnaroundTime+0xc4>
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	4a20      	ldr	r2, [pc, #128]	@ (8005cec <USB_SetTurnaroundTime+0x13c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d802      	bhi.n	8005c74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c6e:	2308      	movs	r3, #8
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e015      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a1d      	ldr	r2, [pc, #116]	@ (8005cec <USB_SetTurnaroundTime+0x13c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d906      	bls.n	8005c8a <USB_SetTurnaroundTime+0xda>
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf0 <USB_SetTurnaroundTime+0x140>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d202      	bcs.n	8005c8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c84:	2307      	movs	r3, #7
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e00a      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c8a:	2306      	movs	r3, #6
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e007      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c96:	2309      	movs	r3, #9
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e001      	b.n	8005ca0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c9c:	2309      	movs	r3, #9
 8005c9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	029b      	lsls	r3, r3, #10
 8005cb4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	00d8acbf 	.word	0x00d8acbf
 8005cd0:	00e4e1c0 	.word	0x00e4e1c0
 8005cd4:	00f42400 	.word	0x00f42400
 8005cd8:	01067380 	.word	0x01067380
 8005cdc:	011a499f 	.word	0x011a499f
 8005ce0:	01312cff 	.word	0x01312cff
 8005ce4:	014ca43f 	.word	0x014ca43f
 8005ce8:	016e3600 	.word	0x016e3600
 8005cec:	01a6ab1f 	.word	0x01a6ab1f
 8005cf0:	01e84800 	.word	0x01e84800

08005cf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f043 0201 	orr.w	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d115      	bne.n	8005d86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d66:	2001      	movs	r0, #1
 8005d68:	f7fb f98e 	bl	8001088 <HAL_Delay>
      ms++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 f890 	bl	8006e98 <USB_GetMode>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d01e      	beq.n	8005dbc <USB_SetCurrentMode+0x84>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b31      	cmp	r3, #49	@ 0x31
 8005d82:	d9f0      	bls.n	8005d66 <USB_SetCurrentMode+0x2e>
 8005d84:	e01a      	b.n	8005dbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d115      	bne.n	8005db8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d98:	2001      	movs	r0, #1
 8005d9a:	f7fb f975 	bl	8001088 <HAL_Delay>
      ms++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 f877 	bl	8006e98 <USB_GetMode>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <USB_SetCurrentMode+0x84>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b31      	cmp	r3, #49	@ 0x31
 8005db4:	d9f0      	bls.n	8005d98 <USB_SetCurrentMode+0x60>
 8005db6:	e001      	b.n	8005dbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e005      	b.n	8005dc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b32      	cmp	r3, #50	@ 0x32
 8005dc0:	d101      	bne.n	8005dc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b086      	sub	sp, #24
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	e009      	b.n	8005e04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3340      	adds	r3, #64	@ 0x40
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3301      	adds	r3, #1
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b0e      	cmp	r3, #14
 8005e08:	d9f2      	bls.n	8005df0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11c      	bne.n	8005e4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e1e:	f043 0302 	orr.w	r3, r3, #2
 8005e22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	e005      	b.n	8005e56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e68:	4619      	mov	r1, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e70:	461a      	mov	r2, r3
 8005e72:	680b      	ldr	r3, [r1, #0]
 8005e74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d10c      	bne.n	8005e96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e82:	2100      	movs	r1, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f945 	bl	8006114 <USB_SetDevSpeed>
 8005e8a:	e008      	b.n	8005e9e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f940 	bl	8006114 <USB_SetDevSpeed>
 8005e94:	e003      	b.n	8005e9e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e96:	2103      	movs	r1, #3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f93b 	bl	8006114 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e9e:	2110      	movs	r1, #16
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f8f3 	bl	800608c <USB_FlushTxFifo>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f90f 	bl	80060d4 <USB_FlushRxFifo>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	e043      	b.n	8005f72 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f00:	d118      	bne.n	8005f34 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10a      	bne.n	8005f1e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f14:	461a      	mov	r2, r3
 8005f16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	e013      	b.n	8005f46 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e008      	b.n	8005f46 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f40:	461a      	mov	r2, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f52:	461a      	mov	r2, r3
 8005f54:	2300      	movs	r3, #0
 8005f56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f64:	461a      	mov	r2, r3
 8005f66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d3b7      	bcc.n	8005eea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	e043      	b.n	8006008 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f96:	d118      	bne.n	8005fca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005faa:	461a      	mov	r2, r3
 8005fac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e013      	b.n	8005fdc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e008      	b.n	8005fdc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006000:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	3301      	adds	r3, #1
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d3b7      	bcc.n	8005f80 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800601e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006022:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006030:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	2b00      	cmp	r3, #0
 8006036:	d105      	bne.n	8006044 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	f043 0210 	orr.w	r2, r3, #16
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699a      	ldr	r2, [r3, #24]
 8006048:	4b0f      	ldr	r3, [pc, #60]	@ (8006088 <USB_DevInit+0x2b8>)
 800604a:	4313      	orrs	r3, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f043 0208 	orr.w	r2, r3, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d107      	bne.n	8006078 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006070:	f043 0304 	orr.w	r3, r3, #4
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr
 8006088:	803c3800 	.word	0x803c3800

0800608c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	019b      	lsls	r3, r3, #6
 800609e:	f043 0220 	orr.w	r2, r3, #32
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	4a08      	ldr	r2, [pc, #32]	@ (80060d0 <USB_FlushTxFifo+0x44>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e006      	b.n	80060c4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d0f1      	beq.n	80060a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	00030d40 	.word	0x00030d40

080060d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2210      	movs	r2, #16
 80060e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3301      	adds	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	4a08      	ldr	r2, [pc, #32]	@ (8006110 <USB_FlushRxFifo+0x3c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e006      	b.n	8006104 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b10      	cmp	r3, #16
 8006100:	d0f1      	beq.n	80060e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	00030d40 	.word	0x00030d40

08006114 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006146:	b480      	push	{r7}
 8006148:	b087      	sub	sp, #28
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0306 	and.w	r3, r3, #6
 800615e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]
 800616a:	e00a      	b.n	8006182 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d002      	beq.n	8006178 <USB_GetDevSpeed+0x32>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b06      	cmp	r3, #6
 8006176:	d102      	bne.n	800617e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006178:	2302      	movs	r3, #2
 800617a:	75fb      	strb	r3, [r7, #23]
 800617c:	e001      	b.n	8006182 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800617e:	230f      	movs	r3, #15
 8006180:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006182:	7dfb      	ldrb	r3, [r7, #23]
}
 8006184:	4618      	mov	r0, r3
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d13a      	bne.n	8006222 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	2101      	movs	r1, #1
 80061be:	fa01 f303 	lsl.w	r3, r1, r3
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d155      	bne.n	8006290 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	78db      	ldrb	r3, [r3, #3]
 80061fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006200:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	059b      	lsls	r3, r3, #22
 8006206:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006208:	4313      	orrs	r3, r2
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	e036      	b.n	8006290 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006228:	69da      	ldr	r2, [r3, #28]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	2101      	movs	r1, #1
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	041b      	lsls	r3, r3, #16
 800623a:	68f9      	ldr	r1, [r7, #12]
 800623c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006240:	4313      	orrs	r3, r2
 8006242:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11a      	bne.n	8006290 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	78db      	ldrb	r3, [r3, #3]
 8006274:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006276:	430b      	orrs	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800628e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	@ 0x28
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	f040 815c 	bne.w	800657a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d132      	bne.n	8006330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006308:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800630c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006328:	0cdb      	lsrs	r3, r3, #19
 800632a:	04db      	lsls	r3, r3, #19
 800632c:	6113      	str	r3, [r2, #16]
 800632e:	e074      	b.n	800641a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	0151      	lsls	r1, r2, #5
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	440a      	add	r2, r1
 8006346:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800634a:	0cdb      	lsrs	r3, r3, #19
 800634c:	04db      	lsls	r3, r3, #19
 800634e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800636a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800636e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006380:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6959      	ldr	r1, [r3, #20]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	440b      	add	r3, r1
 800638c:	1e59      	subs	r1, r3, #1
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	fbb1 f3f3 	udiv	r3, r1, r3
 8006396:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006398:	4b9d      	ldr	r3, [pc, #628]	@ (8006610 <USB_EPStartXfer+0x370>)
 800639a:	400b      	ands	r3, r1
 800639c:	69b9      	ldr	r1, [r7, #24]
 800639e:	0148      	lsls	r0, r1, #5
 80063a0:	69f9      	ldr	r1, [r7, #28]
 80063a2:	4401      	add	r1, r0
 80063a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063a8:	4313      	orrs	r3, r2
 80063aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c2:	69b9      	ldr	r1, [r7, #24]
 80063c4:	0148      	lsls	r0, r1, #5
 80063c6:	69f9      	ldr	r1, [r7, #28]
 80063c8:	4401      	add	r1, r0
 80063ca:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063ce:	4313      	orrs	r3, r2
 80063d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	78db      	ldrb	r3, [r3, #3]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d11f      	bne.n	800641a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80063f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006414:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006418:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d14b      	bne.n	80064b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d009      	beq.n	800643c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	461a      	mov	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	78db      	ldrb	r3, [r3, #3]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d128      	bne.n	8006496 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006450:	2b00      	cmp	r3, #0
 8006452:	d110      	bne.n	8006476 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800646e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e00f      	b.n	8006496 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	440a      	add	r2, r1
 800648c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006494:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e12f      	b.n	8006718 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	78db      	ldrb	r3, [r3, #3]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d015      	beq.n	800650c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 8117 	beq.w	8006718 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	2101      	movs	r1, #1
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006506:	4313      	orrs	r3, r2
 8006508:	634b      	str	r3, [r1, #52]	@ 0x34
 800650a:	e105      	b.n	8006718 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006518:	2b00      	cmp	r3, #0
 800651a:	d110      	bne.n	800653e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	4413      	add	r3, r2
 8006524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	0151      	lsls	r1, r2, #5
 800652e:	69fa      	ldr	r2, [r7, #28]
 8006530:	440a      	add	r2, r1
 8006532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006536:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e00f      	b.n	800655e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	68d9      	ldr	r1, [r3, #12]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	b298      	uxth	r0, r3
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	4603      	mov	r3, r0
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fa2b 	bl	80069ce <USB_WritePacket>
 8006578:	e0ce      	b.n	8006718 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006594:	0cdb      	lsrs	r3, r3, #19
 8006596:	04db      	lsls	r3, r3, #19
 8006598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065b4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80065b8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80065bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d126      	bne.n	8006614 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065dc:	69b9      	ldr	r1, [r7, #24]
 80065de:	0148      	lsls	r0, r1, #5
 80065e0:	69f9      	ldr	r1, [r7, #28]
 80065e2:	4401      	add	r1, r0
 80065e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065e8:	4313      	orrs	r3, r2
 80065ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	440a      	add	r2, r1
 8006602:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006606:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800660a:	6113      	str	r3, [r2, #16]
 800660c:	e036      	b.n	800667c <USB_EPStartXfer+0x3dc>
 800660e:	bf00      	nop
 8006610:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	4413      	add	r3, r2
 800661e:	1e5a      	subs	r2, r3, #1
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	fbb2 f3f3 	udiv	r3, r2, r3
 8006628:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	8afb      	ldrh	r3, [r7, #22]
 800663a:	04d9      	lsls	r1, r3, #19
 800663c:	4b39      	ldr	r3, [pc, #228]	@ (8006724 <USB_EPStartXfer+0x484>)
 800663e:	400b      	ands	r3, r1
 8006640:	69b9      	ldr	r1, [r7, #24]
 8006642:	0148      	lsls	r0, r1, #5
 8006644:	69f9      	ldr	r1, [r7, #28]
 8006646:	4401      	add	r1, r0
 8006648:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800664c:	4313      	orrs	r3, r2
 800664e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	8af9      	ldrh	r1, [r7, #22]
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800666c:	69b9      	ldr	r1, [r7, #24]
 800666e:	0148      	lsls	r0, r1, #5
 8006670:	69f9      	ldr	r1, [r7, #28]
 8006672:	4401      	add	r1, r0
 8006674:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006678:	4313      	orrs	r3, r2
 800667a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d10d      	bne.n	800669e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	68d9      	ldr	r1, [r3, #12]
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800669a:	460a      	mov	r2, r1
 800669c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	78db      	ldrb	r3, [r3, #3]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d128      	bne.n	80066f8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d110      	bne.n	80066d8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	e00f      	b.n	80066f8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	440a      	add	r2, r1
 800670e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006712:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	1ff80000 	.word	0x1ff80000

08006728 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b01      	cmp	r3, #1
 8006746:	f040 80cd 	bne.w	80068e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d132      	bne.n	80067b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	440a      	add	r2, r1
 8006768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800676c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006770:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006790:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006794:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067b0:	0cdb      	lsrs	r3, r3, #19
 80067b2:	04db      	lsls	r3, r3, #19
 80067b4:	6113      	str	r3, [r2, #16]
 80067b6:	e04e      	b.n	8006856 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067d2:	0cdb      	lsrs	r3, r3, #19
 80067d4:	04db      	lsls	r3, r3, #19
 80067d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	d903      	bls.n	8006810 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	440a      	add	r2, r1
 8006826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800682a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800682e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006846:	6939      	ldr	r1, [r7, #16]
 8006848:	0148      	lsls	r0, r1, #5
 800684a:	6979      	ldr	r1, [r7, #20]
 800684c:	4401      	add	r1, r0
 800684e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006852:	4313      	orrs	r3, r2
 8006854:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d11e      	bne.n	800689a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d009      	beq.n	8006878 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006870:	461a      	mov	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006892:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	e092      	b.n	80069c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	0151      	lsls	r1, r2, #5
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	440a      	add	r2, r1
 80068b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d07e      	beq.n	80069c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	2101      	movs	r1, #1
 80068d4:	fa01 f303 	lsl.w	r3, r1, r3
 80068d8:	6979      	ldr	r1, [r7, #20]
 80068da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068de:	4313      	orrs	r3, r2
 80068e0:	634b      	str	r3, [r1, #52]	@ 0x34
 80068e2:	e06d      	b.n	80069c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068fe:	0cdb      	lsrs	r3, r3, #19
 8006900:	04db      	lsls	r3, r3, #19
 8006902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	440a      	add	r2, r1
 800691a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800691e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006922:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006926:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006952:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006956:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800696e:	6939      	ldr	r1, [r7, #16]
 8006970:	0148      	lsls	r0, r1, #5
 8006972:	6979      	ldr	r1, [r7, #20]
 8006974:	4401      	add	r1, r0
 8006976:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800697a:	4313      	orrs	r3, r2
 800697c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d10d      	bne.n	80069a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d009      	beq.n	80069a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	68d9      	ldr	r1, [r3, #12]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699c:	460a      	mov	r2, r1
 800699e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b089      	sub	sp, #36	@ 0x24
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	4611      	mov	r1, r2
 80069da:	461a      	mov	r2, r3
 80069dc:	460b      	mov	r3, r1
 80069de:	71fb      	strb	r3, [r7, #7]
 80069e0:	4613      	mov	r3, r2
 80069e2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d123      	bne.n	8006a3c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069f4:	88bb      	ldrh	r3, [r7, #4]
 80069f6:	3303      	adds	r3, #3
 80069f8:	089b      	lsrs	r3, r3, #2
 80069fa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
 8006a00:	e018      	b.n	8006a34 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	031a      	lsls	r2, r3, #12
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a0e:	461a      	mov	r2, r3
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	3301      	adds	r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	3301      	adds	r3, #1
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d3e2      	bcc.n	8006a02 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3724      	adds	r7, #36	@ 0x24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b08b      	sub	sp, #44	@ 0x2c
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	4613      	mov	r3, r2
 8006a56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	089b      	lsrs	r3, r3, #2
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a68:	88fb      	ldrh	r3, [r7, #6]
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a70:	2300      	movs	r3, #0
 8006a72:	623b      	str	r3, [r7, #32]
 8006a74:	e014      	b.n	8006aa0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	3301      	adds	r3, #1
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	3301      	adds	r3, #1
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	3301      	adds	r3, #1
 8006a98:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	623b      	str	r3, [r7, #32]
 8006aa0:	6a3a      	ldr	r2, [r7, #32]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d3e6      	bcc.n	8006a76 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006aa8:	8bfb      	ldrh	r3, [r7, #30]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01e      	beq.n	8006aec <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f107 0310 	add.w	r3, r7, #16
 8006abe:	6812      	ldr	r2, [r2, #0]
 8006ac0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	701a      	strb	r2, [r3, #0]
      i++;
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006adc:	3301      	adds	r3, #1
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ae0:	8bfb      	ldrh	r3, [r7, #30]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ae6:	8bfb      	ldrh	r3, [r7, #30]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1ea      	bne.n	8006ac2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	372c      	adds	r7, #44	@ 0x2c
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d12c      	bne.n	8006b70 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	db12      	blt.n	8006b4e <USB_EPSetStall+0x54>
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00f      	beq.n	8006b4e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b4c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e02b      	b.n	8006bc8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	db12      	blt.n	8006ba8 <USB_EPSetStall+0xae>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00f      	beq.n	8006ba8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ba2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ba6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d128      	bne.n	8006c44 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	78db      	ldrb	r3, [r3, #3]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d003      	beq.n	8006c22 <USB_EPClearStall+0x4c>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	78db      	ldrb	r3, [r3, #3]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d138      	bne.n	8006c94 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	e027      	b.n	8006c94 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	78db      	ldrb	r3, [r3, #3]
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d003      	beq.n	8006c74 <USB_EPClearStall+0x9e>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	78db      	ldrb	r3, [r3, #3]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d10f      	bne.n	8006c94 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c92:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cc0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006cc4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3714      	adds	r7, #20
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d08:	f023 0303 	bic.w	r3, r3, #3
 8006d0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d1c:	f023 0302 	bic.w	r3, r3, #2
 8006d20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b085      	sub	sp, #20
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4013      	ands	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	4013      	ands	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	0c1b      	lsrs	r3, r3, #16
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4013      	ands	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	b29b      	uxth	r3, r3
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e5e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	01db      	lsls	r3, r3, #7
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4013      	ands	r3, r2
 8006e88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ece:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	460b      	mov	r3, r1
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	333c      	adds	r3, #60	@ 0x3c
 8006f12:	3304      	adds	r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	4a26      	ldr	r2, [pc, #152]	@ (8006fb4 <USB_EP0_OutStart+0xb8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d90a      	bls.n	8006f36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f30:	d101      	bne.n	8006f36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e037      	b.n	8006fa6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f64:	f043 0318 	orr.w	r3, r3, #24
 8006f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f78:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006f7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d10f      	bne.n	8006fa4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f9e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	4f54300a 	.word	0x4f54300a

08006fb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	4a13      	ldr	r2, [pc, #76]	@ (8007018 <USB_CoreReset+0x60>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d901      	bls.n	8006fd4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e01a      	b.n	800700a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	daf3      	bge.n	8006fc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f043 0201 	orr.w	r2, r3, #1
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	4a09      	ldr	r2, [pc, #36]	@ (8007018 <USB_CoreReset+0x60>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d901      	bls.n	8006ffc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e006      	b.n	800700a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b01      	cmp	r3, #1
 8007006:	d0f1      	beq.n	8006fec <USB_CoreReset+0x34>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	00030d40 	.word	0x00030d40

0800701c <__NVIC_SystemReset>:
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007020:	f3bf 8f4f 	dsb	sy
}
 8007024:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007026:	4b06      	ldr	r3, [pc, #24]	@ (8007040 <__NVIC_SystemReset+0x24>)
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800702e:	4904      	ldr	r1, [pc, #16]	@ (8007040 <__NVIC_SystemReset+0x24>)
 8007030:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <__NVIC_SystemReset+0x28>)
 8007032:	4313      	orrs	r3, r2
 8007034:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007036:	f3bf 8f4f 	dsb	sy
}
 800703a:	bf00      	nop
    __NOP();
 800703c:	bf00      	nop
 800703e:	e7fd      	b.n	800703c <__NVIC_SystemReset+0x20>
 8007040:	e000ed00 	.word	0xe000ed00
 8007044:	05fa0004 	.word	0x05fa0004

08007048 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007054:	f240 401c 	movw	r0, #1052	@ 0x41c
 8007058:	f002 fc28 	bl	80098ac <USBD_static_malloc>
 800705c:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d105      	bne.n	8007070 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800706c:	2302      	movs	r3, #2
 800706e:	e03f      	b.n	80070f0 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007086:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	4798      	blx	r3
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e000      	b.n	80070f0 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800710e:	2302      	movs	r3, #2
 8007110:	e027      	b.n	8007162 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007118:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2202      	movs	r2, #2
 800712e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2202      	movs	r2, #2
 800713e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007152:	4618      	mov	r0, r3
 8007154:	f002 fbb8 	bl	80098c8 <USBD_static_free>
  pdev->pClassData = NULL;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800717c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007194:	2303      	movs	r3, #3
 8007196:	e0d5      	b.n	8007344 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d03e      	beq.n	8007222 <USBD_DFU_Setup+0xb6>
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	f040 80c5 	bne.w	8007334 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	2b06      	cmp	r3, #6
 80071b0:	d82f      	bhi.n	8007212 <USBD_DFU_Setup+0xa6>
 80071b2:	a201      	add	r2, pc, #4	@ (adr r2, 80071b8 <USBD_DFU_Setup+0x4c>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	08007209 	.word	0x08007209
 80071bc:	080071d5 	.word	0x080071d5
 80071c0:	080071df 	.word	0x080071df
 80071c4:	080071e9 	.word	0x080071e9
 80071c8:	080071f1 	.word	0x080071f1
 80071cc:	080071f9 	.word	0x080071f9
 80071d0:	08007201 	.word	0x08007201
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa6c 	bl	80076b4 <DFU_Download>
          break;
 80071dc:	e020      	b.n	8007220 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fad3 	bl	800778c <DFU_Upload>
          break;
 80071e6:	e01b      	b.n	8007220 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fba9 	bl	8007940 <DFU_GetStatus>
          break;
 80071ee:	e017      	b.n	8007220 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fc5b 	bl	8007aac <DFU_ClearStatus>
          break;
 80071f6:	e013      	b.n	8007220 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fcab 	bl	8007b54 <DFU_GetState>
          break;
 80071fe:	e00f      	b.n	8007220 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fcbf 	bl	8007b84 <DFU_Abort>
          break;
 8007206:	e00b      	b.n	8007220 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9ee 	bl	80075ec <DFU_Detach>
          break;
 8007210:	e006      	b.n	8007220 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fdfb 	bl	8008e10 <USBD_CtlError>
          ret = USBD_FAIL;
 800721a:	2303      	movs	r3, #3
 800721c:	77fb      	strb	r3, [r7, #31]
          break;
 800721e:	bf00      	nop
      }
      break;
 8007220:	e08f      	b.n	8007342 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	785b      	ldrb	r3, [r3, #1]
 8007226:	2b0b      	cmp	r3, #11
 8007228:	d87b      	bhi.n	8007322 <USBD_DFU_Setup+0x1b6>
 800722a:	a201      	add	r2, pc, #4	@ (adr r2, 8007230 <USBD_DFU_Setup+0xc4>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007261 	.word	0x08007261
 8007234:	08007331 	.word	0x08007331
 8007238:	08007323 	.word	0x08007323
 800723c:	08007323 	.word	0x08007323
 8007240:	08007323 	.word	0x08007323
 8007244:	08007323 	.word	0x08007323
 8007248:	0800728b 	.word	0x0800728b
 800724c:	08007323 	.word	0x08007323
 8007250:	08007323 	.word	0x08007323
 8007254:	08007323 	.word	0x08007323
 8007258:	080072b5 	.word	0x080072b5
 800725c:	080072e1 	.word	0x080072e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b03      	cmp	r3, #3
 800726a:	d107      	bne.n	800727c <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800726c:	f107 030e 	add.w	r3, r7, #14
 8007270:	2202      	movs	r2, #2
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 fe3c 	bl	8008ef2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800727a:	e05a      	b.n	8007332 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fdc6 	bl	8008e10 <USBD_CtlError>
            ret = USBD_FAIL;
 8007284:	2303      	movs	r3, #3
 8007286:	77fb      	strb	r3, [r7, #31]
          break;
 8007288:	e053      	b.n	8007332 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	885b      	ldrh	r3, [r3, #2]
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b21      	cmp	r3, #33	@ 0x21
 8007294:	d107      	bne.n	80072a6 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8007296:	4b2d      	ldr	r3, [pc, #180]	@ (800734c <USBD_DFU_Setup+0x1e0>)
 8007298:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	88db      	ldrh	r3, [r3, #6]
 800729e:	2b09      	cmp	r3, #9
 80072a0:	bf28      	it	cs
 80072a2:	2309      	movcs	r3, #9
 80072a4:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80072a6:	8afb      	ldrh	r3, [r7, #22]
 80072a8:	461a      	mov	r2, r3
 80072aa:	69b9      	ldr	r1, [r7, #24]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 fe20 	bl	8008ef2 <USBD_CtlSendData>
          break;
 80072b2:	e03e      	b.n	8007332 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d108      	bne.n	80072d2 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072c6:	2201      	movs	r2, #1
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fe11 	bl	8008ef2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072d0:	e02f      	b.n	8007332 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 fd9b 	bl	8008e10 <USBD_CtlError>
            ret = USBD_FAIL;
 80072da:	2303      	movs	r3, #3
 80072dc:	77fb      	strb	r3, [r7, #31]
          break;
 80072de:	e028      	b.n	8007332 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	885b      	ldrh	r3, [r3, #2]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d114      	bne.n	8007314 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d107      	bne.n	8007306 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	885b      	ldrh	r3, [r3, #2]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007304:	e015      	b.n	8007332 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f001 fd81 	bl	8008e10 <USBD_CtlError>
              ret = USBD_FAIL;
 800730e:	2303      	movs	r3, #3
 8007310:	77fb      	strb	r3, [r7, #31]
          break;
 8007312:	e00e      	b.n	8007332 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fd7a 	bl	8008e10 <USBD_CtlError>
            ret = USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	77fb      	strb	r3, [r7, #31]
          break;
 8007320:	e007      	b.n	8007332 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fd73 	bl	8008e10 <USBD_CtlError>
          ret = USBD_FAIL;
 800732a:	2303      	movs	r3, #3
 800732c:	77fb      	strb	r3, [r7, #31]
          break;
 800732e:	e000      	b.n	8007332 <USBD_DFU_Setup+0x1c6>
          break;
 8007330:	bf00      	nop
      }
      break;
 8007332:	e006      	b.n	8007342 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 fd6a 	bl	8008e10 <USBD_CtlError>
      ret = USBD_FAIL;
 800733c:	2303      	movs	r3, #3
 800733e:	77fb      	strb	r3, [r7, #31]
      break;
 8007340:	bf00      	nop
  }

  return (uint8_t)ret;
 8007342:	7ffb      	ldrb	r3, [r7, #31]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3720      	adds	r7, #32
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	2000005a 	.word	0x2000005a

08007350 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	221b      	movs	r2, #27
 800735c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800735e:	4b03      	ldr	r3, [pc, #12]	@ (800736c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	20000048 	.word	0x20000048

08007370 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007394:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800739c:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e0ce      	b.n	8007546 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	f040 80bd 	bne.w	800752e <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d17c      	bne.n	80074b8 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	f000 8093 	beq.w	80074f0 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	d15e      	bne.n	8007492 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b21      	cmp	r3, #33	@ 0x21
 80073da:	d124      	bne.n	8007426 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	461a      	mov	r2, r3
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	789b      	ldrb	r3, [r3, #2]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	441a      	add	r2, r3
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	78db      	ldrb	r3, [r3, #3]
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	441a      	add	r2, r3
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	791b      	ldrb	r3, [r3, #4]
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	441a      	add	r2, r3
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8007424:	e064      	b.n	80074f0 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b41      	cmp	r3, #65	@ 0x41
 800742c:	d12f      	bne.n	800748e <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	785b      	ldrb	r3, [r3, #1]
 8007432:	461a      	mov	r2, r3
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	789b      	ldrb	r3, [r3, #2]
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	441a      	add	r2, r3
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	78db      	ldrb	r3, [r3, #3]
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	441a      	add	r2, r3
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	791b      	ldrb	r3, [r3, #4]
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	441a      	add	r2, r3
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	69fa      	ldr	r2, [r7, #28]
 800747c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d032      	beq.n	80074f0 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800748a:	2303      	movs	r3, #3
 800748c:	e05b      	b.n	8007546 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800748e:	2303      	movs	r3, #3
 8007490:	e059      	b.n	8007546 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	2200      	movs	r2, #0
 800749e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80074a6:	2301      	movs	r3, #1
 80074a8:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80074aa:	f107 030c 	add.w	r3, r7, #12
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 fcad 	bl	8008e10 <USBD_CtlError>
 80074b6:	e01b      	b.n	80074f0 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d916      	bls.n	80074f0 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80074c8:	3b02      	subs	r3, #2
 80074ca:	029a      	lsls	r2, r3, #10
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80074d2:	4413      	add	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	69f8      	ldr	r0, [r7, #28]
 80074dc:	6979      	ldr	r1, [r7, #20]
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80074e4:	4798      	blx	r3
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e02a      	b.n	8007546 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2203      	movs	r2, #3
 8007504:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800752c:	e00a      	b.n	8007544 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007534:	2b07      	cmp	r3, #7
 8007536:	d103      	bne.n	8007540 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb75 	bl	8007c28 <DFU_Leave>
 800753e:	e001      	b.n	8007544 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	e000      	b.n	8007546 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3720      	adds	r7, #32
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	220a      	movs	r2, #10
 8007570:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8007572:	4b03      	ldr	r3, [pc, #12]	@ (8007580 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	20000064 	.word	0x20000064

08007584 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	460b      	mov	r3, r1
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007598:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	2b06      	cmp	r3, #6
 800759e:	d808      	bhi.n	80075b2 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	4905      	ldr	r1, [pc, #20]	@ (80075bc <USBD_DFU_GetUsrStringDesc+0x38>)
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 fc42 	bl	8008e32 <USBD_GetString>
    return USBD_StrDesc;
 80075ae:	4b03      	ldr	r3, [pc, #12]	@ (80075bc <USBD_DFU_GetUsrStringDesc+0x38>)
 80075b0:	e000      	b.n	80075b4 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80075b2:	2300      	movs	r3, #0
  }
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	200002b4 	.word	0x200002b4

080075c0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e004      	b.n	80075de <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075fc:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d051      	beq.n	80076a8 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800760a:	2b02      	cmp	r3, #2
 800760c:	d013      	beq.n	8007636 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007614:	2b03      	cmp	r3, #3
 8007616:	d00e      	beq.n	8007636 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800761e:	2b05      	cmp	r3, #5
 8007620:	d009      	beq.n	8007636 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007628:	2b06      	cmp	r3, #6
 800762a:	d004      	beq.n	8007636 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007632:	2b09      	cmp	r3, #9
 8007634:	d125      	bne.n	8007682 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8007682:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <DFU_Detach+0xc4>)
 8007684:	7d5b      	ldrb	r3, [r3, #21]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b00      	cmp	r3, #0
 800768c:	d006      	beq.n	800769c <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fb7b 	bl	8007d8a <USBD_Stop>
    (void)USBD_Start(pdev);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fb6c 	bl	8007d72 <USBD_Start>
 800769a:	e006      	b.n	80076aa <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	885b      	ldrh	r3, [r3, #2]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7f9 fcf1 	bl	8001088 <HAL_Delay>
 80076a6:	e000      	b.n	80076aa <DFU_Detach+0xbe>
    return;
 80076a8:	bf00      	nop
  }
}
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20000048 	.word	0x20000048

080076b4 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076c4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d05b      	beq.n	8007784 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	88db      	ldrh	r3, [r3, #6]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d02d      	beq.n	8007730 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d004      	beq.n	80076e8 <DFU_Download+0x34>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80076e4:	2b05      	cmp	r3, #5
 80076e6:	d11e      	bne.n	8007726 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	885b      	ldrh	r3, [r3, #2]
 80076ec:	461a      	mov	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	88db      	ldrh	r3, [r3, #6]
 80076f8:	461a      	mov	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2203      	movs	r2, #3
 8007704:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800771c:	461a      	mov	r2, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fc13 	bl	8008f4a <USBD_CtlPrepareRx>
 8007724:	e02f      	b.n	8007786 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fb71 	bl	8008e10 <USBD_CtlError>
 800772e:	e02a      	b.n	8007786 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007736:	2b05      	cmp	r3, #5
 8007738:	d004      	beq.n	8007744 <DFU_Download+0x90>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007740:	2b02      	cmp	r3, #2
 8007742:	d11a      	bne.n	800777a <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2206      	movs	r2, #6
 8007750:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007778:	e005      	b.n	8007786 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f001 fb47 	bl	8008e10 <USBD_CtlError>
 8007782:	e000      	b.n	8007786 <DFU_Download+0xd2>
    return;
 8007784:	bf00      	nop
    }
  }
}
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800779c:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80077a4:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 80c4 	beq.w	8007936 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88db      	ldrh	r3, [r3, #6]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80a8 	beq.w	8007908 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d005      	beq.n	80077ce <DFU_Upload+0x42>
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	f040 8090 	bne.w	80078ee <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	885b      	ldrh	r3, [r3, #2]
 80077d2:	461a      	mov	r2, r3
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	461a      	mov	r2, r3
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d12c      	bne.n	800784a <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d901      	bls.n	80077fe <DFU_Upload+0x72>
 80077fa:	2202      	movs	r2, #2
 80077fc:	e000      	b.n	8007800 <DFU_Upload+0x74>
 80077fe:	2209      	movs	r2, #9
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2221      	movs	r2, #33	@ 0x21
 8007834:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2241      	movs	r2, #65	@ 0x41
 800783a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2203      	movs	r2, #3
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fb55 	bl	8008ef2 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007848:	e076      	b.n	8007938 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007850:	2b01      	cmp	r3, #1
 8007852:	d931      	bls.n	80078b8 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2209      	movs	r2, #9
 8007858:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007886:	3b02      	subs	r3, #2
 8007888:	029a      	lsls	r2, r3, #10
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8007890:	4413      	add	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	6979      	ldr	r1, [r7, #20]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80078a2:	4798      	blx	r3
 80078a4:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80078ac:	461a      	mov	r2, r3
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 fb1e 	bl	8008ef2 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80078b6:	e03f      	b.n	8007938 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	220f      	movs	r2, #15
 80078bc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 fa92 	bl	8008e10 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80078ec:	e024      	b.n	8007938 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fa85 	bl	8008e10 <USBD_CtlError>
 8007906:	e017      	b.n	8007938 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007934:	e000      	b.n	8007938 <DFU_Upload+0x1ac>
    return;
 8007936:	bf00      	nop
  }
}
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800794e:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007956:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 80a0 	beq.w	8007aa0 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007966:	2b03      	cmp	r3, #3
 8007968:	d002      	beq.n	8007970 <DFU_GetStatus+0x30>
 800796a:	2b06      	cmp	r3, #6
 800796c:	d051      	beq.n	8007a12 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800796e:	e08e      	b.n	8007a8e <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007976:	2b00      	cmp	r3, #0
 8007978:	d034      	beq.n	80079e4 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2204      	movs	r2, #4
 800797e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10e      	bne.n	80079ce <DFU_GetStatus+0x8e>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b41      	cmp	r3, #65	@ 0x41
 80079b6:	d10a      	bne.n	80079ce <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80079c8:	2100      	movs	r1, #0
 80079ca:	4798      	blx	r3
      break;
 80079cc:	e05f      	b.n	8007a8e <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80079de:	2101      	movs	r1, #1
 80079e0:	4798      	blx	r3
      break;
 80079e2:	e054      	b.n	8007a8e <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2205      	movs	r2, #5
 80079e8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8007a10:	e03d      	b.n	8007a8e <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d116      	bne.n	8007a4a <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2207      	movs	r2, #7
 8007a20:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8007a48:	e020      	b.n	8007a8c <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d11b      	bne.n	8007a8c <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8007a54:	4b14      	ldr	r3, [pc, #80]	@ (8007aa8 <DFU_GetStatus+0x168>)
 8007a56:	7d1b      	ldrb	r3, [r3, #20]
 8007a58:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d015      	beq.n	8007a8c <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8007a8c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8007a94:	2206      	movs	r2, #6
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 fa2a 	bl	8008ef2 <USBD_CtlSendData>
 8007a9e:	e000      	b.n	8007aa2 <DFU_GetStatus+0x162>
    return;
 8007aa0:	bf00      	nop
}
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	20000048 	.word	0x20000048

08007aac <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007aba:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d042      	beq.n	8007b48 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007ac8:	2b0a      	cmp	r3, #10
 8007aca:	d11e      	bne.n	8007b0a <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8007b08:	e01f      	b.n	8007b4a <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	220a      	movs	r2, #10
 8007b0e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	220e      	movs	r2, #14
 8007b16:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8007b46:	e000      	b.n	8007b4a <DFU_ClearStatus+0x9e>
    return;
 8007b48:	bf00      	nop
  }
}
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b62:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8007b70:	2201      	movs	r2, #1
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f9bc 	bl	8008ef2 <USBD_CtlSendData>
 8007b7a:	e000      	b.n	8007b7e <DFU_GetState+0x2a>
    return;
 8007b7c:	bf00      	nop
}
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b92:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d03f      	beq.n	8007c1a <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d013      	beq.n	8007bcc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d00e      	beq.n	8007bcc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007bb4:	2b05      	cmp	r3, #5
 8007bb6:	d009      	beq.n	8007bcc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007bbe:	2b06      	cmp	r3, #6
 8007bc0:	d004      	beq.n	8007bcc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007bc8:	2b09      	cmp	r3, #9
 8007bca:	d127      	bne.n	8007c1c <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8007c18:	e000      	b.n	8007c1c <DFU_Abort+0x98>
    return;
 8007c1a:	bf00      	nop
  }
}
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
	...

08007c28 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c36:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d03b      	beq.n	8007cb6 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8007c46:	4b1e      	ldr	r3, [pc, #120]	@ (8007cc0 <DFU_Leave+0x98>)
 8007c48:	7d1b      	ldrb	r3, [r3, #20]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d016      	beq.n	8007c80 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2206      	movs	r2, #6
 8007c56:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8007c7e:	e01b      	b.n	8007cb8 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2208      	movs	r2, #8
 8007c84:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f86c 	bl	8007d8a <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8007cb2:	f7ff f9b3 	bl	800701c <__NVIC_SystemReset>
    return;
 8007cb6:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000048 	.word	0x20000048

08007cc4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e01f      	b.n	8007d1c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	79fa      	ldrb	r2, [r7, #7]
 8007d0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f001 fc53 	bl	80095bc <USBD_LL_Init>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e016      	b.n	8007d6a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	f107 020e 	add.w	r2, r7, #14
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	4602      	mov	r2, r0
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 fc6e 	bl	800965c <USBD_LL_Start>
 8007d80:	4603      	mov	r3, r0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fc7d 	bl	8009692 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6852      	ldr	r2, [r2, #4]
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	4611      	mov	r1, r2
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
  }

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d007      	beq.n	8007e34 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	4611      	mov	r1, r2
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4798      	blx	r3
  }

  return USBD_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 ffa3 	bl	8008d9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007e64:	461a      	mov	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d01a      	beq.n	8007eb0 <USBD_LL_SetupStage+0x72>
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d822      	bhi.n	8007ec4 <USBD_LL_SetupStage+0x86>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <USBD_LL_SetupStage+0x4a>
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d00a      	beq.n	8007e9c <USBD_LL_SetupStage+0x5e>
 8007e86:	e01d      	b.n	8007ec4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa63 	bl	800835c <USBD_StdDevReq>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9a:	e020      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fac7 	bl	8008438 <USBD_StdItfReq>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
      break;
 8007eae:	e016      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fb06 	bl	80084ca <USBD_StdEPReq>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ec2:	e00c      	b.n	8007ede <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007eca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fc1e 	bl	8009714 <USBD_LL_StallEP>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
      break;
 8007edc:	bf00      	nop
  }

  return ret;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d138      	bne.n	8007f6e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007f02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d14a      	bne.n	8007fa4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d913      	bls.n	8007f42 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	1ad2      	subs	r2, r2, r3
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	4293      	cmp	r3, r2
 8007f32:	bf28      	it	cs
 8007f34:	4613      	movcs	r3, r2
 8007f36:	461a      	mov	r2, r3
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f001 f822 	bl	8008f84 <USBD_CtlContinueRx>
 8007f40:	e030      	b.n	8007fa4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d10b      	bne.n	8007f66 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f001 f81d 	bl	8008fa6 <USBD_CtlSendStatus>
 8007f6c:	e01a      	b.n	8007fa4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d114      	bne.n	8007fa4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00e      	beq.n	8007fa4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	7afa      	ldrb	r2, [r7, #11]
 8007f90:	4611      	mov	r1, r2
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	e000      	b.n	8007fa6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b086      	sub	sp, #24
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	607a      	str	r2, [r7, #4]
 8007fba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d16b      	bne.n	800809a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	3314      	adds	r3, #20
 8007fc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d156      	bne.n	8008080 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d914      	bls.n	8008008 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 ff97 	bl	8008f28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2100      	movs	r1, #0
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f001 fc31 	bl	8009868 <USBD_LL_PrepareReceive>
 8008006:	e03b      	b.n	8008080 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	429a      	cmp	r2, r3
 8008012:	d11c      	bne.n	800804e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800801c:	429a      	cmp	r2, r3
 800801e:	d316      	bcc.n	800804e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800802a:	429a      	cmp	r2, r3
 800802c:	d20f      	bcs.n	800804e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800802e:	2200      	movs	r2, #0
 8008030:	2100      	movs	r1, #0
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 ff78 	bl	8008f28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008040:	2300      	movs	r3, #0
 8008042:	2200      	movs	r2, #0
 8008044:	2100      	movs	r1, #0
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f001 fc0e 	bl	8009868 <USBD_LL_PrepareReceive>
 800804c:	e018      	b.n	8008080 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b03      	cmp	r3, #3
 8008058:	d10b      	bne.n	8008072 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008072:	2180      	movs	r1, #128	@ 0x80
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f001 fb4d 	bl	8009714 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 ffa6 	bl	8008fcc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d122      	bne.n	80080d0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff fe98 	bl	8007dc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008098:	e01a      	b.n	80080d0 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d114      	bne.n	80080d0 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00e      	beq.n	80080d0 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	7afa      	ldrb	r2, [r7, #11]
 80080bc:	4611      	mov	r1, r2
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	4798      	blx	r3
 80080c2:	4603      	mov	r3, r0
 80080c4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	e000      	b.n	80080d2 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	e02f      	b.n	800816e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00f      	beq.n	8008138 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d009      	beq.n	8008138 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6852      	ldr	r2, [r2, #4]
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	4611      	mov	r1, r2
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008138:	2340      	movs	r3, #64	@ 0x40
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 fac2 	bl	80096c8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2240      	movs	r2, #64	@ 0x40
 8008150:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008154:	2340      	movs	r3, #64	@ 0x40
 8008156:	2200      	movs	r2, #0
 8008158:	2180      	movs	r1, #128	@ 0x80
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 fab4 	bl	80096c8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2240      	movs	r2, #64	@ 0x40
 800816a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	78fa      	ldrb	r2, [r7, #3]
 8008186:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2204      	movs	r2, #4
 80081b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d106      	bne.n	80081e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008204:	2303      	movs	r3, #3
 8008206:	e012      	b.n	800822e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b03      	cmp	r3, #3
 8008212:	d10b      	bne.n	800822c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	e014      	b.n	800827a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b03      	cmp	r3, #3
 800825a:	d10d      	bne.n	8008278 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d007      	beq.n	8008278 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	78fa      	ldrb	r2, [r7, #3]
 8008272:	4611      	mov	r1, r2
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	460b      	mov	r3, r1
 800828c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008298:	2303      	movs	r3, #3
 800829a:	e014      	b.n	80082c6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d10d      	bne.n	80082c4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d007      	beq.n	80082c4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082bc:	78fa      	ldrb	r2, [r7, #3]
 80082be:	4611      	mov	r1, r2
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6852      	ldr	r2, [r2, #4]
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	4611      	mov	r1, r2
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
  }

  return USBD_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	3301      	adds	r3, #1
 8008332:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800833a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	b21a      	sxth	r2, r3
 8008342:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008346:	4313      	orrs	r3, r2
 8008348:	b21b      	sxth	r3, r3
 800834a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800834c:	89fb      	ldrh	r3, [r7, #14]
}
 800834e:	4618      	mov	r0, r3
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008372:	2b40      	cmp	r3, #64	@ 0x40
 8008374:	d005      	beq.n	8008382 <USBD_StdDevReq+0x26>
 8008376:	2b40      	cmp	r3, #64	@ 0x40
 8008378:	d853      	bhi.n	8008422 <USBD_StdDevReq+0xc6>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <USBD_StdDevReq+0x3a>
 800837e:	2b20      	cmp	r3, #32
 8008380:	d14f      	bne.n	8008422 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	4798      	blx	r3
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
      break;
 8008394:	e04a      	b.n	800842c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	785b      	ldrb	r3, [r3, #1]
 800839a:	2b09      	cmp	r3, #9
 800839c:	d83b      	bhi.n	8008416 <USBD_StdDevReq+0xba>
 800839e:	a201      	add	r2, pc, #4	@ (adr r2, 80083a4 <USBD_StdDevReq+0x48>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	080083f9 	.word	0x080083f9
 80083a8:	0800840d 	.word	0x0800840d
 80083ac:	08008417 	.word	0x08008417
 80083b0:	08008403 	.word	0x08008403
 80083b4:	08008417 	.word	0x08008417
 80083b8:	080083d7 	.word	0x080083d7
 80083bc:	080083cd 	.word	0x080083cd
 80083c0:	08008417 	.word	0x08008417
 80083c4:	080083ef 	.word	0x080083ef
 80083c8:	080083e1 	.word	0x080083e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f9de 	bl	8008790 <USBD_GetDescriptor>
          break;
 80083d4:	e024      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fb55 	bl	8008a88 <USBD_SetAddress>
          break;
 80083de:	e01f      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fb94 	bl	8008b10 <USBD_SetConfig>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
          break;
 80083ec:	e018      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fc33 	bl	8008c5c <USBD_GetConfig>
          break;
 80083f6:	e013      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fc64 	bl	8008cc8 <USBD_GetStatus>
          break;
 8008400:	e00e      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fc93 	bl	8008d30 <USBD_SetFeature>
          break;
 800840a:	e009      	b.n	8008420 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fca2 	bl	8008d58 <USBD_ClrFeature>
          break;
 8008414:	e004      	b.n	8008420 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fcf9 	bl	8008e10 <USBD_CtlError>
          break;
 800841e:	bf00      	nop
      }
      break;
 8008420:	e004      	b.n	800842c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fcf3 	bl	8008e10 <USBD_CtlError>
      break;
 800842a:	bf00      	nop
  }

  return ret;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop

08008438 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800844e:	2b40      	cmp	r3, #64	@ 0x40
 8008450:	d005      	beq.n	800845e <USBD_StdItfReq+0x26>
 8008452:	2b40      	cmp	r3, #64	@ 0x40
 8008454:	d82f      	bhi.n	80084b6 <USBD_StdItfReq+0x7e>
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <USBD_StdItfReq+0x26>
 800845a:	2b20      	cmp	r3, #32
 800845c:	d12b      	bne.n	80084b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008464:	b2db      	uxtb	r3, r3
 8008466:	3b01      	subs	r3, #1
 8008468:	2b02      	cmp	r3, #2
 800846a:	d81d      	bhi.n	80084a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	889b      	ldrh	r3, [r3, #4]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b01      	cmp	r3, #1
 8008474:	d813      	bhi.n	800849e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	88db      	ldrh	r3, [r3, #6]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d110      	bne.n	80084b2 <USBD_StdItfReq+0x7a>
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10d      	bne.n	80084b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fd85 	bl	8008fa6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800849c:	e009      	b.n	80084b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fcb5 	bl	8008e10 <USBD_CtlError>
          break;
 80084a6:	e004      	b.n	80084b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fcb0 	bl	8008e10 <USBD_CtlError>
          break;
 80084b0:	e000      	b.n	80084b4 <USBD_StdItfReq+0x7c>
          break;
 80084b2:	bf00      	nop
      }
      break;
 80084b4:	e004      	b.n	80084c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fca9 	bl	8008e10 <USBD_CtlError>
      break;
 80084be:	bf00      	nop
  }

  return ret;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	889b      	ldrh	r3, [r3, #4]
 80084dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084e6:	2b40      	cmp	r3, #64	@ 0x40
 80084e8:	d007      	beq.n	80084fa <USBD_StdEPReq+0x30>
 80084ea:	2b40      	cmp	r3, #64	@ 0x40
 80084ec:	f200 8145 	bhi.w	800877a <USBD_StdEPReq+0x2b0>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <USBD_StdEPReq+0x44>
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	f040 8140 	bne.w	800877a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
      break;
 800850c:	e13a      	b.n	8008784 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	2b03      	cmp	r3, #3
 8008514:	d007      	beq.n	8008526 <USBD_StdEPReq+0x5c>
 8008516:	2b03      	cmp	r3, #3
 8008518:	f300 8129 	bgt.w	800876e <USBD_StdEPReq+0x2a4>
 800851c:	2b00      	cmp	r3, #0
 800851e:	d07f      	beq.n	8008620 <USBD_StdEPReq+0x156>
 8008520:	2b01      	cmp	r3, #1
 8008522:	d03c      	beq.n	800859e <USBD_StdEPReq+0xd4>
 8008524:	e123      	b.n	800876e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d002      	beq.n	8008538 <USBD_StdEPReq+0x6e>
 8008532:	2b03      	cmp	r3, #3
 8008534:	d016      	beq.n	8008564 <USBD_StdEPReq+0x9a>
 8008536:	e02c      	b.n	8008592 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00d      	beq.n	800855a <USBD_StdEPReq+0x90>
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	2b80      	cmp	r3, #128	@ 0x80
 8008542:	d00a      	beq.n	800855a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f8e3 	bl	8009714 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800854e:	2180      	movs	r1, #128	@ 0x80
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f001 f8df 	bl	8009714 <USBD_LL_StallEP>
 8008556:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008558:	e020      	b.n	800859c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fc57 	bl	8008e10 <USBD_CtlError>
              break;
 8008562:	e01b      	b.n	800859c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	885b      	ldrh	r3, [r3, #2]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10e      	bne.n	800858a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <USBD_StdEPReq+0xc0>
 8008572:	7bbb      	ldrb	r3, [r7, #14]
 8008574:	2b80      	cmp	r3, #128	@ 0x80
 8008576:	d008      	beq.n	800858a <USBD_StdEPReq+0xc0>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	88db      	ldrh	r3, [r3, #6]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f8c5 	bl	8009714 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fd0b 	bl	8008fa6 <USBD_CtlSendStatus>

              break;
 8008590:	e004      	b.n	800859c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fc3b 	bl	8008e10 <USBD_CtlError>
              break;
 800859a:	bf00      	nop
          }
          break;
 800859c:	e0ec      	b.n	8008778 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	d002      	beq.n	80085b0 <USBD_StdEPReq+0xe6>
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d016      	beq.n	80085dc <USBD_StdEPReq+0x112>
 80085ae:	e030      	b.n	8008612 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <USBD_StdEPReq+0x108>
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b80      	cmp	r3, #128	@ 0x80
 80085ba:	d00a      	beq.n	80085d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f8a7 	bl	8009714 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085c6:	2180      	movs	r1, #128	@ 0x80
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 f8a3 	bl	8009714 <USBD_LL_StallEP>
 80085ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085d0:	e025      	b.n	800861e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fc1b 	bl	8008e10 <USBD_CtlError>
              break;
 80085da:	e020      	b.n	800861e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	885b      	ldrh	r3, [r3, #2]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d11b      	bne.n	800861c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 f8ad 	bl	8009752 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fcd4 	bl	8008fa6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	4798      	blx	r3
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008610:	e004      	b.n	800861c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fbfb 	bl	8008e10 <USBD_CtlError>
              break;
 800861a:	e000      	b.n	800861e <USBD_StdEPReq+0x154>
              break;
 800861c:	bf00      	nop
          }
          break;
 800861e:	e0ab      	b.n	8008778 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d002      	beq.n	8008632 <USBD_StdEPReq+0x168>
 800862c:	2b03      	cmp	r3, #3
 800862e:	d032      	beq.n	8008696 <USBD_StdEPReq+0x1cc>
 8008630:	e097      	b.n	8008762 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <USBD_StdEPReq+0x17e>
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b80      	cmp	r3, #128	@ 0x80
 800863c:	d004      	beq.n	8008648 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fbe5 	bl	8008e10 <USBD_CtlError>
                break;
 8008646:	e091      	b.n	800876c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800864c:	2b00      	cmp	r3, #0
 800864e:	da0b      	bge.n	8008668 <USBD_StdEPReq+0x19e>
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	3310      	adds	r3, #16
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	3304      	adds	r3, #4
 8008666:	e00b      	b.n	8008680 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800866e:	4613      	mov	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	3304      	adds	r3, #4
 8008680:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2202      	movs	r2, #2
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fc2f 	bl	8008ef2 <USBD_CtlSendData>
              break;
 8008694:	e06a      	b.n	800876c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	da11      	bge.n	80086c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	f003 020f 	and.w	r2, r3, #15
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	3324      	adds	r3, #36	@ 0x24
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d117      	bne.n	80086e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fba8 	bl	8008e10 <USBD_CtlError>
                  break;
 80086c0:	e054      	b.n	800876c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	f003 020f 	and.w	r2, r3, #15
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	440b      	add	r3, r1
 80086d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fb95 	bl	8008e10 <USBD_CtlError>
                  break;
 80086e6:	e041      	b.n	800876c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da0b      	bge.n	8008708 <USBD_StdEPReq+0x23e>
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	3310      	adds	r3, #16
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	e00b      	b.n	8008720 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	4413      	add	r3, r2
 800871e:	3304      	adds	r3, #4
 8008720:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <USBD_StdEPReq+0x264>
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	2b80      	cmp	r3, #128	@ 0x80
 800872c:	d103      	bne.n	8008736 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	e00e      	b.n	8008754 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 f828 	bl	8009790 <USBD_LL_IsStallEP>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e002      	b.n	8008754 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2202      	movs	r2, #2
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fbc9 	bl	8008ef2 <USBD_CtlSendData>
              break;
 8008760:	e004      	b.n	800876c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb53 	bl	8008e10 <USBD_CtlError>
              break;
 800876a:	bf00      	nop
          }
          break;
 800876c:	e004      	b.n	8008778 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fb4d 	bl	8008e10 <USBD_CtlError>
          break;
 8008776:	bf00      	nop
      }
      break;
 8008778:	e004      	b.n	8008784 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fb47 	bl	8008e10 <USBD_CtlError>
      break;
 8008782:	bf00      	nop
  }

  return ret;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	0a1b      	lsrs	r3, r3, #8
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	2b06      	cmp	r3, #6
 80087b2:	f200 813b 	bhi.w	8008a2c <USBD_GetDescriptor+0x29c>
 80087b6:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <USBD_GetDescriptor+0x2c>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	080087f1 	.word	0x080087f1
 80087c4:	08008831 	.word	0x08008831
 80087c8:	08008a2d 	.word	0x08008a2d
 80087cc:	08008a2d 	.word	0x08008a2d
 80087d0:	080089cd 	.word	0x080089cd
 80087d4:	080089f9 	.word	0x080089f9
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	7c12      	ldrb	r2, [r2, #16]
 80087e4:	f107 0108 	add.w	r1, r7, #8
 80087e8:	4610      	mov	r0, r2
 80087ea:	4798      	blx	r3
 80087ec:	60f8      	str	r0, [r7, #12]
      break;
 80087ee:	e125      	b.n	8008a3c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	7c1b      	ldrb	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10d      	bne.n	8008814 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008800:	f107 0208 	add.w	r2, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3301      	adds	r3, #1
 800880e:	2202      	movs	r2, #2
 8008810:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008812:	e113      	b.n	8008a3c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881c:	f107 0208 	add.w	r2, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
 8008824:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	2202      	movs	r2, #2
 800882c:	701a      	strb	r2, [r3, #0]
      break;
 800882e:	e105      	b.n	8008a3c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	885b      	ldrh	r3, [r3, #2]
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b05      	cmp	r3, #5
 8008838:	f200 80ac 	bhi.w	8008994 <USBD_GetDescriptor+0x204>
 800883c:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <USBD_GetDescriptor+0xb4>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	0800885d 	.word	0x0800885d
 8008848:	08008891 	.word	0x08008891
 800884c:	080088c5 	.word	0x080088c5
 8008850:	080088f9 	.word	0x080088f9
 8008854:	0800892d 	.word	0x0800892d
 8008858:	08008961 	.word	0x08008961
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00b      	beq.n	8008880 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	7c12      	ldrb	r2, [r2, #16]
 8008874:	f107 0108 	add.w	r1, r7, #8
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
 800887c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800887e:	e0a4      	b.n	80089ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fac4 	bl	8008e10 <USBD_CtlError>
            err++;
 8008888:	7afb      	ldrb	r3, [r7, #11]
 800888a:	3301      	adds	r3, #1
 800888c:	72fb      	strb	r3, [r7, #11]
          break;
 800888e:	e09c      	b.n	80089ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	7c12      	ldrb	r2, [r2, #16]
 80088a8:	f107 0108 	add.w	r1, r7, #8
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
 80088b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b2:	e08a      	b.n	80089ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 faaa 	bl	8008e10 <USBD_CtlError>
            err++;
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	3301      	adds	r3, #1
 80088c0:	72fb      	strb	r3, [r7, #11]
          break;
 80088c2:	e082      	b.n	80089ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	7c12      	ldrb	r2, [r2, #16]
 80088dc:	f107 0108 	add.w	r1, r7, #8
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e6:	e070      	b.n	80089ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa90 	bl	8008e10 <USBD_CtlError>
            err++;
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	3301      	adds	r3, #1
 80088f4:	72fb      	strb	r3, [r7, #11]
          break;
 80088f6:	e068      	b.n	80089ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00b      	beq.n	800891c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	7c12      	ldrb	r2, [r2, #16]
 8008910:	f107 0108 	add.w	r1, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800891a:	e056      	b.n	80089ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa76 	bl	8008e10 <USBD_CtlError>
            err++;
 8008924:	7afb      	ldrb	r3, [r7, #11]
 8008926:	3301      	adds	r3, #1
 8008928:	72fb      	strb	r3, [r7, #11]
          break;
 800892a:	e04e      	b.n	80089ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00b      	beq.n	8008950 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	7c12      	ldrb	r2, [r2, #16]
 8008944:	f107 0108 	add.w	r1, r7, #8
 8008948:	4610      	mov	r0, r2
 800894a:	4798      	blx	r3
 800894c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894e:	e03c      	b.n	80089ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fa5c 	bl	8008e10 <USBD_CtlError>
            err++;
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	3301      	adds	r3, #1
 800895c:	72fb      	strb	r3, [r7, #11]
          break;
 800895e:	e034      	b.n	80089ca <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	7c12      	ldrb	r2, [r2, #16]
 8008978:	f107 0108 	add.w	r1, r7, #8
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
 8008980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008982:	e022      	b.n	80089ca <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa42 	bl	8008e10 <USBD_CtlError>
            err++;
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	3301      	adds	r3, #1
 8008990:	72fb      	strb	r3, [r7, #11]
          break;
 8008992:	e01a      	b.n	80089ca <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800899a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00c      	beq.n	80089ba <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	8852      	ldrh	r2, [r2, #2]
 80089ac:	b2d1      	uxtb	r1, r2
 80089ae:	f107 0208 	add.w	r2, r7, #8
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
 80089b6:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80089b8:	e006      	b.n	80089c8 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fa27 	bl	8008e10 <USBD_CtlError>
            err++;
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	3301      	adds	r3, #1
 80089c6:	72fb      	strb	r3, [r7, #11]
          break;
 80089c8:	bf00      	nop
      }
      break;
 80089ca:	e037      	b.n	8008a3c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	7c1b      	ldrb	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d109      	bne.n	80089e8 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089dc:	f107 0208 	add.w	r2, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e6:	e029      	b.n	8008a3c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa10 	bl	8008e10 <USBD_CtlError>
        err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
      break;
 80089f6:	e021      	b.n	8008a3c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7c1b      	ldrb	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10d      	bne.n	8008a1c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a08:	f107 0208 	add.w	r2, r7, #8
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4798      	blx	r3
 8008a10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	2207      	movs	r2, #7
 8008a18:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a1a:	e00f      	b.n	8008a3c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f9f6 	bl	8008e10 <USBD_CtlError>
        err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
      break;
 8008a2a:	e007      	b.n	8008a3c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f9ee 	bl	8008e10 <USBD_CtlError>
      err++;
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	3301      	adds	r3, #1
 8008a38:	72fb      	strb	r3, [r7, #11]
      break;
 8008a3a:	bf00      	nop
  }

  if (err != 0U)
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d11e      	bne.n	8008a80 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	88db      	ldrh	r3, [r3, #6]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d016      	beq.n	8008a78 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008a4a:	893b      	ldrh	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00e      	beq.n	8008a6e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	88da      	ldrh	r2, [r3, #6]
 8008a54:	893b      	ldrh	r3, [r7, #8]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	bf28      	it	cs
 8008a5a:	4613      	movcs	r3, r2
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a60:	893b      	ldrh	r3, [r7, #8]
 8008a62:	461a      	mov	r2, r3
 8008a64:	68f9      	ldr	r1, [r7, #12]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fa43 	bl	8008ef2 <USBD_CtlSendData>
 8008a6c:	e009      	b.n	8008a82 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f9cd 	bl	8008e10 <USBD_CtlError>
 8008a76:	e004      	b.n	8008a82 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa94 	bl	8008fa6 <USBD_CtlSendStatus>
 8008a7e:	e000      	b.n	8008a82 <USBD_GetDescriptor+0x2f2>
    return;
 8008a80:	bf00      	nop
  }
}
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	889b      	ldrh	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d131      	bne.n	8008afe <USBD_SetAddress+0x76>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	88db      	ldrh	r3, [r3, #6]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d12d      	bne.n	8008afe <USBD_SetAddress+0x76>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	885b      	ldrh	r3, [r3, #2]
 8008aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008aa8:	d829      	bhi.n	8008afe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ab4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d104      	bne.n	8008acc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f9a3 	bl	8008e10 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aca:	e01d      	b.n	8008b08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	7bfa      	ldrb	r2, [r7, #15]
 8008ad0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fe85 	bl	80097e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fa61 	bl	8008fa6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d004      	beq.n	8008af4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2202      	movs	r2, #2
 8008aee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af2:	e009      	b.n	8008b08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afc:	e004      	b.n	8008b08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f985 	bl	8008e10 <USBD_CtlError>
  }
}
 8008b06:	bf00      	nop
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	885b      	ldrh	r3, [r3, #2]
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	4b4c      	ldr	r3, [pc, #304]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008b26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b28:	4b4b      	ldr	r3, [pc, #300]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d905      	bls.n	8008b3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f96c 	bl	8008e10 <USBD_CtlError>
    return USBD_FAIL;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e088      	b.n	8008c4e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d002      	beq.n	8008b4e <USBD_SetConfig+0x3e>
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d025      	beq.n	8008b98 <USBD_SetConfig+0x88>
 8008b4c:	e071      	b.n	8008c32 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b4e:	4b42      	ldr	r3, [pc, #264]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d01c      	beq.n	8008b90 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008b56:	4b40      	ldr	r3, [pc, #256]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b60:	4b3d      	ldr	r3, [pc, #244]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff f935 	bl	8007dd6 <USBD_SetClassConfig>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d004      	beq.n	8008b80 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f949 	bl	8008e10 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b7e:	e065      	b.n	8008c4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fa10 	bl	8008fa6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2203      	movs	r2, #3
 8008b8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b8e:	e05d      	b.n	8008c4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa08 	bl	8008fa6 <USBD_CtlSendStatus>
      break;
 8008b96:	e059      	b.n	8008c4c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b98:	4b2f      	ldr	r3, [pc, #188]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d112      	bne.n	8008bc6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bb2:	4b29      	ldr	r3, [pc, #164]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff f928 	bl	8007e0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9f1 	bl	8008fa6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bc4:	e042      	b.n	8008c4c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008bc6:	4b24      	ldr	r3, [pc, #144]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d02a      	beq.n	8008c2a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff f916 	bl	8007e0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008be2:	4b1d      	ldr	r3, [pc, #116]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bec:	4b1a      	ldr	r3, [pc, #104]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff f8ef 	bl	8007dd6 <USBD_SetClassConfig>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00f      	beq.n	8008c22 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f903 	bl	8008e10 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff f8fb 	bl	8007e0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c20:	e014      	b.n	8008c4c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f9bf 	bl	8008fa6 <USBD_CtlSendStatus>
      break;
 8008c28:	e010      	b.n	8008c4c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f9bb 	bl	8008fa6 <USBD_CtlSendStatus>
      break;
 8008c30:	e00c      	b.n	8008c4c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f8eb 	bl	8008e10 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c3a:	4b07      	ldr	r3, [pc, #28]	@ (8008c58 <USBD_SetConfig+0x148>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff f8e4 	bl	8007e0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c46:	2303      	movs	r3, #3
 8008c48:	73fb      	strb	r3, [r7, #15]
      break;
 8008c4a:	bf00      	nop
  }

  return ret;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	200003b3 	.word	0x200003b3

08008c5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d004      	beq.n	8008c78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f8cd 	bl	8008e10 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c76:	e023      	b.n	8008cc0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	dc02      	bgt.n	8008c8a <USBD_GetConfig+0x2e>
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dc03      	bgt.n	8008c90 <USBD_GetConfig+0x34>
 8008c88:	e015      	b.n	8008cb6 <USBD_GetConfig+0x5a>
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d00b      	beq.n	8008ca6 <USBD_GetConfig+0x4a>
 8008c8e:	e012      	b.n	8008cb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3308      	adds	r3, #8
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f927 	bl	8008ef2 <USBD_CtlSendData>
        break;
 8008ca4:	e00c      	b.n	8008cc0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	2201      	movs	r2, #1
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f91f 	bl	8008ef2 <USBD_CtlSendData>
        break;
 8008cb4:	e004      	b.n	8008cc0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f8a9 	bl	8008e10 <USBD_CtlError>
        break;
 8008cbe:	bf00      	nop
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d81e      	bhi.n	8008d1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	88db      	ldrh	r3, [r3, #6]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d004      	beq.n	8008cf2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f890 	bl	8008e10 <USBD_CtlError>
        break;
 8008cf0:	e01a      	b.n	8008d28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d005      	beq.n	8008d0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f043 0202 	orr.w	r2, r3, #2
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	330c      	adds	r3, #12
 8008d12:	2202      	movs	r2, #2
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f8eb 	bl	8008ef2 <USBD_CtlSendData>
      break;
 8008d1c:	e004      	b.n	8008d28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f875 	bl	8008e10 <USBD_CtlError>
      break;
 8008d26:	bf00      	nop
  }
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	885b      	ldrh	r3, [r3, #2]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d106      	bne.n	8008d50 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f92b 	bl	8008fa6 <USBD_CtlSendStatus>
  }
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d80b      	bhi.n	8008d88 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	885b      	ldrh	r3, [r3, #2]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d10c      	bne.n	8008d92 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f910 	bl	8008fa6 <USBD_CtlSendStatus>
      }
      break;
 8008d86:	e004      	b.n	8008d92 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f840 	bl	8008e10 <USBD_CtlError>
      break;
 8008d90:	e000      	b.n	8008d94 <USBD_ClrFeature+0x3c>
      break;
 8008d92:	bf00      	nop
  }
}
 8008d94:	bf00      	nop
 8008d96:	3708      	adds	r7, #8
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f7ff faa8 	bl	800831c <SWAPBYTE>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff fa9b 	bl	800831c <SWAPBYTE>
 8008de6:	4603      	mov	r3, r0
 8008de8:	461a      	mov	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7ff fa8e 	bl	800831c <SWAPBYTE>
 8008e00:	4603      	mov	r3, r0
 8008e02:	461a      	mov	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	80da      	strh	r2, [r3, #6]
}
 8008e08:	bf00      	nop
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e1a:	2180      	movs	r1, #128	@ 0x80
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fc79 	bl	8009714 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e22:	2100      	movs	r1, #0
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fc75 	bl	8009714 <USBD_LL_StallEP>
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b086      	sub	sp, #24
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d036      	beq.n	8008eb6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e4c:	6938      	ldr	r0, [r7, #16]
 8008e4e:	f000 f836 	bl	8008ebe <USBD_GetLen>
 8008e52:	4603      	mov	r3, r0
 8008e54:	3301      	adds	r3, #1
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	4413      	add	r3, r2
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	7812      	ldrb	r2, [r2, #0]
 8008e6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	4413      	add	r3, r2
 8008e78:	2203      	movs	r2, #3
 8008e7a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e82:	e013      	b.n	8008eac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	4413      	add	r3, r2
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	7812      	ldrb	r2, [r2, #0]
 8008e8e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	3301      	adds	r3, #1
 8008e94:	613b      	str	r3, [r7, #16]
    idx++;
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e7      	bne.n	8008e84 <USBD_GetString+0x52>
 8008eb4:	e000      	b.n	8008eb8 <USBD_GetString+0x86>
    return;
 8008eb6:	bf00      	nop
  }
}
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b085      	sub	sp, #20
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ece:	e005      	b.n	8008edc <USBD_GetLen+0x1e>
  {
    len++;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1f5      	bne.n	8008ed0 <USBD_GetLen+0x12>
  }

  return len;
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2202      	movs	r2, #2
 8008f02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	2100      	movs	r1, #0
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fc84 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	2100      	movs	r1, #0
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 fc73 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	2100      	movs	r1, #0
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 fc77 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	2100      	movs	r1, #0
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 fc66 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2100      	movs	r1, #0
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fc32 	bl	8009826 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2205      	movs	r2, #5
 8008fd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fc40 	bl	8009868 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4912      	ldr	r1, [pc, #72]	@ (8009044 <MX_USB_DEVICE_Init+0x50>)
 8008ffc:	4812      	ldr	r0, [pc, #72]	@ (8009048 <MX_USB_DEVICE_Init+0x54>)
 8008ffe:	f7fe fe61 	bl	8007cc4 <USBD_Init>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009008:	f7f7 fd50 	bl	8000aac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800900c:	490f      	ldr	r1, [pc, #60]	@ (800904c <MX_USB_DEVICE_Init+0x58>)
 800900e:	480e      	ldr	r0, [pc, #56]	@ (8009048 <MX_USB_DEVICE_Init+0x54>)
 8009010:	f7fe fe88 	bl	8007d24 <USBD_RegisterClass>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800901a:	f7f7 fd47 	bl	8000aac <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800901e:	490c      	ldr	r1, [pc, #48]	@ (8009050 <MX_USB_DEVICE_Init+0x5c>)
 8009020:	4809      	ldr	r0, [pc, #36]	@ (8009048 <MX_USB_DEVICE_Init+0x54>)
 8009022:	f7fe facd 	bl	80075c0 <USBD_DFU_RegisterMedia>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800902c:	f7f7 fd3e 	bl	8000aac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009030:	4805      	ldr	r0, [pc, #20]	@ (8009048 <MX_USB_DEVICE_Init+0x54>)
 8009032:	f7fe fe9e 	bl	8007d72 <USBD_Start>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800903c:	f7f7 fd36 	bl	8000aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009040:	bf00      	nop
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000070 	.word	0x20000070
 8009048:	200003b4 	.word	0x200003b4
 800904c:	2000000c 	.word	0x2000000c
 8009050:	200000c0 	.word	0x200000c0

08009054 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2212      	movs	r2, #18
 8009064:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009066:	4b03      	ldr	r3, [pc, #12]	@ (8009074 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	2000008c 	.word	0x2000008c

08009078 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	6039      	str	r1, [r7, #0]
 8009082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2204      	movs	r2, #4
 8009088:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800908a:	4b03      	ldr	r3, [pc, #12]	@ (8009098 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800908c:	4618      	mov	r0, r3
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	200000a0 	.word	0x200000a0

0800909c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4603      	mov	r3, r0
 80090a4:	6039      	str	r1, [r7, #0]
 80090a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d105      	bne.n	80090ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ae:	683a      	ldr	r2, [r7, #0]
 80090b0:	4907      	ldr	r1, [pc, #28]	@ (80090d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090b2:	4808      	ldr	r0, [pc, #32]	@ (80090d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090b4:	f7ff febd 	bl	8008e32 <USBD_GetString>
 80090b8:	e004      	b.n	80090c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	4904      	ldr	r1, [pc, #16]	@ (80090d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090be:	4805      	ldr	r0, [pc, #20]	@ (80090d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090c0:	f7ff feb7 	bl	8008e32 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090c4:	4b02      	ldr	r3, [pc, #8]	@ (80090d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000684 	.word	0x20000684
 80090d4:	080099a4 	.word	0x080099a4

080090d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	6039      	str	r1, [r7, #0]
 80090e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	4904      	ldr	r1, [pc, #16]	@ (80090f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090e8:	4804      	ldr	r0, [pc, #16]	@ (80090fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090ea:	f7ff fea2 	bl	8008e32 <USBD_GetString>
  return USBD_StrDesc;
 80090ee:	4b02      	ldr	r3, [pc, #8]	@ (80090f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20000684 	.word	0x20000684
 80090fc:	080099c4 	.word	0x080099c4

08009100 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	221a      	movs	r2, #26
 8009110:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009112:	f000 f843 	bl	800919c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009116:	4b02      	ldr	r3, [pc, #8]	@ (8009120 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009118:	4618      	mov	r0, r3
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	200000a4 	.word	0x200000a4

08009124 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	4603      	mov	r3, r0
 800912c:	6039      	str	r1, [r7, #0]
 800912e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d105      	bne.n	8009142 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4907      	ldr	r1, [pc, #28]	@ (8009158 <USBD_FS_ConfigStrDescriptor+0x34>)
 800913a:	4808      	ldr	r0, [pc, #32]	@ (800915c <USBD_FS_ConfigStrDescriptor+0x38>)
 800913c:	f7ff fe79 	bl	8008e32 <USBD_GetString>
 8009140:	e004      	b.n	800914c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	4904      	ldr	r1, [pc, #16]	@ (8009158 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009146:	4805      	ldr	r0, [pc, #20]	@ (800915c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009148:	f7ff fe73 	bl	8008e32 <USBD_GetString>
  }
  return USBD_StrDesc;
 800914c:	4b02      	ldr	r3, [pc, #8]	@ (8009158 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000684 	.word	0x20000684
 800915c:	080099d8 	.word	0x080099d8

08009160 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d105      	bne.n	800917e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4907      	ldr	r1, [pc, #28]	@ (8009194 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009176:	4808      	ldr	r0, [pc, #32]	@ (8009198 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009178:	f7ff fe5b 	bl	8008e32 <USBD_GetString>
 800917c:	e004      	b.n	8009188 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	4904      	ldr	r1, [pc, #16]	@ (8009194 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009182:	4805      	ldr	r0, [pc, #20]	@ (8009198 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009184:	f7ff fe55 	bl	8008e32 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009188:	4b02      	ldr	r3, [pc, #8]	@ (8009194 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20000684 	.word	0x20000684
 8009198:	080099e4 	.word	0x080099e4

0800919c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091a2:	4b0f      	ldr	r3, [pc, #60]	@ (80091e0 <Get_SerialNum+0x44>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091a8:	4b0e      	ldr	r3, [pc, #56]	@ (80091e4 <Get_SerialNum+0x48>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091ae:	4b0e      	ldr	r3, [pc, #56]	@ (80091e8 <Get_SerialNum+0x4c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4413      	add	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d009      	beq.n	80091d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091c2:	2208      	movs	r2, #8
 80091c4:	4909      	ldr	r1, [pc, #36]	@ (80091ec <Get_SerialNum+0x50>)
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f814 	bl	80091f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091cc:	2204      	movs	r2, #4
 80091ce:	4908      	ldr	r1, [pc, #32]	@ (80091f0 <Get_SerialNum+0x54>)
 80091d0:	68b8      	ldr	r0, [r7, #8]
 80091d2:	f000 f80f 	bl	80091f4 <IntToUnicode>
  }
}
 80091d6:	bf00      	nop
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	1fff7a10 	.word	0x1fff7a10
 80091e4:	1fff7a14 	.word	0x1fff7a14
 80091e8:	1fff7a18 	.word	0x1fff7a18
 80091ec:	200000a6 	.word	0x200000a6
 80091f0:	200000b6 	.word	0x200000b6

080091f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009206:	2300      	movs	r3, #0
 8009208:	75fb      	strb	r3, [r7, #23]
 800920a:	e027      	b.n	800925c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	0f1b      	lsrs	r3, r3, #28
 8009210:	2b09      	cmp	r3, #9
 8009212:	d80b      	bhi.n	800922c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	0f1b      	lsrs	r3, r3, #28
 8009218:	b2da      	uxtb	r2, r3
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	4619      	mov	r1, r3
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	440b      	add	r3, r1
 8009224:	3230      	adds	r2, #48	@ 0x30
 8009226:	b2d2      	uxtb	r2, r2
 8009228:	701a      	strb	r2, [r3, #0]
 800922a:	e00a      	b.n	8009242 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	0f1b      	lsrs	r3, r3, #28
 8009230:	b2da      	uxtb	r2, r3
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	4619      	mov	r1, r3
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	440b      	add	r3, r1
 800923c:	3237      	adds	r2, #55	@ 0x37
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	011b      	lsls	r3, r3, #4
 8009246:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	3301      	adds	r3, #1
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	4413      	add	r3, r2
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	3301      	adds	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]
 800925c:	7dfa      	ldrb	r2, [r7, #23]
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	429a      	cmp	r2, r3
 8009262:	d3d3      	bcc.n	800920c <IntToUnicode+0x18>
  }
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8009272:	b480      	push	{r7}
 8009274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8009276:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8009278:	4618      	mov	r0, r3
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8009282:	b480      	push	{r7}
 8009284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8009286:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8009288:	4618      	mov	r0, r3
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800929a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800929c:	4618      	mov	r0, r3
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80092b4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b085      	sub	sp, #20
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 80092ce:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	460b      	mov	r3, r1
 80092e6:	607a      	str	r2, [r7, #4]
 80092e8:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 80092ea:	7afb      	ldrb	r3, [r7, #11]
 80092ec:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 80092ee:	bf00      	nop
  }
  return (USBD_OK);
 80092f0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
	...

08009300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b0a0      	sub	sp, #128	@ 0x80
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009308:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	605a      	str	r2, [r3, #4]
 8009312:	609a      	str	r2, [r3, #8]
 8009314:	60da      	str	r2, [r3, #12]
 8009316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009318:	f107 0314 	add.w	r3, r7, #20
 800931c:	2258      	movs	r2, #88	@ 0x58
 800931e:	2100      	movs	r1, #0
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fb07 	bl	8009934 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932e:	d155      	bne.n	80093dc <HAL_PCD_MspInit+0xdc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009330:	2320      	movs	r3, #32
 8009332:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009334:	2300      	movs	r3, #0
 8009336:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	4618      	mov	r0, r3
 800933e:	f7fb fb6b 	bl	8004a18 <HAL_RCCEx_PeriphCLKConfig>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8009348:	f7f7 fbb0 	bl	8000aac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800934c:	2300      	movs	r3, #0
 800934e:	613b      	str	r3, [r7, #16]
 8009350:	4b24      	ldr	r3, [pc, #144]	@ (80093e4 <HAL_PCD_MspInit+0xe4>)
 8009352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009354:	4a23      	ldr	r2, [pc, #140]	@ (80093e4 <HAL_PCD_MspInit+0xe4>)
 8009356:	f043 0301 	orr.w	r3, r3, #1
 800935a:	6313      	str	r3, [r2, #48]	@ 0x30
 800935c:	4b21      	ldr	r3, [pc, #132]	@ (80093e4 <HAL_PCD_MspInit+0xe4>)
 800935e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009368:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800936c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800936e:	2302      	movs	r3, #2
 8009370:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009372:	2300      	movs	r3, #0
 8009374:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009376:	2303      	movs	r3, #3
 8009378:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800937a:	230a      	movs	r3, #10
 800937c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800937e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009382:	4619      	mov	r1, r3
 8009384:	4818      	ldr	r0, [pc, #96]	@ (80093e8 <HAL_PCD_MspInit+0xe8>)
 8009386:	f7f8 fb23 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800938a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800938e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009390:	2300      	movs	r3, #0
 8009392:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009394:	2300      	movs	r3, #0
 8009396:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009398:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800939c:	4619      	mov	r1, r3
 800939e:	4812      	ldr	r0, [pc, #72]	@ (80093e8 <HAL_PCD_MspInit+0xe8>)
 80093a0:	f7f8 fb16 	bl	80019d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093a4:	4b0f      	ldr	r3, [pc, #60]	@ (80093e4 <HAL_PCD_MspInit+0xe4>)
 80093a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a8:	4a0e      	ldr	r2, [pc, #56]	@ (80093e4 <HAL_PCD_MspInit+0xe4>)
 80093aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	4b0b      	ldr	r3, [pc, #44]	@ (80093e4 <HAL_PCD_MspInit+0xe4>)
 80093b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b8:	4a0a      	ldr	r2, [pc, #40]	@ (80093e4 <HAL_PCD_MspInit+0xe4>)
 80093ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093be:	6453      	str	r3, [r2, #68]	@ 0x44
 80093c0:	4b08      	ldr	r3, [pc, #32]	@ (80093e4 <HAL_PCD_MspInit+0xe4>)
 80093c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093cc:	2200      	movs	r2, #0
 80093ce:	2100      	movs	r1, #0
 80093d0:	2043      	movs	r0, #67	@ 0x43
 80093d2:	f7f8 fac6 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093d6:	2043      	movs	r0, #67	@ 0x43
 80093d8:	f7f8 fadf 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093dc:	bf00      	nop
 80093de:	3780      	adds	r7, #128	@ 0x80
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	40023800 	.word	0x40023800
 80093e8:	40020000 	.word	0x40020000

080093ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fe fd1b 	bl	8007e3e <USBD_LL_SetupStage>
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009422:	78fa      	ldrb	r2, [r7, #3]
 8009424:	6879      	ldr	r1, [r7, #4]
 8009426:	4613      	mov	r3, r2
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	440b      	add	r3, r1
 8009430:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	4619      	mov	r1, r3
 800943a:	f7fe fd55 	bl	8007ee8 <USBD_LL_DataOutStage>
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4613      	mov	r3, r2
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	440b      	add	r3, r1
 8009466:	3348      	adds	r3, #72	@ 0x48
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	4619      	mov	r1, r3
 800946e:	f7fe fd9e 	bl	8007fae <USBD_LL_DataInStage>
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe feb2 	bl	80081f2 <USBD_LL_SOF>
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800949e:	2301      	movs	r3, #1
 80094a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d001      	beq.n	80094ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094aa:	f7f7 faff 	bl	8000aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80094b4:	7bfa      	ldrb	r2, [r7, #15]
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe fe5c 	bl	8008176 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fe08 	bl	80080da <USBD_LL_Reset>
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe fe57 	bl	8008196 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094fa:	f043 0301 	orr.w	r3, r3, #1
 80094fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d005      	beq.n	8009514 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009508:	4b04      	ldr	r3, [pc, #16]	@ (800951c <HAL_PCD_SuspendCallback+0x48>)
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	4a03      	ldr	r2, [pc, #12]	@ (800951c <HAL_PCD_SuspendCallback+0x48>)
 800950e:	f043 0306 	orr.w	r3, r3, #6
 8009512:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	e000ed00 	.word	0xe000ed00

08009520 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fe47 	bl	80081c2 <USBD_LL_Resume>
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800954e:	78fa      	ldrb	r2, [r7, #3]
 8009550:	4611      	mov	r1, r2
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fe95 	bl	8008282 <USBD_LL_IsoOUTIncomplete>
}
 8009558:	bf00      	nop
 800955a:	3708      	adds	r7, #8
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009572:	78fa      	ldrb	r2, [r7, #3]
 8009574:	4611      	mov	r1, r2
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fe5d 	bl	8008236 <USBD_LL_IsoINIncomplete>
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009592:	4618      	mov	r0, r3
 8009594:	f7fe fe9b 	bl	80082ce <USBD_LL_DevConnected>
}
 8009598:	bf00      	nop
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fe fe98 	bl	80082e4 <USBD_LL_DevDisconnected>
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d13f      	bne.n	800964c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095cc:	4a22      	ldr	r2, [pc, #136]	@ (8009658 <USBD_LL_Init+0x9c>)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a20      	ldr	r2, [pc, #128]	@ (8009658 <USBD_LL_Init+0x9c>)
 80095d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095dc:	4b1e      	ldr	r3, [pc, #120]	@ (8009658 <USBD_LL_Init+0x9c>)
 80095de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80095e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009658 <USBD_LL_Init+0x9c>)
 80095e6:	2206      	movs	r2, #6
 80095e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009658 <USBD_LL_Init+0x9c>)
 80095ec:	2202      	movs	r2, #2
 80095ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095f0:	4b19      	ldr	r3, [pc, #100]	@ (8009658 <USBD_LL_Init+0x9c>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095f6:	4b18      	ldr	r3, [pc, #96]	@ (8009658 <USBD_LL_Init+0x9c>)
 80095f8:	2202      	movs	r2, #2
 80095fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80095fc:	4b16      	ldr	r3, [pc, #88]	@ (8009658 <USBD_LL_Init+0x9c>)
 80095fe:	2201      	movs	r2, #1
 8009600:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009602:	4b15      	ldr	r3, [pc, #84]	@ (8009658 <USBD_LL_Init+0x9c>)
 8009604:	2200      	movs	r2, #0
 8009606:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009608:	4b13      	ldr	r3, [pc, #76]	@ (8009658 <USBD_LL_Init+0x9c>)
 800960a:	2200      	movs	r2, #0
 800960c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800960e:	4b12      	ldr	r3, [pc, #72]	@ (8009658 <USBD_LL_Init+0x9c>)
 8009610:	2201      	movs	r2, #1
 8009612:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009614:	4b10      	ldr	r3, [pc, #64]	@ (8009658 <USBD_LL_Init+0x9c>)
 8009616:	2201      	movs	r2, #1
 8009618:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800961a:	4b0f      	ldr	r3, [pc, #60]	@ (8009658 <USBD_LL_Init+0x9c>)
 800961c:	2200      	movs	r2, #0
 800961e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009620:	480d      	ldr	r0, [pc, #52]	@ (8009658 <USBD_LL_Init+0x9c>)
 8009622:	f7f9 fe26 	bl	8003272 <HAL_PCD_Init>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800962c:	f7f7 fa3e 	bl	8000aac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009630:	2180      	movs	r1, #128	@ 0x80
 8009632:	4809      	ldr	r0, [pc, #36]	@ (8009658 <USBD_LL_Init+0x9c>)
 8009634:	f7fa ff8f 	bl	8004556 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009638:	2240      	movs	r2, #64	@ 0x40
 800963a:	2100      	movs	r1, #0
 800963c:	4806      	ldr	r0, [pc, #24]	@ (8009658 <USBD_LL_Init+0x9c>)
 800963e:	f7fa ff43 	bl	80044c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009642:	2280      	movs	r2, #128	@ 0x80
 8009644:	2101      	movs	r1, #1
 8009646:	4804      	ldr	r0, [pc, #16]	@ (8009658 <USBD_LL_Init+0x9c>)
 8009648:	f7fa ff3e 	bl	80044c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000884 	.word	0x20000884

0800965c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009672:	4618      	mov	r0, r3
 8009674:	f7f9 ff21 	bl	80034ba <HAL_PCD_Start>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f92c 	bl	80098dc <USBD_Get_USB_Status>
 8009684:	4603      	mov	r3, r0
 8009686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009688:	7bbb      	ldrb	r3, [r7, #14]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b084      	sub	sp, #16
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7f9 ff39 	bl	8003520 <HAL_PCD_Stop>
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f911 	bl	80098dc <USBD_Get_USB_Status>
 80096ba:	4603      	mov	r3, r0
 80096bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096be:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	4608      	mov	r0, r1
 80096d2:	4611      	mov	r1, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	70fb      	strb	r3, [r7, #3]
 80096da:	460b      	mov	r3, r1
 80096dc:	70bb      	strb	r3, [r7, #2]
 80096de:	4613      	mov	r3, r2
 80096e0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80096f0:	78bb      	ldrb	r3, [r7, #2]
 80096f2:	883a      	ldrh	r2, [r7, #0]
 80096f4:	78f9      	ldrb	r1, [r7, #3]
 80096f6:	f7fa fb50 	bl	8003d9a <HAL_PCD_EP_Open>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f8eb 	bl	80098dc <USBD_Get_USB_Status>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970a:	7bbb      	ldrb	r3, [r7, #14]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800972e:	78fa      	ldrb	r2, [r7, #3]
 8009730:	4611      	mov	r1, r2
 8009732:	4618      	mov	r0, r3
 8009734:	f7fa fc2e 	bl	8003f94 <HAL_PCD_EP_SetStall>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f8cc 	bl	80098dc <USBD_Get_USB_Status>
 8009744:	4603      	mov	r3, r0
 8009746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009748:	7bbb      	ldrb	r3, [r7, #14]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	460b      	mov	r3, r1
 800975c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7fa fc73 	bl	800405c <HAL_PCD_EP_ClrStall>
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f8ad 	bl	80098dc <USBD_Get_USB_Status>
 8009782:	4603      	mov	r3, r0
 8009784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009786:	7bbb      	ldrb	r3, [r7, #14]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80097a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	da0b      	bge.n	80097c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	4613      	mov	r3, r2
 80097b6:	00db      	lsls	r3, r3, #3
 80097b8:	1a9b      	subs	r3, r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	440b      	add	r3, r1
 80097be:	333e      	adds	r3, #62	@ 0x3e
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	e00b      	b.n	80097dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097ca:	68f9      	ldr	r1, [r7, #12]
 80097cc:	4613      	mov	r3, r2
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80097da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	4611      	mov	r1, r2
 8009806:	4618      	mov	r0, r3
 8009808:	f7fa faa2 	bl	8003d50 <HAL_PCD_SetAddress>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	4618      	mov	r0, r3
 8009814:	f000 f862 	bl	80098dc <USBD_Get_USB_Status>
 8009818:	4603      	mov	r3, r0
 800981a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800981c:	7bbb      	ldrb	r3, [r7, #14]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b086      	sub	sp, #24
 800982a:	af00      	add	r7, sp, #0
 800982c:	60f8      	str	r0, [r7, #12]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
 8009832:	460b      	mov	r3, r1
 8009834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009844:	7af9      	ldrb	r1, [r7, #11]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	f7fa fb59 	bl	8003f00 <HAL_PCD_EP_Transmit>
 800984e:	4603      	mov	r3, r0
 8009850:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f841 	bl	80098dc <USBD_Get_USB_Status>
 800985a:	4603      	mov	r3, r0
 800985c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800985e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	460b      	mov	r3, r1
 8009876:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009886:	7af9      	ldrb	r1, [r7, #11]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	f7fa faed 	bl	8003e6a <HAL_PCD_EP_Receive>
 8009890:	4603      	mov	r3, r0
 8009892:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f820 	bl	80098dc <USBD_Get_USB_Status>
 800989c:	4603      	mov	r3, r0
 800989e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098b4:	4b03      	ldr	r3, [pc, #12]	@ (80098c4 <USBD_static_malloc+0x18>)
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	20000c8c 	.word	0x20000c8c

080098c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]

}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	4603      	mov	r3, r0
 80098e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098ea:	79fb      	ldrb	r3, [r7, #7]
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d817      	bhi.n	8009920 <USBD_Get_USB_Status+0x44>
 80098f0:	a201      	add	r2, pc, #4	@ (adr r2, 80098f8 <USBD_Get_USB_Status+0x1c>)
 80098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f6:	bf00      	nop
 80098f8:	08009909 	.word	0x08009909
 80098fc:	0800990f 	.word	0x0800990f
 8009900:	08009915 	.word	0x08009915
 8009904:	0800991b 	.word	0x0800991b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73fb      	strb	r3, [r7, #15]
    break;
 800990c:	e00b      	b.n	8009926 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800990e:	2303      	movs	r3, #3
 8009910:	73fb      	strb	r3, [r7, #15]
    break;
 8009912:	e008      	b.n	8009926 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009914:	2301      	movs	r3, #1
 8009916:	73fb      	strb	r3, [r7, #15]
    break;
 8009918:	e005      	b.n	8009926 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800991a:	2303      	movs	r3, #3
 800991c:	73fb      	strb	r3, [r7, #15]
    break;
 800991e:	e002      	b.n	8009926 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009920:	2303      	movs	r3, #3
 8009922:	73fb      	strb	r3, [r7, #15]
    break;
 8009924:	bf00      	nop
  }
  return usb_status;
 8009926:	7bfb      	ldrb	r3, [r7, #15]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <memset>:
 8009934:	4402      	add	r2, r0
 8009936:	4603      	mov	r3, r0
 8009938:	4293      	cmp	r3, r2
 800993a:	d100      	bne.n	800993e <memset+0xa>
 800993c:	4770      	bx	lr
 800993e:	f803 1b01 	strb.w	r1, [r3], #1
 8009942:	e7f9      	b.n	8009938 <memset+0x4>

08009944 <__libc_init_array>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	4d0d      	ldr	r5, [pc, #52]	@ (800997c <__libc_init_array+0x38>)
 8009948:	4c0d      	ldr	r4, [pc, #52]	@ (8009980 <__libc_init_array+0x3c>)
 800994a:	1b64      	subs	r4, r4, r5
 800994c:	10a4      	asrs	r4, r4, #2
 800994e:	2600      	movs	r6, #0
 8009950:	42a6      	cmp	r6, r4
 8009952:	d109      	bne.n	8009968 <__libc_init_array+0x24>
 8009954:	4d0b      	ldr	r5, [pc, #44]	@ (8009984 <__libc_init_array+0x40>)
 8009956:	4c0c      	ldr	r4, [pc, #48]	@ (8009988 <__libc_init_array+0x44>)
 8009958:	f000 f818 	bl	800998c <_init>
 800995c:	1b64      	subs	r4, r4, r5
 800995e:	10a4      	asrs	r4, r4, #2
 8009960:	2600      	movs	r6, #0
 8009962:	42a6      	cmp	r6, r4
 8009964:	d105      	bne.n	8009972 <__libc_init_array+0x2e>
 8009966:	bd70      	pop	{r4, r5, r6, pc}
 8009968:	f855 3b04 	ldr.w	r3, [r5], #4
 800996c:	4798      	blx	r3
 800996e:	3601      	adds	r6, #1
 8009970:	e7ee      	b.n	8009950 <__libc_init_array+0xc>
 8009972:	f855 3b04 	ldr.w	r3, [r5], #4
 8009976:	4798      	blx	r3
 8009978:	3601      	adds	r6, #1
 800997a:	e7f2      	b.n	8009962 <__libc_init_array+0x1e>
 800997c:	08009a74 	.word	0x08009a74
 8009980:	08009a74 	.word	0x08009a74
 8009984:	08009a74 	.word	0x08009a74
 8009988:	08009a78 	.word	0x08009a78

0800998c <_init>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr

08009998 <_fini>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	bf00      	nop
 800999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999e:	bc08      	pop	{r3}
 80099a0:	469e      	mov	lr, r3
 80099a2:	4770      	bx	lr

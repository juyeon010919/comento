
Comento_I2C_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080084ac  080084ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008574  08008574  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800857c  0800857c  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08008584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  200000dc  08008660  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  08008660  000210ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e92b  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c9c  00000000  00000000  0003ea37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  000426d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00043b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f7e  00000000  00000000  00044f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b4f9  00000000  00000000  0006ae86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc446  00000000  00000000  0008637f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001627c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005784  00000000  00000000  00162818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000dc 	.word	0x200000dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008494 	.word	0x08008494

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e0 	.word	0x200000e0
 8000214:	08008494 	.word	0x08008494

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fcfb 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f81f 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f9d3 	bl	80008c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000522:	f000 f9a7 	bl	8000874 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000526:	f000 f8d7 	bl	80006d8 <MX_CAN1_Init>
  MX_I2C1_Init();
 800052a:	f000 f909 	bl	8000740 <MX_I2C1_Init>
  MX_SPI2_Init();
 800052e:	f000 f935 	bl	800079c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000532:	f000 f969 	bl	8000808 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000536:	f000 f87d 	bl	8000634 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800053a:	f007 fadf 	bl	8007afc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t i2c_tx_data = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	71fb      	strb	r3, [r7, #7]
  uint8_t i2c_tx_addr = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	71bb      	strb	r3, [r7, #6]
  uint8_t i2c_rx_data = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	717b      	strb	r3, [r7, #5]
  uint8_t i2c_rx_addr = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	713b      	strb	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    test1.field.a = 1;
 800054e:	783b      	ldrb	r3, [r7, #0]
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	703b      	strb	r3, [r7, #0]
	    i2c_tx_data = test1.Pmic_data;
 8000556:	783b      	ldrb	r3, [r7, #0]
 8000558:	71fb      	strb	r3, [r7, #7]
	    test1.field.a = 1;
 800055a:	e7f8      	b.n	800054e <main+0x3e>

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2234      	movs	r2, #52	; 0x34
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f007 ff8a 	bl	8008484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <SystemClock_Config+0xd0>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a28      	ldr	r2, [pc, #160]	; (800062c <SystemClock_Config+0xd0>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <SystemClock_Config+0xd4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a22      	ldr	r2, [pc, #136]	; (8000630 <SystemClock_Config+0xd4>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80005d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005da:	2308      	movs	r3, #8
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fad4 	bl	8003b94 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f2:	f000 fa17 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2103      	movs	r1, #3
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fe36 	bl	8003284 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061e:	f000 fa01 	bl	8000a24 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_ADC1_Init+0x98>)
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x9c>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_ADC1_Init+0x98>)
 800064e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000652:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC1_Init+0x98>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_ADC1_Init+0x98>)
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xa0>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_ADC1_Init+0x98>)
 8000682:	2201      	movs	r2, #1
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_ADC1_Init+0x98>)
 8000690:	2201      	movs	r2, #1
 8000692:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_ADC1_Init+0x98>)
 8000696:	f000 fcd1 	bl	800103c <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a0:	f000 f9c0 	bl	8000a24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_ADC1_Init+0x98>)
 80006b6:	f000 fd05 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c0:	f000 f9b0 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000760 	.word	0x20000760
 80006d0:	40012000 	.word	0x40012000
 80006d4:	0f000001 	.word	0x0f000001

080006d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_CAN1_Init+0x60>)
 80006de:	4a17      	ldr	r2, [pc, #92]	; (800073c <MX_CAN1_Init+0x64>)
 80006e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_CAN1_Init+0x60>)
 80006e4:	2210      	movs	r2, #16
 80006e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_CAN1_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_CAN1_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_CAN1_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_CAN1_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_CAN1_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_CAN1_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_CAN1_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_CAN1_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_CAN1_Init+0x60>)
 800071a:	2200      	movs	r2, #0
 800071c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_CAN1_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_CAN1_Init+0x60>)
 8000726:	f000 fefb 	bl	8001520 <HAL_CAN_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 f978 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200007a8 	.word	0x200007a8
 800073c:	40006400 	.word	0x40006400

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x50>)
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_I2C1_Init+0x54>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x50>)
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_I2C1_Init+0x58>)
 800074e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_I2C1_Init+0x50>)
 800075e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_I2C1_Init+0x50>)
 800077e:	f001 fa8b 	bl	8001c98 <HAL_I2C_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 f94c 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200006b4 	.word	0x200006b4
 8000794:	40005400 	.word	0x40005400
 8000798:	000186a0 	.word	0x000186a0

0800079c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SPI2_Init+0x64>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_SPI2_Init+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI2_Init+0x64>)
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SPI2_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SPI2_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_SPI2_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI2_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_SPI2_Init+0x64>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SPI2_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SPI2_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SPI2_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SPI2_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SPI2_Init+0x64>)
 80007e8:	220a      	movs	r2, #10
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_SPI2_Init+0x64>)
 80007ee:	f003 fc55 	bl	800409c <HAL_SPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f914 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000618 	.word	0x20000618
 8000804:	40003800 	.word	0x40003800

08000808 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_SPI3_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_SPI3_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_SPI3_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_SPI3_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_SPI3_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_SPI3_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_SPI3_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_SPI3_Init+0x64>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_SPI3_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_SPI3_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_SPI3_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_SPI3_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_SPI3_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_SPI3_Init+0x64>)
 800085a:	f003 fc1f 	bl	800409c <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f8de 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000708 	.word	0x20000708
 8000870:	40003c00 	.word	0x40003c00

08000874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART3_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART3_UART_Init+0x4c>)
 80008ac:	f003 fc7f 	bl	80041ae <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f8b5 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000670 	.word	0x20000670
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
 80008e2:	4b4c      	ldr	r3, [pc, #304]	; (8000a14 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a4b      	ldr	r2, [pc, #300]	; (8000a14 <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	4b45      	ldr	r3, [pc, #276]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a44      	ldr	r2, [pc, #272]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b42      	ldr	r3, [pc, #264]	; (8000a14 <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b3e      	ldr	r3, [pc, #248]	; (8000a14 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a3d      	ldr	r2, [pc, #244]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a36      	ldr	r2, [pc, #216]	; (8000a14 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a2f      	ldr	r2, [pc, #188]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <MX_GPIO_Init+0x14c>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f244 0181 	movw	r1, #16513	; 0x4081
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <MX_GPIO_Init+0x150>)
 800098e:	f001 f969 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2140      	movs	r1, #64	; 0x40
 8000996:	4821      	ldr	r0, [pc, #132]	; (8000a1c <MX_GPIO_Init+0x154>)
 8000998:	f001 f964 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481b      	ldr	r0, [pc, #108]	; (8000a20 <MX_GPIO_Init+0x158>)
 80009b4:	f000 ffc2 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_GPIO_Init+0x150>)
 80009d2:	f000 ffb3 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <MX_GPIO_Init+0x154>)
 80009ee:	f000 ffa5 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_GPIO_Init+0x154>)
 8000a06:	f000 ff99 	bl	800193c <HAL_GPIO_Init>

}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	; 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40021800 	.word	0x40021800
 8000a20:	40020800 	.word	0x40020800

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_ADC_MspInit+0x7c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d127      	bne.n	8000af2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_ADC_MspInit+0x80>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <HAL_ADC_MspInit+0x84>)
 8000aee:	f000 ff25 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40012000 	.word	0x40012000
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000

08000b08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_CAN_MspInit+0x84>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d12b      	bne.n	8000b82 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_CAN_MspInit+0x88>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <HAL_CAN_MspInit+0x88>)
 8000b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_CAN_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_CAN_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <HAL_CAN_MspInit+0x88>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_CAN_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b62:	2303      	movs	r3, #3
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b72:	2309      	movs	r3, #9
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_CAN_MspInit+0x8c>)
 8000b7e:	f000 fedd 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40006400 	.word	0x40006400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40021800 	.word	0x40021800

08000b98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_I2C_MspInit+0x84>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d12c      	bne.n	8000c14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bd6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bdc:	2312      	movs	r3, #18
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be8:	2304      	movs	r3, #4
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <HAL_I2C_MspInit+0x8c>)
 8000bf4:	f000 fea2 	bl	800193c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <HAL_I2C_MspInit+0x88>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400

08000c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a51      	ldr	r2, [pc, #324]	; (8000d8c <HAL_SPI_MspInit+0x164>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d14b      	bne.n	8000ce2 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
 8000c4e:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a4f      	ldr	r2, [pc, #316]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	623b      	str	r3, [r7, #32]
 8000c64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
 8000c6a:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a41      	ldr	r2, [pc, #260]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3f      	ldr	r3, [pc, #252]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cae:	2305      	movs	r3, #5
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4836      	ldr	r0, [pc, #216]	; (8000d94 <HAL_SPI_MspInit+0x16c>)
 8000cba:	f000 fe3f 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd0:	2305      	movs	r3, #5
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	482f      	ldr	r0, [pc, #188]	; (8000d98 <HAL_SPI_MspInit+0x170>)
 8000cdc:	f000 fe2e 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ce0:	e050      	b.n	8000d84 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <HAL_SPI_MspInit+0x174>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d14b      	bne.n	8000d84 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a26      	ldr	r2, [pc, #152]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_SPI_MspInit+0x168>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000d52:	2307      	movs	r3, #7
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480e      	ldr	r0, [pc, #56]	; (8000d98 <HAL_SPI_MspInit+0x170>)
 8000d5e:	f000 fded 	bl	800193c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d74:	2306      	movs	r3, #6
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_SPI_MspInit+0x16c>)
 8000d80:	f000 fddc 	bl	800193c <HAL_GPIO_Init>
}
 8000d84:	bf00      	nop
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40003800 	.word	0x40003800
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020800 	.word	0x40020800
 8000d98:	40020400 	.word	0x40020400
 8000d9c:	40003c00 	.word	0x40003c00

08000da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_UART_MspInit+0x84>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d12c      	bne.n	8000e1c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_UART_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_UART_MspInit+0x8c>)
 8000e18:	f000 fd90 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40004800 	.word	0x40004800
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f89a 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <OTG_FS_IRQHandler+0x10>)
 8000e8a:	f001 f9d9 	bl	8002240 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000ca4 	.word	0x20000ca4

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed8:	4c0b      	ldr	r4, [pc, #44]	; (8000f08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ee6:	f7ff ffd7 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f007 faa7 	bl	800843c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fb0f 	bl	8000510 <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ef4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000f00:	08008584 	.word	0x08008584
  ldr r2, =_sbss
 8000f04:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000f08:	200010ac 	.word	0x200010ac

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 fcbd 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fd74 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fcd5 	bl	8001922 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 fc9d 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	200007d0 	.word	0x200007d0

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200007d0 	.word	0x200007d0

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e033      	b.n	80010ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fd10 	bl	8000a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	d118      	bne.n	80010ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001082:	f023 0302 	bic.w	r3, r3, #2
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f94a 	bl	8001328 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1c>
 80010dc:	2302      	movs	r3, #2
 80010de:	e113      	b.n	8001308 <HAL_ADC_ConfigChannel+0x244>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	d925      	bls.n	800113c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68d9      	ldr	r1, [r3, #12]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	3b1e      	subs	r3, #30
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43da      	mvns	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	400a      	ands	r2, r1
 8001114:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68d9      	ldr	r1, [r3, #12]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	4603      	mov	r3, r0
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4403      	add	r3, r0
 800112e:	3b1e      	subs	r3, #30
 8001130:	409a      	lsls	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e022      	b.n	8001182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6919      	ldr	r1, [r3, #16]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	2207      	movs	r2, #7
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	400a      	ands	r2, r1
 800115e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6919      	ldr	r1, [r3, #16]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	4603      	mov	r3, r0
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4403      	add	r3, r0
 8001178:	409a      	lsls	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b06      	cmp	r3, #6
 8001188:	d824      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	3b05      	subs	r3, #5
 800119c:	221f      	movs	r2, #31
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	400a      	ands	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b05      	subs	r3, #5
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
 80011d2:	e04c      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d824      	bhi.n	8001226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b23      	subs	r3, #35	; 0x23
 80011ee:	221f      	movs	r2, #31
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b23      	subs	r3, #35	; 0x23
 8001218:	fa00 f203 	lsl.w	r2, r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
 8001224:	e023      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	; 0x41
 8001238:	221f      	movs	r2, #31
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b41      	subs	r3, #65	; 0x41
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_ADC_ConfigChannel+0x250>)
 8001270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a28      	ldr	r2, [pc, #160]	; (8001318 <HAL_ADC_ConfigChannel+0x254>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d10f      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1d8>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d10b      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_ADC_ConfigChannel+0x254>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12b      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <HAL_ADC_ConfigChannel+0x258>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d003      	beq.n	80012b8 <HAL_ADC_ConfigChannel+0x1f4>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b11      	cmp	r3, #17
 80012b6:	d122      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_ADC_ConfigChannel+0x258>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d111      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_ADC_ConfigChannel+0x25c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_ADC_ConfigChannel+0x260>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9a      	lsrs	r2, r3, #18
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012f0:	e002      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40012300 	.word	0x40012300
 8001318:	40012000 	.word	0x40012000
 800131c:	10000012 	.word	0x10000012
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001330:	4b79      	ldr	r3, [pc, #484]	; (8001518 <ADC_Init+0x1f0>)
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	4a58      	ldr	r2, [pc, #352]	; (800151c <ADC_Init+0x1f4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e00f      	b.n	8001426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0202 	bic.w	r2, r2, #2
 8001434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	035a      	lsls	r2, r3, #13
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e007      	b.n	800149c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	051a      	lsls	r2, r3, #20
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014de:	025a      	lsls	r2, r3, #9
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	029a      	lsls	r2, r3, #10
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40012300 	.word	0x40012300
 800151c:	0f000001 	.word	0x0f000001

08001520 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0ed      	b.n	800170e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fae2 	bl	8000b08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff fd42 	bl	8000fdc <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800155a:	e012      	b.n	8001582 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800155c:	f7ff fd3e 	bl	8000fdc <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d90b      	bls.n	8001582 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2205      	movs	r2, #5
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0c5      	b.n	800170e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0e5      	beq.n	800155c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0202 	bic.w	r2, r2, #2
 800159e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a0:	f7ff fd1c 	bl	8000fdc <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015a6:	e012      	b.n	80015ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a8:	f7ff fd18 	bl	8000fdc <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b0a      	cmp	r3, #10
 80015b4:	d90b      	bls.n	80015ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2205      	movs	r2, #5
 80015c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e09f      	b.n	800170e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1e5      	bne.n	80015a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e1b      	ldrb	r3, [r3, #24]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e007      	b.n	8001606 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7e5b      	ldrb	r3, [r3, #25]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e9b      	ldrb	r3, [r3, #26]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0220 	orr.w	r2, r2, #32
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e007      	b.n	800165a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0220 	bic.w	r2, r2, #32
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7edb      	ldrb	r3, [r3, #27]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0210 	bic.w	r2, r2, #16
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0210 	orr.w	r2, r2, #16
 8001682:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7f1b      	ldrb	r3, [r3, #28]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0208 	orr.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0208 	bic.w	r2, r2, #8
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7f5b      	ldrb	r3, [r3, #29]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0204 	orr.w	r2, r2, #4
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e007      	b.n	80016d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	ea42 0103 	orr.w	r1, r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff29 	bl	8001718 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff3e 	bl	8001760 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff31 	bl	800177c <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	e165      	b.n	8001c24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001958:	2201      	movs	r2, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	429a      	cmp	r2, r3
 8001972:	f040 8154 	bne.w	8001c1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d005      	beq.n	800198e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198a:	2b02      	cmp	r3, #2
 800198c:	d130      	bne.n	80019f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c4:	2201      	movs	r2, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 0201 	and.w	r2, r3, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d017      	beq.n	8001a2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d123      	bne.n	8001a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	220f      	movs	r2, #15
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	08da      	lsrs	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3208      	adds	r2, #8
 8001a7a:	69b9      	ldr	r1, [r7, #24]
 8001a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0203 	and.w	r2, r3, #3
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80ae 	beq.w	8001c1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_GPIO_Init+0x300>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a5c      	ldr	r2, [pc, #368]	; (8001c3c <HAL_GPIO_Init+0x300>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <HAL_GPIO_Init+0x300>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ade:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	220f      	movs	r2, #15
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a4f      	ldr	r2, [pc, #316]	; (8001c44 <HAL_GPIO_Init+0x308>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x21a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4e      	ldr	r2, [pc, #312]	; (8001c48 <HAL_GPIO_Init+0x30c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x216>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4d      	ldr	r2, [pc, #308]	; (8001c4c <HAL_GPIO_Init+0x310>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x212>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4c      	ldr	r2, [pc, #304]	; (8001c50 <HAL_GPIO_Init+0x314>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x20e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4b      	ldr	r2, [pc, #300]	; (8001c54 <HAL_GPIO_Init+0x318>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x20a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4a      	ldr	r2, [pc, #296]	; (8001c58 <HAL_GPIO_Init+0x31c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x206>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_GPIO_Init+0x320>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x202>
 8001b3a:	2306      	movs	r3, #6
 8001b3c:	e00c      	b.n	8001b58 <HAL_GPIO_Init+0x21c>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e00a      	b.n	8001b58 <HAL_GPIO_Init+0x21c>
 8001b42:	2305      	movs	r3, #5
 8001b44:	e008      	b.n	8001b58 <HAL_GPIO_Init+0x21c>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x21c>
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e004      	b.n	8001b58 <HAL_GPIO_Init+0x21c>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x21c>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <HAL_GPIO_Init+0x21c>
 8001b56:	2300      	movs	r3, #0
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	f002 0203 	and.w	r2, r2, #3
 8001b5e:	0092      	lsls	r2, r2, #2
 8001b60:	4093      	lsls	r3, r2
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b68:	4935      	ldr	r1, [pc, #212]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_GPIO_Init+0x324>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9a:	4a31      	ldr	r2, [pc, #196]	; (8001c60 <HAL_GPIO_Init+0x324>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_GPIO_Init+0x324>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc4:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <HAL_GPIO_Init+0x324>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bca:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <HAL_GPIO_Init+0x324>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bee:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HAL_GPIO_Init+0x324>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_GPIO_Init+0x324>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c18:	4a11      	ldr	r2, [pc, #68]	; (8001c60 <HAL_GPIO_Init+0x324>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	f67f ae96 	bls.w	8001958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40020000 	.word	0x40020000
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40021400 	.word	0x40021400
 8001c5c:	40021800 	.word	0x40021800
 8001c60:	40013c00 	.word	0x40013c00

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	041a      	lsls	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	619a      	str	r2, [r3, #24]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e12b      	b.n	8001f02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe ff6a 	bl	8000b98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cfc:	f001 fc96 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 8001d00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a81      	ldr	r2, [pc, #516]	; (8001f0c <HAL_I2C_Init+0x274>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d807      	bhi.n	8001d1c <HAL_I2C_Init+0x84>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a80      	ldr	r2, [pc, #512]	; (8001f10 <HAL_I2C_Init+0x278>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e006      	b.n	8001d2a <HAL_I2C_Init+0x92>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4a7d      	ldr	r2, [pc, #500]	; (8001f14 <HAL_I2C_Init+0x27c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf94      	ite	ls
 8001d24:	2301      	movls	r3, #1
 8001d26:	2300      	movhi	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0e7      	b.n	8001f02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4a78      	ldr	r2, [pc, #480]	; (8001f18 <HAL_I2C_Init+0x280>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0c9b      	lsrs	r3, r3, #18
 8001d3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	4a6a      	ldr	r2, [pc, #424]	; (8001f0c <HAL_I2C_Init+0x274>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d802      	bhi.n	8001d6c <HAL_I2C_Init+0xd4>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	e009      	b.n	8001d80 <HAL_I2C_Init+0xe8>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	4a69      	ldr	r2, [pc, #420]	; (8001f1c <HAL_I2C_Init+0x284>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	3301      	adds	r3, #1
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	430b      	orrs	r3, r1
 8001d86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	495c      	ldr	r1, [pc, #368]	; (8001f0c <HAL_I2C_Init+0x274>)
 8001d9c:	428b      	cmp	r3, r1
 8001d9e:	d819      	bhi.n	8001dd4 <HAL_I2C_Init+0x13c>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1e59      	subs	r1, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dae:	1c59      	adds	r1, r3, #1
 8001db0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001db4:	400b      	ands	r3, r1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00a      	beq.n	8001dd0 <HAL_I2C_Init+0x138>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1e59      	subs	r1, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dce:	e051      	b.n	8001e74 <HAL_I2C_Init+0x1dc>
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	e04f      	b.n	8001e74 <HAL_I2C_Init+0x1dc>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d111      	bne.n	8001e00 <HAL_I2C_Init+0x168>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1e58      	subs	r0, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	440b      	add	r3, r1
 8001dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dee:	3301      	adds	r3, #1
 8001df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e012      	b.n	8001e26 <HAL_I2C_Init+0x18e>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e58      	subs	r0, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	0099      	lsls	r1, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Init+0x196>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e022      	b.n	8001e74 <HAL_I2C_Init+0x1dc>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10e      	bne.n	8001e54 <HAL_I2C_Init+0x1bc>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1e58      	subs	r0, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	440b      	add	r3, r1
 8001e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e52:	e00f      	b.n	8001e74 <HAL_I2C_Init+0x1dc>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	0099      	lsls	r1, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	6809      	ldr	r1, [r1, #0]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6911      	ldr	r1, [r2, #16]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68d2      	ldr	r2, [r2, #12]
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695a      	ldr	r2, [r3, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	000186a0 	.word	0x000186a0
 8001f10:	001e847f 	.word	0x001e847f
 8001f14:	003d08ff 	.word	0x003d08ff
 8001f18:	431bde83 	.word	0x431bde83
 8001f1c:	10624dd3 	.word	0x10624dd3

08001f20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	b08f      	sub	sp, #60	; 0x3c
 8001f24:	af0a      	add	r7, sp, #40	; 0x28
 8001f26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e116      	b.n	8002160 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d106      	bne.n	8001f52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f005 ff5b 	bl	8007e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2203      	movs	r2, #3
 8001f56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fc56 	bl	8004822 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	687e      	ldr	r6, [r7, #4]
 8001f7e:	466d      	mov	r5, sp
 8001f80:	f106 0410 	add.w	r4, r6, #16
 8001f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f90:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f94:	1d33      	adds	r3, r6, #4
 8001f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f98:	6838      	ldr	r0, [r7, #0]
 8001f9a:	f002 fb2d 	bl	80045f8 <USB_CoreInit>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0d7      	b.n	8002160 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fc44 	bl	8004844 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
 8001fc0:	e04a      	b.n	8002058 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	1a9b      	subs	r3, r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	333d      	adds	r3, #61	; 0x3d
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	333c      	adds	r3, #60	; 0x3c
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	b298      	uxth	r0, r3
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3342      	adds	r3, #66	; 0x42
 8001ffe:	4602      	mov	r2, r0
 8002000:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	333f      	adds	r3, #63	; 0x3f
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3344      	adds	r3, #68	; 0x44
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3348      	adds	r3, #72	; 0x48
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3350      	adds	r3, #80	; 0x50
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3301      	adds	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	429a      	cmp	r2, r3
 8002060:	d3af      	bcc.n	8001fc2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e044      	b.n	80020f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	3301      	adds	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d3b5      	bcc.n	8002068 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	687e      	ldr	r6, [r7, #4]
 8002104:	466d      	mov	r5, sp
 8002106:	f106 0410 	add.w	r4, r6, #16
 800210a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800210c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002112:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002116:	e885 0003 	stmia.w	r5, {r0, r1}
 800211a:	1d33      	adds	r3, r6, #4
 800211c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211e:	6838      	ldr	r0, [r7, #0]
 8002120:	f002 fbdc 	bl	80048dc <USB_DevInit>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e014      	b.n	8002160 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	2b01      	cmp	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f001 f868 	bl	8003224 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f003 fb6f 	bl	800583c <USB_DevDisconnect>

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002168 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_PCD_Start+0x1c>
 8002180:	2302      	movs	r3, #2
 8002182:	e020      	b.n	80021c6 <HAL_PCD_Start+0x5e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	2b01      	cmp	r3, #1
 8002192:	d109      	bne.n	80021a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002198:	2b01      	cmp	r3, #1
 800219a:	d005      	beq.n	80021a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f002 fb27 	bl	8004800 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 fb1f 	bl	80057fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_Stop+0x1c>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e026      	b.n	8002238 <HAL_PCD_Stop+0x6a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 fb13 	bl	8004822 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f003 fb1b 	bl	800583c <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2110      	movs	r1, #16
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fcc3 	bl	8004b98 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	2b01      	cmp	r3, #1
 8002218:	d109      	bne.n	800222e <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b08d      	sub	sp, #52	; 0x34
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 fba4 	bl	80059a4 <USB_GetMode>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 83ca 	bne.w	80029f8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f003 fb08 	bl	800587e <USB_ReadInterrupts>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 83c0 	beq.w	80029f6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 faff 	bl	800587e <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f002 0202 	and.w	r2, r2, #2
 8002298:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 faed 	bl	800587e <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d161      	bne.n	8002372 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0210 	bic.w	r2, r2, #16
 80022bc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 020f 	and.w	r2, r3, #15
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	3304      	adds	r3, #4
 80022dc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	0c5b      	lsrs	r3, r3, #17
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d124      	bne.n	8002334 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d035      	beq.n	8002362 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002304:	b29b      	uxth	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	6a38      	ldr	r0, [r7, #32]
 800230a:	f003 f924 	bl	8005556 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800231a:	441a      	add	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800232c:	441a      	add	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	619a      	str	r2, [r3, #24]
 8002332:	e016      	b.n	8002362 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	0c5b      	lsrs	r3, r3, #17
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	2b06      	cmp	r3, #6
 800233e:	d110      	bne.n	8002362 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002346:	2208      	movs	r2, #8
 8002348:	4619      	mov	r1, r3
 800234a:	6a38      	ldr	r0, [r7, #32]
 800234c:	f003 f903 	bl	8005556 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800235c:	441a      	add	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0210 	orr.w	r2, r2, #16
 8002370:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fa81 	bl	800587e <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002382:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002386:	d16e      	bne.n	8002466 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fa87 	bl	80058a4 <USB_ReadDevAllOutEpInterrupt>
 8002396:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002398:	e062      	b.n	8002460 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d057      	beq.n	8002454 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 faac 	bl	800590c <USB_ReadDevOutEPInterrupt>
 80023b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023cc:	461a      	mov	r2, r3
 80023ce:	2301      	movs	r3, #1
 80023d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fd7b 	bl	8002ed0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00c      	beq.n	80023fe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f0:	461a      	mov	r2, r3
 80023f2:	2308      	movs	r3, #8
 80023f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fe75 	bl	80030e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002414:	461a      	mov	r2, r3
 8002416:	2310      	movs	r3, #16
 8002418:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002430:	461a      	mov	r2, r3
 8002432:	2320      	movs	r3, #32
 8002434:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800244c:	461a      	mov	r2, r3
 800244e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002452:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	3301      	adds	r3, #1
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	2b00      	cmp	r3, #0
 8002464:	d199      	bne.n	800239a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fa07 	bl	800587e <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002476:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800247a:	f040 80c0 	bne.w	80025fe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fa28 	bl	80058d8 <USB_ReadDevAllInEpInterrupt>
 8002488:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800248e:	e0b2      	b.n	80025f6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80a7 	beq.w	80025ea <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fa4e 	bl	8005948 <USB_ReadDevInEPInterrupt>
 80024ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d057      	beq.n	8002568 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	2201      	movs	r2, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69f9      	ldr	r1, [r7, #28]
 80024d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024d8:	4013      	ands	r3, r2
 80024da:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024e8:	461a      	mov	r2, r3
 80024ea:	2301      	movs	r3, #1
 80024ec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d132      	bne.n	800255c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	3348      	adds	r3, #72	; 0x48
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4403      	add	r3, r0
 8002516:	3344      	adds	r3, #68	; 0x44
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4419      	add	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4403      	add	r3, r0
 800252a:	3348      	adds	r3, #72	; 0x48
 800252c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	d113      	bne.n	800255c <HAL_PCD_IRQHandler+0x31c>
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3350      	adds	r3, #80	; 0x50
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d108      	bne.n	800255c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002554:	461a      	mov	r2, r3
 8002556:	2101      	movs	r1, #1
 8002558:	f003 fa56 	bl	8005a08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f005 fcf3 	bl	8007f4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257e:	461a      	mov	r2, r3
 8002580:	2308      	movs	r3, #8
 8002582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	015a      	lsls	r2, r3, #5
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	4413      	add	r3, r2
 8002596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800259a:	461a      	mov	r2, r3
 800259c:	2310      	movs	r3, #16
 800259e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b6:	461a      	mov	r2, r3
 80025b8:	2340      	movs	r3, #64	; 0x40
 80025ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d2:	461a      	mov	r2, r3
 80025d4:	2302      	movs	r3, #2
 80025d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fbe6 	bl	8002db6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	3301      	adds	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f af49 	bne.w	8002490 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 f93b 	bl	800587e <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800260e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002612:	d122      	bne.n	800265a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800262e:	2b01      	cmp	r3, #1
 8002630:	d108      	bne.n	8002644 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800263a:	2100      	movs	r1, #0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fe15 	bl	800326c <HAL_PCDEx_LPM_Callback>
 8002642:	e002      	b.n	800264a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f005 fcef 	bl	8008028 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 f90d 	bl	800587e <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800266a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800266e:	d112      	bne.n	8002696 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d102      	bne.n	8002686 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f005 fcab 	bl	8007fdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002694:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f003 f8ef 	bl	800587e <USB_ReadInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026aa:	d121      	bne.n	80026f0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80026ba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d111      	bne.n	80026ea <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026e0:	2101      	movs	r1, #1
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fdc2 	bl	800326c <HAL_PCDEx_LPM_Callback>
 80026e8:	e002      	b.n	80026f0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f005 fc76 	bl	8007fdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 f8c2 	bl	800587e <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002704:	f040 80c7 	bne.w	8002896 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2110      	movs	r1, #16
 8002722:	4618      	mov	r0, r3
 8002724:	f002 fa38 	bl	8004b98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272c:	e056      	b.n	80027dc <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273a:	461a      	mov	r2, r3
 800273c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002740:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002752:	0151      	lsls	r1, r2, #5
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	440a      	add	r2, r1
 8002758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800275c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002760:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002772:	0151      	lsls	r1, r2, #5
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	440a      	add	r2, r1
 8002778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800277c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002780:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278e:	461a      	mov	r2, r3
 8002790:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002794:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a6:	0151      	lsls	r1, r2, #5
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	440a      	add	r2, r1
 80027ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c6:	0151      	lsls	r1, r2, #5
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	440a      	add	r2, r1
 80027cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	3301      	adds	r3, #1
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3a3      	bcc.n	800272e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002812:	f043 030b 	orr.w	r3, r3, #11
 8002816:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002828:	f043 030b 	orr.w	r3, r3, #11
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	e015      	b.n	800285c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002842:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002846:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002856:	f043 030b 	orr.w	r3, r3, #11
 800285a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800286e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002880:	461a      	mov	r2, r3
 8002882:	f003 f8c1 	bl	8005a08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002894:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f002 ffef 	bl	800587e <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028aa:	d124      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 f885 	bl	80059c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 f9c9 	bl	8004c52 <USB_GetDevSpeed>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	f000 fea2 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 80028d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	4620      	mov	r0, r4
 80028dc:	f001 feee 	bl	80046bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f005 fb5c 	bl	8007f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 ffbf 	bl	800587e <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d10a      	bne.n	8002920 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f005 fb39 	bl	8007f82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f002 0208 	and.w	r2, r2, #8
 800291e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f002 ffaa 	bl	800587e <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002934:	d10f      	bne.n	8002956 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f005 fb91 	bl	8008068 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f002 ff8f 	bl	800587e <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296a:	d10f      	bne.n	800298c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f005 fb64 	bl	8008044 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800298a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f002 ff74 	bl	800587e <USB_ReadInterrupts>
 8002996:	4603      	mov	r3, r0
 8002998:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d10a      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f005 fb72 	bl	800808c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 ff5e 	bl	800587e <USB_ReadInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d115      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f005 fb62 	bl	80080a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	e000      	b.n	80029f8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80029f6:	bf00      	nop
    }
  }
}
 80029f8:	3734      	adds	r7, #52	; 0x34
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}

080029fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_PCD_SetAddress+0x1a>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e013      	b.n	8002a40 <HAL_PCD_SetAddress+0x42>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 febc 	bl	80057ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	4608      	mov	r0, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	70fb      	strb	r3, [r7, #3]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	803b      	strh	r3, [r7, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da0f      	bge.n	8002a8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	f003 020f 	and.w	r2, r3, #15
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	3338      	adds	r3, #56	; 0x38
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	3304      	adds	r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	705a      	strb	r2, [r3, #1]
 8002a8c:	e00f      	b.n	8002aae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	f003 020f 	and.w	r2, r3, #15
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aba:	883a      	ldrh	r2, [r7, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	78ba      	ldrb	r2, [r7, #2]
 8002ac4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ad8:	78bb      	ldrb	r3, [r7, #2]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d102      	bne.n	8002ae4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_PCD_EP_Open+0xaa>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e00e      	b.n	8002b10 <HAL_PCD_EP_Open+0xc8>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f002 f8cb 	bl	8004c9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	460b      	mov	r3, r1
 8002b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	f003 020f 	and.w	r2, r3, #15
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3304      	adds	r3, #4
 8002b40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d102      	bne.n	8002b74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b74:	7afb      	ldrb	r3, [r7, #11]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	6979      	ldr	r1, [r7, #20]
 8002b8c:	f002 fb52 	bl	8005234 <USB_EP0StartXfer>
 8002b90:	e008      	b.n	8002ba4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6979      	ldr	r1, [r7, #20]
 8002ba0:	f002 f904 	bl	8004dac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bbe:	7afb      	ldrb	r3, [r7, #11]
 8002bc0:	f003 020f 	and.w	r2, r3, #15
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	3338      	adds	r3, #56	; 0x38
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2201      	movs	r2, #1
 8002bec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c08:	7afb      	ldrb	r3, [r7, #11]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	f002 fb08 	bl	8005234 <USB_EP0StartXfer>
 8002c24:	e008      	b.n	8002c38 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	6979      	ldr	r1, [r7, #20]
 8002c34:	f002 f8ba 	bl	8004dac <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 020f 	and.w	r2, r3, #15
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d901      	bls.n	8002c60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e050      	b.n	8002d02 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	da0f      	bge.n	8002c88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	3338      	adds	r3, #56	; 0x38
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2201      	movs	r2, #1
 8002c84:	705a      	strb	r2, [r3, #1]
 8002c86:	e00d      	b.n	8002ca4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_EP_SetStall+0x82>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e01e      	b.n	8002d02 <HAL_PCD_EP_SetStall+0xc0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fc97 	bl	8005606 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	b2d9      	uxtb	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f002 fe88 	bl	8005a08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d901      	bls.n	8002d28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e042      	b.n	8002dae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da0f      	bge.n	8002d50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	3338      	adds	r3, #56	; 0x38
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	705a      	strb	r2, [r3, #1]
 8002d4e:	e00f      	b.n	8002d70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 020f 	and.w	r2, r3, #15
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_EP_ClrStall+0x86>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e00e      	b.n	8002dae <HAL_PCD_EP_ClrStall+0xa4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68f9      	ldr	r1, [r7, #12]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fc9f 	bl	80056e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b08a      	sub	sp, #40	; 0x28
 8002dba:	af02      	add	r7, sp, #8
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	3338      	adds	r3, #56	; 0x38
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3304      	adds	r3, #4
 8002ddc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d901      	bls.n	8002dee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e06c      	b.n	8002ec8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d902      	bls.n	8002e0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3303      	adds	r3, #3
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e12:	e02b      	b.n	8002e6c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d902      	bls.n	8002e30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	3303      	adds	r3, #3
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68d9      	ldr	r1, [r3, #12]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f002 fb43 	bl	80054da <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	441a      	add	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	441a      	add	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d809      	bhi.n	8002e96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d203      	bcs.n	8002e96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1be      	bne.n	8002e14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d811      	bhi.n	8002ec6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	6939      	ldr	r1, [r7, #16]
 8002ebe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	333c      	adds	r3, #60	; 0x3c
 8002ee8:	3304      	adds	r3, #4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	f040 80a0 	bne.w	8003048 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d015      	beq.n	8002f3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a72      	ldr	r2, [pc, #456]	; (80030e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f240 80dd 	bls.w	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80d7 	beq.w	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f34:	461a      	mov	r2, r3
 8002f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3a:	6093      	str	r3, [r2, #8]
 8002f3c:	e0cb      	b.n	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f54:	461a      	mov	r2, r3
 8002f56:	2320      	movs	r3, #32
 8002f58:	6093      	str	r3, [r2, #8]
 8002f5a:	e0bc      	b.n	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 80b7 	bne.w	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4a5d      	ldr	r2, [pc, #372]	; (80030e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d90f      	bls.n	8002f90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	461a      	mov	r2, r3
 8002f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	e0a2      	b.n	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fa2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	0159      	lsls	r1, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	440b      	add	r3, r1
 8002fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002fb6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4403      	add	r3, r0
 8002fc6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4403      	add	r3, r0
 8002fee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4419      	add	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4403      	add	r3, r0
 8003004:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003008:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d114      	bne.n	800303a <PCD_EP_OutXfrComplete_int+0x16a>
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d108      	bne.n	800303a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003032:	461a      	mov	r2, r3
 8003034:	2101      	movs	r1, #1
 8003036:	f002 fce7 	bl	8005a08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4619      	mov	r1, r3
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f004 ff69 	bl	8007f18 <HAL_PCD_DataOutStageCallback>
 8003046:	e046      	b.n	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d124      	bne.n	800309a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003066:	461a      	mov	r2, r3
 8003068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306c:	6093      	str	r3, [r2, #8]
 800306e:	e032      	b.n	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	461a      	mov	r2, r3
 8003088:	2320      	movs	r3, #32
 800308a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f004 ff40 	bl	8007f18 <HAL_PCD_DataOutStageCallback>
 8003098:	e01d      	b.n	80030d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d114      	bne.n	80030ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d108      	bne.n	80030ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030c2:	461a      	mov	r2, r3
 80030c4:	2100      	movs	r1, #0
 80030c6:	f002 fc9f 	bl	8005a08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	4619      	mov	r1, r3
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f004 ff21 	bl	8007f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	4f54300a 	.word	0x4f54300a
 80030e4:	4f54310a 	.word	0x4f54310a

080030e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	333c      	adds	r3, #60	; 0x3c
 8003100:	3304      	adds	r3, #4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <PCD_EP_OutSetupPacket_int+0x88>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d90e      	bls.n	800313c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003134:	461a      	mov	r2, r3
 8003136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f004 fed9 	bl	8007ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <PCD_EP_OutSetupPacket_int+0x88>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d90c      	bls.n	8003164 <PCD_EP_OutSetupPacket_int+0x7c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d108      	bne.n	8003164 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800315c:	461a      	mov	r2, r3
 800315e:	2101      	movs	r1, #1
 8003160:	f002 fc52 	bl	8005a08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	4f54300a 	.word	0x4f54300a

08003174 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
 8003180:	4613      	mov	r3, r2
 8003182:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d107      	bne.n	80031a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003192:	883b      	ldrh	r3, [r7, #0]
 8003194:	0419      	lsls	r1, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	430a      	orrs	r2, r1
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
 80031a0:	e028      	b.n	80031f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	4413      	add	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e00d      	b.n	80031d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	3340      	adds	r3, #64	; 0x40
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4413      	add	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	3301      	adds	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	429a      	cmp	r2, r3
 80031da:	d3ec      	bcc.n	80031b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031dc:	883b      	ldrh	r3, [r7, #0]
 80031de:	0418      	lsls	r0, r3, #16
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	4302      	orrs	r2, r0
 80031ec:	3340      	adds	r3, #64	; 0x40
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003256:	f043 0303 	orr.w	r3, r3, #3
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0cc      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b68      	ldr	r3, [pc, #416]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d90c      	bls.n	80032c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b65      	ldr	r3, [pc, #404]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b63      	ldr	r3, [pc, #396]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0b8      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d020      	beq.n	800330e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d8:	4b59      	ldr	r3, [pc, #356]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a52      	ldr	r2, [pc, #328]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	494d      	ldr	r1, [pc, #308]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d044      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b47      	ldr	r3, [pc, #284]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d119      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d003      	beq.n	8003342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	2b03      	cmp	r3, #3
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3b      	ldr	r3, [pc, #236]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e067      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4934      	ldr	r1, [pc, #208]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003374:	f7fd fe32 	bl	8000fdc <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fd fe2e 	bl	8000fdc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e04f      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b25      	ldr	r3, [pc, #148]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d20c      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b22      	ldr	r3, [pc, #136]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e032      	b.n	8003432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b19      	ldr	r3, [pc, #100]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4916      	ldr	r1, [pc, #88]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	490e      	ldr	r1, [pc, #56]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800340a:	f000 f821 	bl	8003450 <HAL_RCC_GetSysClockFreq>
 800340e:	4602      	mov	r2, r0
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	490a      	ldr	r1, [pc, #40]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	5ccb      	ldrb	r3, [r1, r3]
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fd92 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00
 8003440:	40023800 	.word	0x40023800
 8003444:	0800855c 	.word	0x0800855c
 8003448:	20000000 	.word	0x20000000
 800344c:	20000004 	.word	0x20000004

08003450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003450:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	2300      	movs	r3, #0
 8003462:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003468:	4b67      	ldr	r3, [pc, #412]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d00d      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x40>
 8003474:	2b08      	cmp	r3, #8
 8003476:	f200 80bd 	bhi.w	80035f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x34>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d003      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x3a>
 8003482:	e0b7      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003484:	4b61      	ldr	r3, [pc, #388]	; (800360c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003486:	60bb      	str	r3, [r7, #8]
       break;
 8003488:	e0b7      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800348a:	4b61      	ldr	r3, [pc, #388]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800348c:	60bb      	str	r3, [r7, #8]
      break;
 800348e:	e0b4      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003490:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003498:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800349a:	4b5b      	ldr	r3, [pc, #364]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d04d      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a6:	4b58      	ldr	r3, [pc, #352]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	461a      	mov	r2, r3
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	ea02 0800 	and.w	r8, r2, r0
 80034be:	ea03 0901 	and.w	r9, r3, r1
 80034c2:	4640      	mov	r0, r8
 80034c4:	4649      	mov	r1, r9
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	014b      	lsls	r3, r1, #5
 80034d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034d4:	0142      	lsls	r2, r0, #5
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	ebb0 0008 	subs.w	r0, r0, r8
 80034de:	eb61 0109 	sbc.w	r1, r1, r9
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	018b      	lsls	r3, r1, #6
 80034ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034f0:	0182      	lsls	r2, r0, #6
 80034f2:	1a12      	subs	r2, r2, r0
 80034f4:	eb63 0301 	sbc.w	r3, r3, r1
 80034f8:	f04f 0000 	mov.w	r0, #0
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	00d9      	lsls	r1, r3, #3
 8003502:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003506:	00d0      	lsls	r0, r2, #3
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	eb12 0208 	adds.w	r2, r2, r8
 8003510:	eb43 0309 	adc.w	r3, r3, r9
 8003514:	f04f 0000 	mov.w	r0, #0
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	0259      	lsls	r1, r3, #9
 800351e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003522:	0250      	lsls	r0, r2, #9
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	461a      	mov	r2, r3
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	f7fc fe70 	bl	8000218 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e04a      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	461a      	mov	r2, r3
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	ea02 0400 	and.w	r4, r2, r0
 800355a:	ea03 0501 	and.w	r5, r3, r1
 800355e:	4620      	mov	r0, r4
 8003560:	4629      	mov	r1, r5
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	014b      	lsls	r3, r1, #5
 800356c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003570:	0142      	lsls	r2, r0, #5
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	1b00      	subs	r0, r0, r4
 8003578:	eb61 0105 	sbc.w	r1, r1, r5
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	018b      	lsls	r3, r1, #6
 8003586:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800358a:	0182      	lsls	r2, r0, #6
 800358c:	1a12      	subs	r2, r2, r0
 800358e:	eb63 0301 	sbc.w	r3, r3, r1
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	00d9      	lsls	r1, r3, #3
 800359c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035a0:	00d0      	lsls	r0, r2, #3
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	1912      	adds	r2, r2, r4
 80035a8:	eb45 0303 	adc.w	r3, r5, r3
 80035ac:	f04f 0000 	mov.w	r0, #0
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	0299      	lsls	r1, r3, #10
 80035b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035ba:	0290      	lsls	r0, r2, #10
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f7fc fe24 	bl	8000218 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4613      	mov	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	3301      	adds	r3, #1
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	60bb      	str	r3, [r7, #8]
      break;
 80035f2:	e002      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035f6:	60bb      	str	r3, [r7, #8]
      break;
 80035f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fa:	68bb      	ldr	r3, [r7, #8]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	00f42400 	.word	0x00f42400
 8003610:	007a1200 	.word	0x007a1200

08003614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_RCC_GetHCLKFreq+0x14>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003630:	f7ff fff0 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0a9b      	lsrs	r3, r3, #10
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	0800856c 	.word	0x0800856c

08003654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003658:	f7ff ffdc 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0b5b      	lsrs	r3, r3, #13
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	0800856c 	.word	0x0800856c

0800367c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80036a0:	4b7a      	ldr	r3, [pc, #488]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	4977      	ldr	r1, [pc, #476]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80036be:	2301      	movs	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80036ce:	4b6f      	ldr	r3, [pc, #444]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	496b      	ldr	r1, [pc, #428]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80036ec:	2301      	movs	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d022      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80036fc:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80036fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370a:	4960      	ldr	r1, [pc, #384]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800371a:	2301      	movs	r3, #1
 800371c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003726:	d10c      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8003728:	4b58      	ldr	r3, [pc, #352]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800372a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	3b01      	subs	r3, #1
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	4954      	ldr	r1, [pc, #336]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d022      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800374e:	4b4f      	ldr	r3, [pc, #316]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003754:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375c:	494b      	ldr	r1, [pc, #300]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800376c:	2301      	movs	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003778:	d10c      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800377c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003780:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	3b01      	subs	r3, #1
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	493f      	ldr	r1, [pc, #252]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 808a 	beq.w	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a38      	ldr	r2, [pc, #224]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a33      	ldr	r2, [pc, #204]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ca:	f7fd fc07 	bl	8000fdc <HAL_GetTick>
 80037ce:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fd fc03 	bl	8000fdc <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e1d1      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f0:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f8:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02f      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	429a      	cmp	r2, r3
 800380c:	d028      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003816:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003824:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800382a:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d114      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003836:	f7fd fbd1 	bl	8000fdc <HAL_GetTick>
 800383a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	e00a      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fd fbcd 	bl	8000fdc <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	; 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e199      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ee      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386c:	d114      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800387e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003882:	4902      	ldr	r1, [pc, #8]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
 8003888:	e00c      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	40007000 	.word	0x40007000
 8003894:	42470e40 	.word	0x42470e40
 8003898:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a88      	ldr	r2, [pc, #544]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800389e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038a2:	6093      	str	r3, [r2, #8]
 80038a4:	4b86      	ldr	r3, [pc, #536]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	4983      	ldr	r1, [pc, #524]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80038c8:	4b7e      	ldr	r3, [pc, #504]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80038ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80038d8:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	4976      	ldr	r1, [pc, #472]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d011      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038fa:	4b71      	ldr	r3, [pc, #452]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80038fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003900:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	496d      	ldr	r1, [pc, #436]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800391a:	2301      	movs	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003930:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	4961      	ldr	r1, [pc, #388]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d004      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	f040 80c6 	bne.w	8003adc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003950:	4b5d      	ldr	r3, [pc, #372]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003956:	f7fd fb41 	bl	8000fdc <HAL_GetTick>
 800395a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800395e:	f7fd fb3d 	bl	8000fdc <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e10b      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003970:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 800397c:	4a53      	ldr	r2, [pc, #332]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003982:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d023      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d019      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c0:	d00e      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d019      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d115      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039de:	d110      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	019b      	lsls	r3, r3, #6
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	4931      	ldr	r1, [pc, #196]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d026      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d122      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a2a:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a30:	0e1b      	lsrs	r3, r3, #24
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	431a      	orrs	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	071b      	lsls	r3, r3, #28
 8003a50:	491b      	ldr	r1, [pc, #108]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5e:	f023 021f 	bic.w	r2, r3, #31
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	4915      	ldr	r1, [pc, #84]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d010      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	019b      	lsls	r3, r3, #6
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	490a      	ldr	r1, [pc, #40]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa4:	f7fd fa9a 	bl	8000fdc <HAL_GetTick>
 8003aa8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aaa:	e011      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003aac:	f7fd fa96 	bl	8000fdc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d90a      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e064      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	424711e0 	.word	0x424711e0
 8003ac8:	42470068 	.word	0x42470068
 8003acc:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ad0:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0e7      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae8:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	4926      	ldr	r1, [pc, #152]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b10:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	491d      	ldr	r1, [pc, #116]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003b2c:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	4915      	ldr	r1, [pc, #84]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b54:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	490c      	ldr	r1, [pc, #48]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4904      	ldr	r1, [pc, #16]	; (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e270      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bb2:	4ba3      	ldr	r3, [pc, #652]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b9d      	ldr	r3, [pc, #628]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e24b      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b91      	ldr	r3, [pc, #580]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b8b      	ldr	r3, [pc, #556]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a8a      	ldr	r2, [pc, #552]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a87      	ldr	r2, [pc, #540]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a83      	ldr	r2, [pc, #524]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b81      	ldr	r3, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a80      	ldr	r2, [pc, #512]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fd f9c6 	bl	8000fdc <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd f9c2 	bl	8000fdc <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e210      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd f9b2 	bl	8000fdc <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd f9ae 	bl	8000fdc <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1fc      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b6c      	ldr	r3, [pc, #432]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003caa:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1d0      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4952      	ldr	r1, [pc, #328]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd f967 	bl	8000fdc <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd f963 	bl	8000fdc <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1b1      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4940      	ldr	r1, [pc, #256]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <HAL_RCC_OscConfig+0x2b0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd f946 	bl	8000fdc <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd f942 	bl	8000fdc <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e190      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d030      	beq.n	8003de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd f926 	bl	8000fdc <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd f922 	bl	8000fdc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e170      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e015      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_OscConfig+0x2b4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd f90f 	bl	8000fdc <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd f90b 	bl	8000fdc <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e159      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f0      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a0 	beq.w	8003f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a07      	ldr	r2, [pc, #28]	; (8003e4c <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e36:	f7fd f8d1 	bl	8000fdc <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	e011      	b.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470000 	.word	0x42470000
 8003e48:	42470e80 	.word	0x42470e80
 8003e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fd f8c4 	bl	8000fdc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e112      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e62:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <HAL_RCC_OscConfig+0x4fc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d106      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2f0>
 8003e76:	4b87      	ldr	r3, [pc, #540]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a86      	ldr	r2, [pc, #536]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e01c      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x312>
 8003e8c:	4b81      	ldr	r3, [pc, #516]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a80      	ldr	r2, [pc, #512]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	4b7e      	ldr	r3, [pc, #504]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a7d      	ldr	r2, [pc, #500]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x32a>
 8003ea6:	4b7b      	ldr	r3, [pc, #492]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a7a      	ldr	r2, [pc, #488]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b78      	ldr	r3, [pc, #480]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a77      	ldr	r2, [pc, #476]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd f889 	bl	8000fdc <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd f885 	bl	8000fdc <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0d1      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	4b6b      	ldr	r3, [pc, #428]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ee      	beq.n	8003ece <HAL_RCC_OscConfig+0x33a>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fd f873 	bl	8000fdc <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd f86f 	bl	8000fdc <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0bb      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f10:	4b60      	ldr	r3, [pc, #384]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f22:	4b5c      	ldr	r3, [pc, #368]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a5b      	ldr	r2, [pc, #364]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80a7 	beq.w	8004086 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f38:	4b56      	ldr	r3, [pc, #344]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d060      	beq.n	8004006 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d145      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b52      	ldr	r3, [pc, #328]	; (8004098 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fd f843 	bl	8000fdc <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fd f83f 	bl	8000fdc <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e08d      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6c:	4b49      	ldr	r3, [pc, #292]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	019b      	lsls	r3, r3, #6
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	071b      	lsls	r3, r3, #28
 8003fa4:	493b      	ldr	r1, [pc, #236]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_OscConfig+0x504>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd f814 	bl	8000fdc <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd f810 	bl	8000fdc <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e05e      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x424>
 8003fd6:	e056      	b.n	8004086 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd8:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <HAL_RCC_OscConfig+0x504>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fc fffd 	bl	8000fdc <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fc fff9 	bl	8000fdc <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e047      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x452>
 8004004:	e03f      	b.n	8004086 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e03a      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_OscConfig+0x500>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d030      	beq.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d129      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d122      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004048:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800404a:	4293      	cmp	r3, r2
 800404c:	d119      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	3b01      	subs	r3, #1
 800405c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d10f      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40007000 	.word	0x40007000
 8004094:	40023800 	.word	0x40023800
 8004098:	42470060 	.word	0x42470060

0800409c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07b      	b.n	80041a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040be:	d009      	beq.n	80040d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
 80040c6:	e005      	b.n	80040d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fc fd9a 	bl	8000c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800410a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004158:	ea42 0103 	orr.w	r1, r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	0c1b      	lsrs	r3, r3, #16
 8004172:	f003 0104 	and.w	r1, r3, #4
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f003 0210 	and.w	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e03f      	b.n	8004240 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fc fde3 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	; 0x24
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f828 	bl	8004248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004206:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004216:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004226:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800424c:	b09f      	sub	sp, #124	; 0x7c
 800424e:	af00      	add	r7, sp, #0
 8004250:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425e:	68d9      	ldr	r1, [r3, #12]
 8004260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	ea40 0301 	orr.w	r3, r0, r1
 8004268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800426a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	431a      	orrs	r2, r3
 8004274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	431a      	orrs	r2, r3
 800427a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4313      	orrs	r3, r2
 8004280:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800428c:	f021 010c 	bic.w	r1, r1, #12
 8004290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004296:	430b      	orrs	r3, r1
 8004298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800429a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a6:	6999      	ldr	r1, [r3, #24]
 80042a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	ea40 0301 	orr.w	r3, r0, r1
 80042b0:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80042b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b6a      	ldr	r3, [pc, #424]	; (8004460 <UART_SetConfig+0x218>)
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d00e      	beq.n	80042da <UART_SetConfig+0x92>
 80042bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b68      	ldr	r3, [pc, #416]	; (8004464 <UART_SetConfig+0x21c>)
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d009      	beq.n	80042da <UART_SetConfig+0x92>
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b67      	ldr	r3, [pc, #412]	; (8004468 <UART_SetConfig+0x220>)
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d004      	beq.n	80042da <UART_SetConfig+0x92>
 80042d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b65      	ldr	r3, [pc, #404]	; (800446c <UART_SetConfig+0x224>)
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d103      	bne.n	80042e2 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042da:	f7ff f9bb 	bl	8003654 <HAL_RCC_GetPCLK2Freq>
 80042de:	6778      	str	r0, [r7, #116]	; 0x74
 80042e0:	e002      	b.n	80042e8 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042e2:	f7ff f9a3 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80042e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f0:	f040 80c0 	bne.w	8004474 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f6:	461c      	mov	r4, r3
 80042f8:	f04f 0500 	mov.w	r5, #0
 80042fc:	4622      	mov	r2, r4
 80042fe:	462b      	mov	r3, r5
 8004300:	1891      	adds	r1, r2, r2
 8004302:	6439      	str	r1, [r7, #64]	; 0x40
 8004304:	415b      	adcs	r3, r3
 8004306:	647b      	str	r3, [r7, #68]	; 0x44
 8004308:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800430c:	1912      	adds	r2, r2, r4
 800430e:	eb45 0303 	adc.w	r3, r5, r3
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	00d9      	lsls	r1, r3, #3
 800431c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004320:	00d0      	lsls	r0, r2, #3
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	1911      	adds	r1, r2, r4
 8004328:	6639      	str	r1, [r7, #96]	; 0x60
 800432a:	416b      	adcs	r3, r5
 800432c:	667b      	str	r3, [r7, #100]	; 0x64
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	461a      	mov	r2, r3
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	1891      	adds	r1, r2, r2
 800433a:	63b9      	str	r1, [r7, #56]	; 0x38
 800433c:	415b      	adcs	r3, r3
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004344:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004348:	f7fb ff66 	bl	8000218 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b47      	ldr	r3, [pc, #284]	; (8004470 <UART_SetConfig+0x228>)
 8004352:	fba3 2302 	umull	r2, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	011e      	lsls	r6, r3, #4
 800435a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435c:	461c      	mov	r4, r3
 800435e:	f04f 0500 	mov.w	r5, #0
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	1891      	adds	r1, r2, r2
 8004368:	6339      	str	r1, [r7, #48]	; 0x30
 800436a:	415b      	adcs	r3, r3
 800436c:	637b      	str	r3, [r7, #52]	; 0x34
 800436e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004372:	1912      	adds	r2, r2, r4
 8004374:	eb45 0303 	adc.w	r3, r5, r3
 8004378:	f04f 0000 	mov.w	r0, #0
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	00d9      	lsls	r1, r3, #3
 8004382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004386:	00d0      	lsls	r0, r2, #3
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	1911      	adds	r1, r2, r4
 800438e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004390:	416b      	adcs	r3, r5
 8004392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	461a      	mov	r2, r3
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	1891      	adds	r1, r2, r2
 80043a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80043a2:	415b      	adcs	r3, r3
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80043ae:	f7fb ff33 	bl	8000218 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4b2e      	ldr	r3, [pc, #184]	; (8004470 <UART_SetConfig+0x228>)
 80043b8:	fba3 1302 	umull	r1, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	2164      	movs	r1, #100	; 0x64
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	3332      	adds	r3, #50	; 0x32
 80043ca:	4a29      	ldr	r2, [pc, #164]	; (8004470 <UART_SetConfig+0x228>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043d8:	441e      	add	r6, r3
 80043da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043dc:	4618      	mov	r0, r3
 80043de:	f04f 0100 	mov.w	r1, #0
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	1894      	adds	r4, r2, r2
 80043e8:	623c      	str	r4, [r7, #32]
 80043ea:	415b      	adcs	r3, r3
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
 80043ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043f2:	1812      	adds	r2, r2, r0
 80043f4:	eb41 0303 	adc.w	r3, r1, r3
 80043f8:	f04f 0400 	mov.w	r4, #0
 80043fc:	f04f 0500 	mov.w	r5, #0
 8004400:	00dd      	lsls	r5, r3, #3
 8004402:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004406:	00d4      	lsls	r4, r2, #3
 8004408:	4622      	mov	r2, r4
 800440a:	462b      	mov	r3, r5
 800440c:	1814      	adds	r4, r2, r0
 800440e:	653c      	str	r4, [r7, #80]	; 0x50
 8004410:	414b      	adcs	r3, r1
 8004412:	657b      	str	r3, [r7, #84]	; 0x54
 8004414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	461a      	mov	r2, r3
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	1891      	adds	r1, r2, r2
 8004420:	61b9      	str	r1, [r7, #24]
 8004422:	415b      	adcs	r3, r3
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800442e:	f7fb fef3 	bl	8000218 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <UART_SetConfig+0x228>)
 8004438:	fba3 1302 	umull	r1, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	2164      	movs	r1, #100	; 0x64
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	3332      	adds	r3, #50	; 0x32
 800444a:	4a09      	ldr	r2, [pc, #36]	; (8004470 <UART_SetConfig+0x228>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	f003 0207 	and.w	r2, r3, #7
 8004456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4432      	add	r2, r6
 800445c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800445e:	e0c3      	b.n	80045e8 <UART_SetConfig+0x3a0>
 8004460:	40011000 	.word	0x40011000
 8004464:	40011400 	.word	0x40011400
 8004468:	40011800 	.word	0x40011800
 800446c:	40011c00 	.word	0x40011c00
 8004470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004476:	461c      	mov	r4, r3
 8004478:	f04f 0500 	mov.w	r5, #0
 800447c:	4622      	mov	r2, r4
 800447e:	462b      	mov	r3, r5
 8004480:	1891      	adds	r1, r2, r2
 8004482:	6139      	str	r1, [r7, #16]
 8004484:	415b      	adcs	r3, r3
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800448c:	1912      	adds	r2, r2, r4
 800448e:	eb45 0303 	adc.w	r3, r5, r3
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f04f 0100 	mov.w	r1, #0
 800449a:	00d9      	lsls	r1, r3, #3
 800449c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044a0:	00d0      	lsls	r0, r2, #3
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	eb12 0804 	adds.w	r8, r2, r4
 80044aa:	eb43 0905 	adc.w	r9, r3, r5
 80044ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	008b      	lsls	r3, r1, #2
 80044c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044c6:	0082      	lsls	r2, r0, #2
 80044c8:	4640      	mov	r0, r8
 80044ca:	4649      	mov	r1, r9
 80044cc:	f7fb fea4 	bl	8000218 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <UART_SetConfig+0x3ac>)
 80044d6:	fba3 2302 	umull	r2, r3, r3, r2
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	011e      	lsls	r6, r3, #4
 80044de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e0:	4618      	mov	r0, r3
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	1894      	adds	r4, r2, r2
 80044ec:	60bc      	str	r4, [r7, #8]
 80044ee:	415b      	adcs	r3, r3
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f6:	1812      	adds	r2, r2, r0
 80044f8:	eb41 0303 	adc.w	r3, r1, r3
 80044fc:	f04f 0400 	mov.w	r4, #0
 8004500:	f04f 0500 	mov.w	r5, #0
 8004504:	00dd      	lsls	r5, r3, #3
 8004506:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800450a:	00d4      	lsls	r4, r2, #3
 800450c:	4622      	mov	r2, r4
 800450e:	462b      	mov	r3, r5
 8004510:	1814      	adds	r4, r2, r0
 8004512:	64bc      	str	r4, [r7, #72]	; 0x48
 8004514:	414b      	adcs	r3, r1
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4618      	mov	r0, r3
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	008b      	lsls	r3, r1, #2
 800452c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004530:	0082      	lsls	r2, r0, #2
 8004532:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004536:	f7fb fe6f 	bl	8000218 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4b2d      	ldr	r3, [pc, #180]	; (80045f4 <UART_SetConfig+0x3ac>)
 8004540:	fba3 1302 	umull	r1, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	2164      	movs	r1, #100	; 0x64
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	3332      	adds	r3, #50	; 0x32
 8004552:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <UART_SetConfig+0x3ac>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455e:	441e      	add	r6, r3
 8004560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004562:	4618      	mov	r0, r3
 8004564:	f04f 0100 	mov.w	r1, #0
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	1894      	adds	r4, r2, r2
 800456e:	603c      	str	r4, [r7, #0]
 8004570:	415b      	adcs	r3, r3
 8004572:	607b      	str	r3, [r7, #4]
 8004574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004578:	1812      	adds	r2, r2, r0
 800457a:	eb41 0303 	adc.w	r3, r1, r3
 800457e:	f04f 0400 	mov.w	r4, #0
 8004582:	f04f 0500 	mov.w	r5, #0
 8004586:	00dd      	lsls	r5, r3, #3
 8004588:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800458c:	00d4      	lsls	r4, r2, #3
 800458e:	4622      	mov	r2, r4
 8004590:	462b      	mov	r3, r5
 8004592:	eb12 0a00 	adds.w	sl, r2, r0
 8004596:	eb43 0b01 	adc.w	fp, r3, r1
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045b2:	0082      	lsls	r2, r0, #2
 80045b4:	4650      	mov	r0, sl
 80045b6:	4659      	mov	r1, fp
 80045b8:	f7fb fe2e 	bl	8000218 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <UART_SetConfig+0x3ac>)
 80045c2:	fba3 1302 	umull	r1, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2164      	movs	r1, #100	; 0x64
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	3332      	adds	r3, #50	; 0x32
 80045d4:	4a07      	ldr	r2, [pc, #28]	; (80045f4 <UART_SetConfig+0x3ac>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	f003 020f 	and.w	r2, r3, #15
 80045e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4432      	add	r2, r6
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	377c      	adds	r7, #124	; 0x7c
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f2:	bf00      	nop
 80045f4:	51eb851f 	.word	0x51eb851f

080045f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045f8:	b084      	sub	sp, #16
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	f107 001c 	add.w	r0, r7, #28
 8004606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	2b01      	cmp	r3, #1
 800460e:	d122      	bne.n	8004656 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d105      	bne.n	800464a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 fa3a 	bl	8005ac4 <USB_CoreReset>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	e01a      	b.n	800468c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f001 fa2e 	bl	8005ac4 <USB_CoreReset>
 8004668:	4603      	mov	r3, r0
 800466a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800466c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
 800467e:	e005      	b.n	800468c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	2b01      	cmp	r3, #1
 8004690:	d10b      	bne.n	80046aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f043 0206 	orr.w	r2, r3, #6
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b6:	b004      	add	sp, #16
 80046b8:	4770      	bx	lr
	...

080046bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	4613      	mov	r3, r2
 80046c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d165      	bne.n	800479c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4a41      	ldr	r2, [pc, #260]	; (80047d8 <USB_SetTurnaroundTime+0x11c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d906      	bls.n	80046e6 <USB_SetTurnaroundTime+0x2a>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4a40      	ldr	r2, [pc, #256]	; (80047dc <USB_SetTurnaroundTime+0x120>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d202      	bcs.n	80046e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046e0:	230f      	movs	r3, #15
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e062      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <USB_SetTurnaroundTime+0x120>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d306      	bcc.n	80046fc <USB_SetTurnaroundTime+0x40>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <USB_SetTurnaroundTime+0x124>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d202      	bcs.n	80046fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80046f6:	230e      	movs	r3, #14
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e057      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a38      	ldr	r2, [pc, #224]	; (80047e0 <USB_SetTurnaroundTime+0x124>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d306      	bcc.n	8004712 <USB_SetTurnaroundTime+0x56>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4a37      	ldr	r2, [pc, #220]	; (80047e4 <USB_SetTurnaroundTime+0x128>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d202      	bcs.n	8004712 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800470c:	230d      	movs	r3, #13
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e04c      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4a33      	ldr	r2, [pc, #204]	; (80047e4 <USB_SetTurnaroundTime+0x128>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d306      	bcc.n	8004728 <USB_SetTurnaroundTime+0x6c>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4a32      	ldr	r2, [pc, #200]	; (80047e8 <USB_SetTurnaroundTime+0x12c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d802      	bhi.n	8004728 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004722:	230c      	movs	r3, #12
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e041      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a2f      	ldr	r2, [pc, #188]	; (80047e8 <USB_SetTurnaroundTime+0x12c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d906      	bls.n	800473e <USB_SetTurnaroundTime+0x82>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4a2e      	ldr	r2, [pc, #184]	; (80047ec <USB_SetTurnaroundTime+0x130>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d802      	bhi.n	800473e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004738:	230b      	movs	r3, #11
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e036      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <USB_SetTurnaroundTime+0x130>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d906      	bls.n	8004754 <USB_SetTurnaroundTime+0x98>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <USB_SetTurnaroundTime+0x134>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d802      	bhi.n	8004754 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800474e:	230a      	movs	r3, #10
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e02b      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <USB_SetTurnaroundTime+0x134>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d906      	bls.n	800476a <USB_SetTurnaroundTime+0xae>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4a25      	ldr	r2, [pc, #148]	; (80047f4 <USB_SetTurnaroundTime+0x138>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d202      	bcs.n	800476a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004764:	2309      	movs	r3, #9
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	e020      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <USB_SetTurnaroundTime+0x138>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d306      	bcc.n	8004780 <USB_SetTurnaroundTime+0xc4>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4a20      	ldr	r2, [pc, #128]	; (80047f8 <USB_SetTurnaroundTime+0x13c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d802      	bhi.n	8004780 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800477a:	2308      	movs	r3, #8
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e015      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <USB_SetTurnaroundTime+0x13c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d906      	bls.n	8004796 <USB_SetTurnaroundTime+0xda>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <USB_SetTurnaroundTime+0x140>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d202      	bcs.n	8004796 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004790:	2307      	movs	r3, #7
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e00a      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004796:	2306      	movs	r3, #6
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e007      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047a2:	2309      	movs	r3, #9
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e001      	b.n	80047ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047a8:	2309      	movs	r3, #9
 80047aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	029b      	lsls	r3, r3, #10
 80047c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	371c      	adds	r7, #28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	00d8acbf 	.word	0x00d8acbf
 80047dc:	00e4e1c0 	.word	0x00e4e1c0
 80047e0:	00f42400 	.word	0x00f42400
 80047e4:	01067380 	.word	0x01067380
 80047e8:	011a499f 	.word	0x011a499f
 80047ec:	01312cff 	.word	0x01312cff
 80047f0:	014ca43f 	.word	0x014ca43f
 80047f4:	016e3600 	.word	0x016e3600
 80047f8:	01a6ab1f 	.word	0x01a6ab1f
 80047fc:	01e84800 	.word	0x01e84800

08004800 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f043 0201 	orr.w	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 0201 	bic.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d115      	bne.n	8004892 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004872:	2001      	movs	r0, #1
 8004874:	f7fc fbbe 	bl	8000ff4 <HAL_Delay>
      ms++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 f890 	bl	80059a4 <USB_GetMode>
 8004884:	4603      	mov	r3, r0
 8004886:	2b01      	cmp	r3, #1
 8004888:	d01e      	beq.n	80048c8 <USB_SetCurrentMode+0x84>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b31      	cmp	r3, #49	; 0x31
 800488e:	d9f0      	bls.n	8004872 <USB_SetCurrentMode+0x2e>
 8004890:	e01a      	b.n	80048c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d115      	bne.n	80048c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048a4:	2001      	movs	r0, #1
 80048a6:	f7fc fba5 	bl	8000ff4 <HAL_Delay>
      ms++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3301      	adds	r3, #1
 80048ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f001 f877 	bl	80059a4 <USB_GetMode>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <USB_SetCurrentMode+0x84>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b31      	cmp	r3, #49	; 0x31
 80048c0:	d9f0      	bls.n	80048a4 <USB_SetCurrentMode+0x60>
 80048c2:	e001      	b.n	80048c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e005      	b.n	80048d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b32      	cmp	r3, #50	; 0x32
 80048cc:	d101      	bne.n	80048d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048dc:	b084      	sub	sp, #16
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	e009      	b.n	8004910 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	3340      	adds	r3, #64	; 0x40
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	2200      	movs	r2, #0
 8004908:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3301      	adds	r3, #1
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b0e      	cmp	r3, #14
 8004914:	d9f2      	bls.n	80048fc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11c      	bne.n	8004956 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800492a:	f043 0302 	orr.w	r3, r3, #2
 800492e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e005      	b.n	8004962 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004968:	461a      	mov	r2, r3
 800496a:	2300      	movs	r3, #0
 800496c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	4619      	mov	r1, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	461a      	mov	r2, r3
 800497e:	680b      	ldr	r3, [r1, #0]
 8004980:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	2b01      	cmp	r3, #1
 8004986:	d10c      	bne.n	80049a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800498e:	2100      	movs	r1, #0
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f945 	bl	8004c20 <USB_SetDevSpeed>
 8004996:	e008      	b.n	80049aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004998:	2101      	movs	r1, #1
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f940 	bl	8004c20 <USB_SetDevSpeed>
 80049a0:	e003      	b.n	80049aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049a2:	2103      	movs	r1, #3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f93b 	bl	8004c20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049aa:	2110      	movs	r1, #16
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f8f3 	bl	8004b98 <USB_FlushTxFifo>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f90f 	bl	8004be0 <USB_FlushRxFifo>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	461a      	mov	r2, r3
 80049d4:	2300      	movs	r3, #0
 80049d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049de:	461a      	mov	r2, r3
 80049e0:	2300      	movs	r3, #0
 80049e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ea:	461a      	mov	r2, r3
 80049ec:	2300      	movs	r3, #0
 80049ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	e043      	b.n	8004a7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a0c:	d118      	bne.n	8004a40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a20:	461a      	mov	r2, r3
 8004a22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	e013      	b.n	8004a52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a36:	461a      	mov	r2, r3
 8004a38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e008      	b.n	8004a52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2300      	movs	r3, #0
 8004a62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	461a      	mov	r2, r3
 8004a72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d3b7      	bcc.n	80049f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	e043      	b.n	8004b14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa2:	d118      	bne.n	8004ad6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10a      	bne.n	8004ac0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e013      	b.n	8004ae8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004acc:	461a      	mov	r2, r3
 8004ace:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e008      	b.n	8004ae8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	461a      	mov	r2, r3
 8004af6:	2300      	movs	r3, #0
 8004af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	3301      	adds	r3, #1
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d3b7      	bcc.n	8004a8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f043 0210 	orr.w	r2, r3, #16
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <USB_DevInit+0x2b8>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f043 0208 	orr.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b7c:	f043 0304 	orr.w	r3, r3, #4
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b90:	b004      	add	sp, #16
 8004b92:	4770      	bx	lr
 8004b94:	803c3800 	.word	0x803c3800

08004b98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	019b      	lsls	r3, r3, #6
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <USB_FlushTxFifo+0x44>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e006      	b.n	8004bd0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d0f1      	beq.n	8004bb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	00030d40 	.word	0x00030d40

08004be0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2210      	movs	r2, #16
 8004bf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <USB_FlushRxFifo+0x3c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e006      	b.n	8004c10 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d0f1      	beq.n	8004bf2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	00030d40 	.word	0x00030d40

08004c20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c40:	4313      	orrs	r3, r2
 8004c42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b087      	sub	sp, #28
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 0306 	and.w	r3, r3, #6
 8004c6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c72:	2300      	movs	r3, #0
 8004c74:	75fb      	strb	r3, [r7, #23]
 8004c76:	e00a      	b.n	8004c8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d002      	beq.n	8004c84 <USB_GetDevSpeed+0x32>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b06      	cmp	r3, #6
 8004c82:	d102      	bne.n	8004c8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c84:	2302      	movs	r3, #2
 8004c86:	75fb      	strb	r3, [r7, #23]
 8004c88:	e001      	b.n	8004c8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c8a:	230f      	movs	r3, #15
 8004c8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d13a      	bne.n	8004d2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	2101      	movs	r1, #1
 8004cca:	fa01 f303 	lsl.w	r3, r1, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d155      	bne.n	8004d9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	78db      	ldrb	r3, [r3, #3]
 8004d0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	059b      	lsls	r3, r3, #22
 8004d12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d14:	4313      	orrs	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e036      	b.n	8004d9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	2101      	movs	r1, #1
 8004d40:	fa01 f303 	lsl.w	r3, r1, r3
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d11a      	bne.n	8004d9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	78db      	ldrb	r3, [r3, #3]
 8004d80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d82:	430b      	orrs	r3, r1
 8004d84:	4313      	orrs	r3, r2
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	0151      	lsls	r1, r2, #5
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	f040 815c 	bne.w	8005086 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d132      	bne.n	8004e3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e34:	0cdb      	lsrs	r3, r3, #19
 8004e36:	04db      	lsls	r3, r3, #19
 8004e38:	6113      	str	r3, [r2, #16]
 8004e3a:	e074      	b.n	8004f26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e56:	0cdb      	lsrs	r3, r3, #19
 8004e58:	04db      	lsls	r3, r3, #19
 8004e5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6959      	ldr	r1, [r3, #20]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	440b      	add	r3, r1
 8004e98:	1e59      	subs	r1, r3, #1
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ea2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ea4:	4b9d      	ldr	r3, [pc, #628]	; (800511c <USB_EPStartXfer+0x370>)
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	0148      	lsls	r0, r1, #5
 8004eac:	69f9      	ldr	r1, [r7, #28]
 8004eae:	4401      	add	r1, r0
 8004eb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	0148      	lsls	r0, r1, #5
 8004ed2:	69f9      	ldr	r1, [r7, #28]
 8004ed4:	4401      	add	r1, r0
 8004ed6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eda:	4313      	orrs	r3, r2
 8004edc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	78db      	ldrb	r3, [r3, #3]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d11f      	bne.n	8004f26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d14b      	bne.n	8004fc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	461a      	mov	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	78db      	ldrb	r3, [r3, #3]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d128      	bne.n	8004fa2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d110      	bne.n	8004f82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e00f      	b.n	8004fa2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e12f      	b.n	8005224 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fe2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	78db      	ldrb	r3, [r3, #3]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d015      	beq.n	8005018 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8117 	beq.w	8005224 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	2101      	movs	r1, #1
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	69f9      	ldr	r1, [r7, #28]
 800500e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005012:	4313      	orrs	r3, r2
 8005014:	634b      	str	r3, [r1, #52]	; 0x34
 8005016:	e105      	b.n	8005224 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d110      	bne.n	800504a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	e00f      	b.n	800506a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005068:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	68d9      	ldr	r1, [r3, #12]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	b298      	uxth	r0, r3
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	4603      	mov	r3, r0
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fa2b 	bl	80054da <USB_WritePacket>
 8005084:	e0ce      	b.n	8005224 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a0:	0cdb      	lsrs	r3, r3, #19
 80050a2:	04db      	lsls	r3, r3, #19
 80050a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d126      	bne.n	8005120 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	0148      	lsls	r0, r1, #5
 80050ec:	69f9      	ldr	r1, [r7, #28]
 80050ee:	4401      	add	r1, r0
 80050f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050f4:	4313      	orrs	r3, r2
 80050f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005112:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005116:	6113      	str	r3, [r2, #16]
 8005118:	e036      	b.n	8005188 <USB_EPStartXfer+0x3dc>
 800511a:	bf00      	nop
 800511c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	695a      	ldr	r2, [r3, #20]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4413      	add	r3, r2
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	8afb      	ldrh	r3, [r7, #22]
 8005146:	04d9      	lsls	r1, r3, #19
 8005148:	4b39      	ldr	r3, [pc, #228]	; (8005230 <USB_EPStartXfer+0x484>)
 800514a:	400b      	ands	r3, r1
 800514c:	69b9      	ldr	r1, [r7, #24]
 800514e:	0148      	lsls	r0, r1, #5
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	4401      	add	r1, r0
 8005154:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	8af9      	ldrh	r1, [r7, #22]
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	0148      	lsls	r0, r1, #5
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	4401      	add	r1, r0
 8005180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005184:	4313      	orrs	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d10d      	bne.n	80051aa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	68d9      	ldr	r1, [r3, #12]
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	460a      	mov	r2, r1
 80051a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	78db      	ldrb	r3, [r3, #3]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d128      	bne.n	8005204 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d110      	bne.n	80051e4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e00f      	b.n	8005204 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005202:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005222:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	1ff80000 	.word	0x1ff80000

08005234 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b01      	cmp	r3, #1
 8005252:	f040 80cd 	bne.w	80053f0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d132      	bne.n	80052c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800527c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	440a      	add	r2, r1
 8005298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052bc:	0cdb      	lsrs	r3, r3, #19
 80052be:	04db      	lsls	r3, r3, #19
 80052c0:	6113      	str	r3, [r2, #16]
 80052c2:	e04e      	b.n	8005362 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	0cdb      	lsrs	r3, r3, #19
 80052e0:	04db      	lsls	r3, r3, #19
 80052e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005302:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005306:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	429a      	cmp	r2, r3
 8005312:	d903      	bls.n	800531c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800533a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005352:	6939      	ldr	r1, [r7, #16]
 8005354:	0148      	lsls	r0, r1, #5
 8005356:	6979      	ldr	r1, [r7, #20]
 8005358:	4401      	add	r1, r0
 800535a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800535e:	4313      	orrs	r3, r2
 8005360:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d11e      	bne.n	80053a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	461a      	mov	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e092      	b.n	80054cc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d07e      	beq.n	80054cc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	2101      	movs	r1, #1
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	6979      	ldr	r1, [r7, #20]
 80053e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ea:	4313      	orrs	r3, r2
 80053ec:	634b      	str	r3, [r1, #52]	; 0x34
 80053ee:	e06d      	b.n	80054cc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540a:	0cdb      	lsrs	r3, r3, #19
 800540c:	04db      	lsls	r3, r3, #19
 800540e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800542e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005432:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	440a      	add	r2, r1
 800545a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005462:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547a:	6939      	ldr	r1, [r7, #16]
 800547c:	0148      	lsls	r0, r1, #5
 800547e:	6979      	ldr	r1, [r7, #20]
 8005480:	4401      	add	r1, r0
 8005482:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005486:	4313      	orrs	r3, r2
 8005488:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d10d      	bne.n	80054ac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	68d9      	ldr	r1, [r3, #12]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a8:	460a      	mov	r2, r1
 80054aa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054da:	b480      	push	{r7}
 80054dc:	b089      	sub	sp, #36	; 0x24
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	4611      	mov	r1, r2
 80054e6:	461a      	mov	r2, r3
 80054e8:	460b      	mov	r3, r1
 80054ea:	71fb      	strb	r3, [r7, #7]
 80054ec:	4613      	mov	r3, r2
 80054ee:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80054f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d123      	bne.n	8005548 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005500:	88bb      	ldrh	r3, [r7, #4]
 8005502:	3303      	adds	r3, #3
 8005504:	089b      	lsrs	r3, r3, #2
 8005506:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	e018      	b.n	8005540 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	031a      	lsls	r2, r3, #12
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4413      	add	r3, r2
 8005516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551a:	461a      	mov	r2, r3
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	3301      	adds	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	3301      	adds	r3, #1
 800552c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3301      	adds	r3, #1
 8005532:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	3301      	adds	r3, #1
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d3e2      	bcc.n	800550e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3724      	adds	r7, #36	; 0x24
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005556:	b480      	push	{r7}
 8005558:	b08b      	sub	sp, #44	; 0x2c
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	4613      	mov	r3, r2
 8005562:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	089b      	lsrs	r3, r3, #2
 8005570:	b29b      	uxth	r3, r3
 8005572:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800557c:	2300      	movs	r3, #0
 800557e:	623b      	str	r3, [r7, #32]
 8005580:	e014      	b.n	80055ac <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	601a      	str	r2, [r3, #0]
    pDest++;
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	3301      	adds	r3, #1
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	3301      	adds	r3, #1
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	3301      	adds	r3, #1
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	3301      	adds	r3, #1
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	3301      	adds	r3, #1
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d3e6      	bcc.n	8005582 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055b4:	8bfb      	ldrh	r3, [r7, #30]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01e      	beq.n	80055f8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	461a      	mov	r2, r3
 80055c6:	f107 0310 	add.w	r3, r7, #16
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	fa22 f303 	lsr.w	r3, r2, r3
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	701a      	strb	r2, [r3, #0]
      i++;
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	3301      	adds	r3, #1
 80055e4:	623b      	str	r3, [r7, #32]
      pDest++;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	3301      	adds	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80055ec:	8bfb      	ldrh	r3, [r7, #30]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80055f2:	8bfb      	ldrh	r3, [r7, #30]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1ea      	bne.n	80055ce <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	372c      	adds	r7, #44	; 0x2c
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d12c      	bne.n	800567c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	db12      	blt.n	800565a <USB_EPSetStall+0x54>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00f      	beq.n	800565a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005658:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e02b      	b.n	80056d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	db12      	blt.n	80056b4 <USB_EPSetStall+0xae>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00f      	beq.n	80056b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	0151      	lsls	r1, r2, #5
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	440a      	add	r2, r1
 80056aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	785b      	ldrb	r3, [r3, #1]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d128      	bne.n	8005750 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	440a      	add	r2, r1
 8005714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005718:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800571c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	78db      	ldrb	r3, [r3, #3]
 8005722:	2b03      	cmp	r3, #3
 8005724:	d003      	beq.n	800572e <USB_EPClearStall+0x4c>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	78db      	ldrb	r3, [r3, #3]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d138      	bne.n	80057a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e027      	b.n	80057a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800576e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	78db      	ldrb	r3, [r3, #3]
 8005774:	2b03      	cmp	r3, #3
 8005776:	d003      	beq.n	8005780 <USB_EPClearStall+0x9e>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	78db      	ldrb	r3, [r3, #3]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d10f      	bne.n	80057a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005828:	f023 0302 	bic.w	r3, r3, #2
 800582c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005856:	f023 0303 	bic.w	r3, r3, #3
 800585a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800586a:	f043 0302 	orr.w	r3, r3, #2
 800586e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4013      	ands	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4013      	ands	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	0c1b      	lsrs	r3, r3, #16
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4013      	ands	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	b29b      	uxth	r3, r3
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800593a:	68bb      	ldr	r3, [r7, #8]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
 8005978:	01db      	lsls	r3, r3, #7
 800597a:	b2db      	uxtb	r3, r3
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4013      	ands	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005996:	68bb      	ldr	r3, [r7, #8]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f003 0301 	and.w	r3, r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	460b      	mov	r3, r1
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	333c      	adds	r3, #60	; 0x3c
 8005a1e:	3304      	adds	r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4a26      	ldr	r2, [pc, #152]	; (8005ac0 <USB_EP0_OutStart+0xb8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d90a      	bls.n	8005a42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a3c:	d101      	bne.n	8005a42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e037      	b.n	8005ab2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a70:	f043 0318 	orr.w	r3, r3, #24
 8005a74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d10f      	bne.n	8005ab0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	461a      	mov	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005aae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	4f54300a 	.word	0x4f54300a

08005ac4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <USB_CoreReset+0x60>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d901      	bls.n	8005ae0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e01a      	b.n	8005b16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	daf3      	bge.n	8005ad0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f043 0201 	orr.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <USB_CoreReset+0x60>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d901      	bls.n	8005b08 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e006      	b.n	8005b16 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d0f1      	beq.n	8005af8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	00030d40 	.word	0x00030d40

08005b28 <__NVIC_SystemReset>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b2c:	f3bf 8f4f 	dsb	sy
}
 8005b30:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <__NVIC_SystemReset+0x24>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005b3a:	4904      	ldr	r1, [pc, #16]	; (8005b4c <__NVIC_SystemReset+0x24>)
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <__NVIC_SystemReset+0x28>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b42:	f3bf 8f4f 	dsb	sy
}
 8005b46:	bf00      	nop
    __NOP();
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <__NVIC_SystemReset+0x20>
 8005b4c:	e000ed00 	.word	0xe000ed00
 8005b50:	05fa0004 	.word	0x05fa0004

08005b54 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005b60:	f240 401c 	movw	r0, #1052	; 0x41c
 8005b64:	f002 fc26 	bl	80083b4 <USBD_static_malloc>
 8005b68:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e03f      	b.n	8005bfc <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b92:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4798      	blx	r3
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e000      	b.n	8005bfc <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e027      	b.n	8005c6e <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c24:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f002 fbb6 	bl	80083d0 <USBD_static_free>
  pdev->pClassData = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c88:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e0d5      	b.n	8005e50 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d03e      	beq.n	8005d2e <USBD_DFU_Setup+0xb6>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	f040 80c5 	bne.w	8005e40 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b06      	cmp	r3, #6
 8005cbc:	d82f      	bhi.n	8005d1e <USBD_DFU_Setup+0xa6>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USBD_DFU_Setup+0x4c>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005d15 	.word	0x08005d15
 8005cc8:	08005ce1 	.word	0x08005ce1
 8005ccc:	08005ceb 	.word	0x08005ceb
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d0d 	.word	0x08005d0d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa6c 	bl	80061c0 <DFU_Download>
          break;
 8005ce8:	e020      	b.n	8005d2c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fad3 	bl	8006298 <DFU_Upload>
          break;
 8005cf2:	e01b      	b.n	8005d2c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fba9 	bl	800644c <DFU_GetStatus>
          break;
 8005cfa:	e017      	b.n	8005d2c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fc5b 	bl	80065b8 <DFU_ClearStatus>
          break;
 8005d02:	e013      	b.n	8005d2c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fcab 	bl	8006660 <DFU_GetState>
          break;
 8005d0a:	e00f      	b.n	8005d2c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fcbf 	bl	8006690 <DFU_Abort>
          break;
 8005d12:	e00b      	b.n	8005d2c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9ee 	bl	80060f8 <DFU_Detach>
          break;
 8005d1c:	e006      	b.n	8005d2c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 fdf9 	bl	8007918 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d26:	2303      	movs	r3, #3
 8005d28:	77fb      	strb	r3, [r7, #31]
          break;
 8005d2a:	bf00      	nop
      }
      break;
 8005d2c:	e08f      	b.n	8005e4e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b0b      	cmp	r3, #11
 8005d34:	d87b      	bhi.n	8005e2e <USBD_DFU_Setup+0x1b6>
 8005d36:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <USBD_DFU_Setup+0xc4>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005e3d 	.word	0x08005e3d
 8005d44:	08005e2f 	.word	0x08005e2f
 8005d48:	08005e2f 	.word	0x08005e2f
 8005d4c:	08005e2f 	.word	0x08005e2f
 8005d50:	08005e2f 	.word	0x08005e2f
 8005d54:	08005d97 	.word	0x08005d97
 8005d58:	08005e2f 	.word	0x08005e2f
 8005d5c:	08005e2f 	.word	0x08005e2f
 8005d60:	08005e2f 	.word	0x08005e2f
 8005d64:	08005dc1 	.word	0x08005dc1
 8005d68:	08005ded 	.word	0x08005ded
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	d107      	bne.n	8005d88 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d78:	f107 030e 	add.w	r3, r7, #14
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 fe3a 	bl	80079fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d86:	e05a      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fdc4 	bl	8007918 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d90:	2303      	movs	r3, #3
 8005d92:	77fb      	strb	r3, [r7, #31]
          break;
 8005d94:	e053      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	885b      	ldrh	r3, [r3, #2]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b21      	cmp	r3, #33	; 0x21
 8005da0:	d107      	bne.n	8005db2 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8005da2:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <USBD_DFU_Setup+0x1e0>)
 8005da4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	88db      	ldrh	r3, [r3, #6]
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	bf28      	it	cs
 8005dae:	2309      	movcs	r3, #9
 8005db0:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005db2:	8afb      	ldrh	r3, [r7, #22]
 8005db4:	461a      	mov	r2, r3
 8005db6:	69b9      	ldr	r1, [r7, #24]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fe1e 	bl	80079fa <USBD_CtlSendData>
          break;
 8005dbe:	e03e      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d108      	bne.n	8005dde <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 fe0f 	bl	80079fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ddc:	e02f      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 fd99 	bl	8007918 <USBD_CtlError>
            ret = USBD_FAIL;
 8005de6:	2303      	movs	r3, #3
 8005de8:	77fb      	strb	r3, [r7, #31]
          break;
 8005dea:	e028      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	885b      	ldrh	r3, [r3, #2]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d114      	bne.n	8005e20 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d107      	bne.n	8005e12 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	885b      	ldrh	r3, [r3, #2]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e10:	e015      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 fd7f 	bl	8007918 <USBD_CtlError>
              ret = USBD_FAIL;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	77fb      	strb	r3, [r7, #31]
          break;
 8005e1e:	e00e      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 fd78 	bl	8007918 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	77fb      	strb	r3, [r7, #31]
          break;
 8005e2c:	e007      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f001 fd71 	bl	8007918 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e36:	2303      	movs	r3, #3
 8005e38:	77fb      	strb	r3, [r7, #31]
          break;
 8005e3a:	e000      	b.n	8005e3e <USBD_DFU_Setup+0x1c6>
          break;
 8005e3c:	bf00      	nop
      }
      break;
 8005e3e:	e006      	b.n	8005e4e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fd68 	bl	8007918 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e4c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	2000005a 	.word	0x2000005a

08005e5c <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	221b      	movs	r2, #27
 8005e68:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8005e6a:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	20000048 	.word	0x20000048

08005e7c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b088      	sub	sp, #32
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea0:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ea8:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e0ce      	b.n	8006052 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	f040 80bd 	bne.w	800603a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d17c      	bne.n	8005fc4 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f000 8093 	beq.w	8005ffc <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	d15e      	bne.n	8005f9e <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b21      	cmp	r3, #33	; 0x21
 8005ee6:	d124      	bne.n	8005f32 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	461a      	mov	r2, r3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	789b      	ldrb	r3, [r3, #2]
 8005efe:	021b      	lsls	r3, r3, #8
 8005f00:	441a      	add	r2, r3
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	78db      	ldrb	r3, [r3, #3]
 8005f12:	041b      	lsls	r3, r3, #16
 8005f14:	441a      	add	r2, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	791b      	ldrb	r3, [r3, #4]
 8005f26:	061b      	lsls	r3, r3, #24
 8005f28:	441a      	add	r2, r3
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8005f30:	e064      	b.n	8005ffc <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b41      	cmp	r3, #65	; 0x41
 8005f38:	d12f      	bne.n	8005f9a <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	785b      	ldrb	r3, [r3, #1]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	789b      	ldrb	r3, [r3, #2]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	441a      	add	r2, r3
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	78db      	ldrb	r3, [r3, #3]
 8005f64:	041b      	lsls	r3, r3, #16
 8005f66:	441a      	add	r2, r3
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	791b      	ldrb	r3, [r3, #4]
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	441a      	add	r2, r3
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d032      	beq.n	8005ffc <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e05b      	b.n	8006052 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e059      	b.n	8006052 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8005fb6:	f107 030c 	add.w	r3, r7, #12
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fcab 	bl	8007918 <USBD_CtlError>
 8005fc2:	e01b      	b.n	8005ffc <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d916      	bls.n	8005ffc <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005fd4:	3b02      	subs	r3, #2
 8005fd6:	029a      	lsls	r2, r3, #10
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005fde:	4413      	add	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	69f8      	ldr	r0, [r7, #28]
 8005fe8:	6979      	ldr	r1, [r7, #20]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8005ff0:	4798      	blx	r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e02a      	b.n	8006052 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2203      	movs	r2, #3
 8006010:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8006038:	e00a      	b.n	8006050 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006040:	2b07      	cmp	r3, #7
 8006042:	d103      	bne.n	800604c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fb75 	bl	8006734 <DFU_Leave>
 800604a:	e001      	b.n	8006050 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800604c:	2303      	movs	r3, #3
 800604e:	e000      	b.n	8006052 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3720      	adds	r7, #32
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	220a      	movs	r2, #10
 800607c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800607e:	4b03      	ldr	r3, [pc, #12]	; (800608c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	20000064 	.word	0x20000064

08006090 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	460b      	mov	r3, r1
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060a4:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	2b06      	cmp	r3, #6
 80060aa:	d808      	bhi.n	80060be <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4905      	ldr	r1, [pc, #20]	; (80060c8 <USBD_DFU_GetUsrStringDesc+0x38>)
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fc40 	bl	800793a <USBD_GetString>
    return USBD_StrDesc;
 80060ba:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <USBD_DFU_GetUsrStringDesc+0x38>)
 80060bc:	e000      	b.n	80060c0 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80060be:	2300      	movs	r3, #0
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200000f8 	.word	0x200000f8

080060cc <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	e004      	b.n	80060ea <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006108:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d051      	beq.n	80061b4 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006116:	2b02      	cmp	r3, #2
 8006118:	d013      	beq.n	8006142 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006120:	2b03      	cmp	r3, #3
 8006122:	d00e      	beq.n	8006142 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800612a:	2b05      	cmp	r3, #5
 800612c:	d009      	beq.n	8006142 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006134:	2b06      	cmp	r3, #6
 8006136:	d004      	beq.n	8006142 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800613e:	2b09      	cmp	r3, #9
 8006140:	d125      	bne.n	800618e <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <DFU_Detach+0xc4>)
 8006190:	7d5b      	ldrb	r3, [r3, #21]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b00      	cmp	r3, #0
 8006198:	d006      	beq.n	80061a8 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb7b 	bl	8006896 <USBD_Stop>
    (void)USBD_Start(pdev);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fb6c 	bl	800687e <USBD_Start>
 80061a6:	e006      	b.n	80061b6 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	885b      	ldrh	r3, [r3, #2]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fa ff21 	bl	8000ff4 <HAL_Delay>
 80061b2:	e000      	b.n	80061b6 <DFU_Detach+0xbe>
    return;
 80061b4:	bf00      	nop
  }
}
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000048 	.word	0x20000048

080061c0 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061d0:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d05b      	beq.n	8006290 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	88db      	ldrh	r3, [r3, #6]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d02d      	beq.n	800623c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d004      	beq.n	80061f4 <DFU_Download+0x34>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80061f0:	2b05      	cmp	r3, #5
 80061f2:	d11e      	bne.n	8006232 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	885b      	ldrh	r3, [r3, #2]
 80061f8:	461a      	mov	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	88db      	ldrh	r3, [r3, #6]
 8006204:	461a      	mov	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2203      	movs	r2, #3
 8006210:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8006220:	68f9      	ldr	r1, [r7, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006228:	461a      	mov	r2, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fc11 	bl	8007a52 <USBD_CtlPrepareRx>
 8006230:	e02f      	b.n	8006292 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 fb6f 	bl	8007918 <USBD_CtlError>
 800623a:	e02a      	b.n	8006292 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006242:	2b05      	cmp	r3, #5
 8006244:	d004      	beq.n	8006250 <DFU_Download+0x90>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800624c:	2b02      	cmp	r3, #2
 800624e:	d11a      	bne.n	8006286 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2206      	movs	r2, #6
 800625c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8006284:	e005      	b.n	8006292 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 fb45 	bl	8007918 <USBD_CtlError>
 800628e:	e000      	b.n	8006292 <DFU_Download+0xd2>
    return;
 8006290:	bf00      	nop
    }
  }
}
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062b0:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 80c4 	beq.w	8006442 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	88db      	ldrh	r3, [r3, #6]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80a8 	beq.w	8006414 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d005      	beq.n	80062da <DFU_Upload+0x42>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	f040 8090 	bne.w	80063fa <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	885b      	ldrh	r3, [r3, #2]
 80062de:	461a      	mov	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	88db      	ldrh	r3, [r3, #6]
 80062ea:	461a      	mov	r2, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d12c      	bne.n	8006356 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006302:	2b03      	cmp	r3, #3
 8006304:	d901      	bls.n	800630a <DFU_Upload+0x72>
 8006306:	2202      	movs	r2, #2
 8006308:	e000      	b.n	800630c <DFU_Upload+0x74>
 800630a:	2209      	movs	r2, #9
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2221      	movs	r2, #33	; 0x21
 8006340:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2241      	movs	r2, #65	; 0x41
 8006346:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2203      	movs	r2, #3
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fb53 	bl	80079fa <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006354:	e076      	b.n	8006444 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800635c:	2b01      	cmp	r3, #1
 800635e:	d931      	bls.n	80063c4 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	2209      	movs	r2, #9
 8006364:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006392:	3b02      	subs	r3, #2
 8006394:	029a      	lsls	r2, r3, #10
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800639c:	4413      	add	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	6979      	ldr	r1, [r7, #20]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80063ae:	4798      	blx	r3
 80063b0:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063b8:	461a      	mov	r2, r3
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fb1c 	bl	80079fa <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80063c2:	e03f      	b.n	8006444 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	220f      	movs	r2, #15
 80063c8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 fa90 	bl	8007918 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80063f8:	e024      	b.n	8006444 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 fa83 	bl	8007918 <USBD_CtlError>
 8006412:	e017      	b.n	8006444 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8006440:	e000      	b.n	8006444 <DFU_Upload+0x1ac>
    return;
 8006442:	bf00      	nop
  }
}
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800645a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006462:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80a0 	beq.w	80065ac <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006472:	2b03      	cmp	r3, #3
 8006474:	d002      	beq.n	800647c <DFU_GetStatus+0x30>
 8006476:	2b06      	cmp	r3, #6
 8006478:	d051      	beq.n	800651e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800647a:	e08e      	b.n	800659a <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006482:	2b00      	cmp	r3, #0
 8006484:	d034      	beq.n	80064f0 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2204      	movs	r2, #4
 800648a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10e      	bne.n	80064da <DFU_GetStatus+0x8e>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b41      	cmp	r3, #65	; 0x41
 80064c2:	d10a      	bne.n	80064da <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80064d4:	2100      	movs	r1, #0
 80064d6:	4798      	blx	r3
      break;
 80064d8:	e05f      	b.n	800659a <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80064ea:	2101      	movs	r1, #1
 80064ec:	4798      	blx	r3
      break;
 80064ee:	e054      	b.n	800659a <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2205      	movs	r2, #5
 80064f4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800651c:	e03d      	b.n	800659a <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8006524:	2b01      	cmp	r3, #1
 8006526:	d116      	bne.n	8006556 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2207      	movs	r2, #7
 800652c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8006554:	e020      	b.n	8006598 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800655c:	2b00      	cmp	r3, #0
 800655e:	d11b      	bne.n	8006598 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8006560:	4b14      	ldr	r3, [pc, #80]	; (80065b4 <DFU_GetStatus+0x168>)
 8006562:	7d1b      	ldrb	r3, [r3, #20]
 8006564:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8006568:	2b00      	cmp	r3, #0
 800656a:	d015      	beq.n	8006598 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8006598:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80065a0:	2206      	movs	r2, #6
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fa28 	bl	80079fa <USBD_CtlSendData>
 80065aa:	e000      	b.n	80065ae <DFU_GetStatus+0x162>
    return;
 80065ac:	bf00      	nop
}
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20000048 	.word	0x20000048

080065b8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065c6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d042      	beq.n	8006654 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80065d4:	2b0a      	cmp	r3, #10
 80065d6:	d11e      	bne.n	8006616 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8006614:	e01f      	b.n	8006656 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	220a      	movs	r2, #10
 800661a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	220e      	movs	r2, #14
 8006622:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8006652:	e000      	b.n	8006656 <DFU_ClearStatus+0x9e>
    return;
 8006654:	bf00      	nop
  }
}
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800666e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800667c:	2201      	movs	r2, #1
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 f9ba 	bl	80079fa <USBD_CtlSendData>
 8006686:	e000      	b.n	800668a <DFU_GetState+0x2a>
    return;
 8006688:	bf00      	nop
}
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800669e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d03f      	beq.n	8006726 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d013      	beq.n	80066d8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d00e      	beq.n	80066d8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80066c0:	2b05      	cmp	r3, #5
 80066c2:	d009      	beq.n	80066d8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80066ca:	2b06      	cmp	r3, #6
 80066cc:	d004      	beq.n	80066d8 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	d127      	bne.n	8006728 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8006724:	e000      	b.n	8006728 <DFU_Abort+0x98>
    return;
 8006726:	bf00      	nop
  }
}
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006742:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d03b      	beq.n	80067c2 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8006752:	4b1e      	ldr	r3, [pc, #120]	; (80067cc <DFU_Leave+0x98>)
 8006754:	7d1b      	ldrb	r3, [r3, #20]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2206      	movs	r2, #6
 8006762:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800678a:	e01b      	b.n	80067c4 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2208      	movs	r2, #8
 8006790:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f86c 	bl	8006896 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80067be:	f7ff f9b3 	bl	8005b28 <__NVIC_SystemReset>
    return;
 80067c2:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000048 	.word	0x20000048

080067d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e01f      	b.n	8006828 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	79fa      	ldrb	r2, [r7, #7]
 800681a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f001 fc51 	bl	80080c4 <USBD_LL_Init>
 8006822:	4603      	mov	r3, r0
 8006824:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006844:	2303      	movs	r3, #3
 8006846:	e016      	b.n	8006876 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	f107 020e 	add.w	r2, r7, #14
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	4602      	mov	r2, r0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b082      	sub	sp, #8
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 fc6c 	bl	8008164 <USBD_LL_Start>
 800688c:	4603      	mov	r3, r0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 fc7b 	bl	800819a <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6852      	ldr	r2, [r2, #4]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	4611      	mov	r1, r2
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
  }

  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068ee:	2303      	movs	r3, #3
 80068f0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d009      	beq.n	8006910 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	4611      	mov	r1, r2
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	78fa      	ldrb	r2, [r7, #3]
 800693a:	4611      	mov	r1, r2
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
  }

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	4618      	mov	r0, r3
 800695e:	f000 ffa1 	bl	80078a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006970:	461a      	mov	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	2b02      	cmp	r3, #2
 8006984:	d01a      	beq.n	80069bc <USBD_LL_SetupStage+0x72>
 8006986:	2b02      	cmp	r3, #2
 8006988:	d822      	bhi.n	80069d0 <USBD_LL_SetupStage+0x86>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <USBD_LL_SetupStage+0x4a>
 800698e:	2b01      	cmp	r3, #1
 8006990:	d00a      	beq.n	80069a8 <USBD_LL_SetupStage+0x5e>
 8006992:	e01d      	b.n	80069d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fa61 	bl	8006e64 <USBD_StdDevReq>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73fb      	strb	r3, [r7, #15]
      break;
 80069a6:	e020      	b.n	80069ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fac5 	bl	8006f40 <USBD_StdItfReq>
 80069b6:	4603      	mov	r3, r0
 80069b8:	73fb      	strb	r3, [r7, #15]
      break;
 80069ba:	e016      	b.n	80069ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069c2:	4619      	mov	r1, r3
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fb04 	bl	8006fd2 <USBD_StdEPReq>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73fb      	strb	r3, [r7, #15]
      break;
 80069ce:	e00c      	b.n	80069ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 fc1c 	bl	800821c <USBD_LL_StallEP>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
      break;
 80069e8:	bf00      	nop
  }

  return ret;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	460b      	mov	r3, r1
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d138      	bne.n	8006a7a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d14a      	bne.n	8006ab0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d913      	bls.n	8006a4e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	bf28      	it	cs
 8006a40:	4613      	movcs	r3, r2
 8006a42:	461a      	mov	r2, r3
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f001 f820 	bl	8007a8c <USBD_CtlContinueRx>
 8006a4c:	e030      	b.n	8006ab0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d10b      	bne.n	8006a72 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f001 f81b 	bl	8007aae <USBD_CtlSendStatus>
 8006a78:	e01a      	b.n	8006ab0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d114      	bne.n	8006ab0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00e      	beq.n	8006ab0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	7afa      	ldrb	r2, [r7, #11]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	4798      	blx	r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	e000      	b.n	8006ab2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d16b      	bne.n	8006ba6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d156      	bne.n	8006b8c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d914      	bls.n	8006b14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 ff95 	bl	8007a30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b06:	2300      	movs	r3, #0
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f001 fc2f 	bl	8008370 <USBD_LL_PrepareReceive>
 8006b12:	e03b      	b.n	8006b8c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d11c      	bne.n	8006b5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d316      	bcc.n	8006b5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d20f      	bcs.n	8006b5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 ff76 	bl	8007a30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f001 fc0c 	bl	8008370 <USBD_LL_PrepareReceive>
 8006b58:	e018      	b.n	8006b8c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d10b      	bne.n	8006b7e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 fb4b 	bl	800821c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 ffa4 	bl	8007ad4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d122      	bne.n	8006bdc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff fe98 	bl	80068cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ba4:	e01a      	b.n	8006bdc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d114      	bne.n	8006bdc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00e      	beq.n	8006bdc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	7afa      	ldrb	r2, [r7, #11]
 8006bc8:	4611      	mov	r1, r2
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	4798      	blx	r3
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	e000      	b.n	8006bde <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e02f      	b.n	8006c7a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00f      	beq.n	8006c44 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d009      	beq.n	8006c44 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6852      	ldr	r2, [r2, #4]
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	4611      	mov	r1, r2
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fac0 	bl	80081d0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2240      	movs	r2, #64	; 0x40
 8006c5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c60:	2340      	movs	r3, #64	; 0x40
 8006c62:	2200      	movs	r2, #0
 8006c64:	2180      	movs	r1, #128	; 0x80
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fab2 	bl	80081d0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2240      	movs	r2, #64	; 0x40
 8006c76:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	78fa      	ldrb	r2, [r7, #3]
 8006c92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2204      	movs	r2, #4
 8006cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d106      	bne.n	8006cf0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e012      	b.n	8006d3a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d10b      	bne.n	8006d38 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e014      	b.n	8006d86 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d10d      	bne.n	8006d84 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	78fa      	ldrb	r2, [r7, #3]
 8006d7e:	4611      	mov	r1, r2
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e014      	b.n	8006dd2 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b03      	cmp	r3, #3
 8006db2:	d10d      	bne.n	8006dd0 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d007      	beq.n	8006dd0 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	78fa      	ldrb	r2, [r7, #3]
 8006dca:	4611      	mov	r1, r2
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	6852      	ldr	r2, [r2, #4]
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	4611      	mov	r1, r2
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
  }

  return USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e46:	8a3b      	ldrh	r3, [r7, #16]
 8006e48:	021b      	lsls	r3, r3, #8
 8006e4a:	b21a      	sxth	r2, r3
 8006e4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	b21b      	sxth	r3, r3
 8006e54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e56:	89fb      	ldrh	r3, [r7, #14]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e7a:	2b40      	cmp	r3, #64	; 0x40
 8006e7c:	d005      	beq.n	8006e8a <USBD_StdDevReq+0x26>
 8006e7e:	2b40      	cmp	r3, #64	; 0x40
 8006e80:	d853      	bhi.n	8006f2a <USBD_StdDevReq+0xc6>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00b      	beq.n	8006e9e <USBD_StdDevReq+0x3a>
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d14f      	bne.n	8006f2a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9c:	e04a      	b.n	8006f34 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b09      	cmp	r3, #9
 8006ea4:	d83b      	bhi.n	8006f1e <USBD_StdDevReq+0xba>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBD_StdDevReq+0x48>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006f01 	.word	0x08006f01
 8006eb0:	08006f15 	.word	0x08006f15
 8006eb4:	08006f1f 	.word	0x08006f1f
 8006eb8:	08006f0b 	.word	0x08006f0b
 8006ebc:	08006f1f 	.word	0x08006f1f
 8006ec0:	08006edf 	.word	0x08006edf
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006f1f 	.word	0x08006f1f
 8006ecc:	08006ef7 	.word	0x08006ef7
 8006ed0:	08006ee9 	.word	0x08006ee9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f9de 	bl	8007298 <USBD_GetDescriptor>
          break;
 8006edc:	e024      	b.n	8006f28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fb55 	bl	8007590 <USBD_SetAddress>
          break;
 8006ee6:	e01f      	b.n	8006f28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fb94 	bl	8007618 <USBD_SetConfig>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73fb      	strb	r3, [r7, #15]
          break;
 8006ef4:	e018      	b.n	8006f28 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fc33 	bl	8007764 <USBD_GetConfig>
          break;
 8006efe:	e013      	b.n	8006f28 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f00:	6839      	ldr	r1, [r7, #0]
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fc64 	bl	80077d0 <USBD_GetStatus>
          break;
 8006f08:	e00e      	b.n	8006f28 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fc93 	bl	8007838 <USBD_SetFeature>
          break;
 8006f12:	e009      	b.n	8006f28 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fca2 	bl	8007860 <USBD_ClrFeature>
          break;
 8006f1c:	e004      	b.n	8006f28 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fcf9 	bl	8007918 <USBD_CtlError>
          break;
 8006f26:	bf00      	nop
      }
      break;
 8006f28:	e004      	b.n	8006f34 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fcf3 	bl	8007918 <USBD_CtlError>
      break;
 8006f32:	bf00      	nop
  }

  return ret;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop

08006f40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d005      	beq.n	8006f66 <USBD_StdItfReq+0x26>
 8006f5a:	2b40      	cmp	r3, #64	; 0x40
 8006f5c:	d82f      	bhi.n	8006fbe <USBD_StdItfReq+0x7e>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <USBD_StdItfReq+0x26>
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d12b      	bne.n	8006fbe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d81d      	bhi.n	8006fb0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	889b      	ldrh	r3, [r3, #4]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d813      	bhi.n	8006fa6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	4798      	blx	r3
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	88db      	ldrh	r3, [r3, #6]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d110      	bne.n	8006fba <USBD_StdItfReq+0x7a>
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10d      	bne.n	8006fba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fd85 	bl	8007aae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fa4:	e009      	b.n	8006fba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fcb5 	bl	8007918 <USBD_CtlError>
          break;
 8006fae:	e004      	b.n	8006fba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fcb0 	bl	8007918 <USBD_CtlError>
          break;
 8006fb8:	e000      	b.n	8006fbc <USBD_StdItfReq+0x7c>
          break;
 8006fba:	bf00      	nop
      }
      break;
 8006fbc:	e004      	b.n	8006fc8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fca9 	bl	8007918 <USBD_CtlError>
      break;
 8006fc6:	bf00      	nop
  }

  return ret;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	889b      	ldrh	r3, [r3, #4]
 8006fe4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d007      	beq.n	8007002 <USBD_StdEPReq+0x30>
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	f200 8145 	bhi.w	8007282 <USBD_StdEPReq+0x2b0>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00c      	beq.n	8007016 <USBD_StdEPReq+0x44>
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	f040 8140 	bne.w	8007282 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
 8007010:	4603      	mov	r3, r0
 8007012:	73fb      	strb	r3, [r7, #15]
      break;
 8007014:	e13a      	b.n	800728c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b03      	cmp	r3, #3
 800701c:	d007      	beq.n	800702e <USBD_StdEPReq+0x5c>
 800701e:	2b03      	cmp	r3, #3
 8007020:	f300 8129 	bgt.w	8007276 <USBD_StdEPReq+0x2a4>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d07f      	beq.n	8007128 <USBD_StdEPReq+0x156>
 8007028:	2b01      	cmp	r3, #1
 800702a:	d03c      	beq.n	80070a6 <USBD_StdEPReq+0xd4>
 800702c:	e123      	b.n	8007276 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d002      	beq.n	8007040 <USBD_StdEPReq+0x6e>
 800703a:	2b03      	cmp	r3, #3
 800703c:	d016      	beq.n	800706c <USBD_StdEPReq+0x9a>
 800703e:	e02c      	b.n	800709a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00d      	beq.n	8007062 <USBD_StdEPReq+0x90>
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	2b80      	cmp	r3, #128	; 0x80
 800704a:	d00a      	beq.n	8007062 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 f8e3 	bl	800821c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007056:	2180      	movs	r1, #128	; 0x80
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f8df 	bl	800821c <USBD_LL_StallEP>
 800705e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007060:	e020      	b.n	80070a4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fc57 	bl	8007918 <USBD_CtlError>
              break;
 800706a:	e01b      	b.n	80070a4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	885b      	ldrh	r3, [r3, #2]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10e      	bne.n	8007092 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <USBD_StdEPReq+0xc0>
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b80      	cmp	r3, #128	; 0x80
 800707e:	d008      	beq.n	8007092 <USBD_StdEPReq+0xc0>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	88db      	ldrh	r3, [r3, #6]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 f8c5 	bl	800821c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fd0b 	bl	8007aae <USBD_CtlSendStatus>

              break;
 8007098:	e004      	b.n	80070a4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fc3b 	bl	8007918 <USBD_CtlError>
              break;
 80070a2:	bf00      	nop
          }
          break;
 80070a4:	e0ec      	b.n	8007280 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d002      	beq.n	80070b8 <USBD_StdEPReq+0xe6>
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d016      	beq.n	80070e4 <USBD_StdEPReq+0x112>
 80070b6:	e030      	b.n	800711a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <USBD_StdEPReq+0x108>
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b80      	cmp	r3, #128	; 0x80
 80070c2:	d00a      	beq.n	80070da <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 f8a7 	bl	800821c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070ce:	2180      	movs	r1, #128	; 0x80
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 f8a3 	bl	800821c <USBD_LL_StallEP>
 80070d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070d8:	e025      	b.n	8007126 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fc1b 	bl	8007918 <USBD_CtlError>
              break;
 80070e2:	e020      	b.n	8007126 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	885b      	ldrh	r3, [r3, #2]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d11b      	bne.n	8007124 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 f8ad 	bl	800825a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fcd4 	bl	8007aae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4798      	blx	r3
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007118:	e004      	b.n	8007124 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fbfb 	bl	8007918 <USBD_CtlError>
              break;
 8007122:	e000      	b.n	8007126 <USBD_StdEPReq+0x154>
              break;
 8007124:	bf00      	nop
          }
          break;
 8007126:	e0ab      	b.n	8007280 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d002      	beq.n	800713a <USBD_StdEPReq+0x168>
 8007134:	2b03      	cmp	r3, #3
 8007136:	d032      	beq.n	800719e <USBD_StdEPReq+0x1cc>
 8007138:	e097      	b.n	800726a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <USBD_StdEPReq+0x17e>
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d004      	beq.n	8007150 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fbe5 	bl	8007918 <USBD_CtlError>
                break;
 800714e:	e091      	b.n	8007274 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007154:	2b00      	cmp	r3, #0
 8007156:	da0b      	bge.n	8007170 <USBD_StdEPReq+0x19e>
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	3310      	adds	r3, #16
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4413      	add	r3, r2
 800716c:	3304      	adds	r3, #4
 800716e:	e00b      	b.n	8007188 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	4413      	add	r3, r2
 8007186:	3304      	adds	r3, #4
 8007188:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2202      	movs	r2, #2
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fc2f 	bl	80079fa <USBD_CtlSendData>
              break;
 800719c:	e06a      	b.n	8007274 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800719e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	da11      	bge.n	80071ca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	f003 020f 	and.w	r2, r3, #15
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	3324      	adds	r3, #36	; 0x24
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d117      	bne.n	80071f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fba8 	bl	8007918 <USBD_CtlError>
                  break;
 80071c8:	e054      	b.n	8007274 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071ca:	7bbb      	ldrb	r3, [r7, #14]
 80071cc:	f003 020f 	and.w	r2, r3, #15
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d104      	bne.n	80071f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fb95 	bl	8007918 <USBD_CtlError>
                  break;
 80071ee:	e041      	b.n	8007274 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da0b      	bge.n	8007210 <USBD_StdEPReq+0x23e>
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	3310      	adds	r3, #16
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	e00b      	b.n	8007228 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007216:	4613      	mov	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	3304      	adds	r3, #4
 8007228:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <USBD_StdEPReq+0x264>
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d103      	bne.n	800723e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	e00e      	b.n	800725c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 f828 	bl	8008298 <USBD_LL_IsStallEP>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2201      	movs	r2, #1
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e002      	b.n	800725c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2202      	movs	r2, #2
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fbc9 	bl	80079fa <USBD_CtlSendData>
              break;
 8007268:	e004      	b.n	8007274 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fb53 	bl	8007918 <USBD_CtlError>
              break;
 8007272:	bf00      	nop
          }
          break;
 8007274:	e004      	b.n	8007280 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fb4d 	bl	8007918 <USBD_CtlError>
          break;
 800727e:	bf00      	nop
      }
      break;
 8007280:	e004      	b.n	800728c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fb47 	bl	8007918 <USBD_CtlError>
      break;
 800728a:	bf00      	nop
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	885b      	ldrh	r3, [r3, #2]
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	2b06      	cmp	r3, #6
 80072ba:	f200 813b 	bhi.w	8007534 <USBD_GetDescriptor+0x29c>
 80072be:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <USBD_GetDescriptor+0x2c>)
 80072c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c4:	080072e1 	.word	0x080072e1
 80072c8:	080072f9 	.word	0x080072f9
 80072cc:	08007339 	.word	0x08007339
 80072d0:	08007535 	.word	0x08007535
 80072d4:	08007535 	.word	0x08007535
 80072d8:	080074d5 	.word	0x080074d5
 80072dc:	08007501 	.word	0x08007501
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	7c12      	ldrb	r2, [r2, #16]
 80072ec:	f107 0108 	add.w	r1, r7, #8
 80072f0:	4610      	mov	r0, r2
 80072f2:	4798      	blx	r3
 80072f4:	60f8      	str	r0, [r7, #12]
      break;
 80072f6:	e125      	b.n	8007544 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	7c1b      	ldrb	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10d      	bne.n	800731c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007308:	f107 0208 	add.w	r2, r7, #8
 800730c:	4610      	mov	r0, r2
 800730e:	4798      	blx	r3
 8007310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3301      	adds	r3, #1
 8007316:	2202      	movs	r2, #2
 8007318:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800731a:	e113      	b.n	8007544 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	f107 0208 	add.w	r2, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	2202      	movs	r2, #2
 8007334:	701a      	strb	r2, [r3, #0]
      break;
 8007336:	e105      	b.n	8007544 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	885b      	ldrh	r3, [r3, #2]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b05      	cmp	r3, #5
 8007340:	f200 80ac 	bhi.w	800749c <USBD_GetDescriptor+0x204>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <USBD_GetDescriptor+0xb4>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007365 	.word	0x08007365
 8007350:	08007399 	.word	0x08007399
 8007354:	080073cd 	.word	0x080073cd
 8007358:	08007401 	.word	0x08007401
 800735c:	08007435 	.word	0x08007435
 8007360:	08007469 	.word	0x08007469
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	7c12      	ldrb	r2, [r2, #16]
 800737c:	f107 0108 	add.w	r1, r7, #8
 8007380:	4610      	mov	r0, r2
 8007382:	4798      	blx	r3
 8007384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007386:	e0a4      	b.n	80074d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fac4 	bl	8007918 <USBD_CtlError>
            err++;
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	3301      	adds	r3, #1
 8007394:	72fb      	strb	r3, [r7, #11]
          break;
 8007396:	e09c      	b.n	80074d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	7c12      	ldrb	r2, [r2, #16]
 80073b0:	f107 0108 	add.w	r1, r7, #8
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
 80073b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ba:	e08a      	b.n	80074d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 faaa 	bl	8007918 <USBD_CtlError>
            err++;
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	3301      	adds	r3, #1
 80073c8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ca:	e082      	b.n	80074d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00b      	beq.n	80073f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	7c12      	ldrb	r2, [r2, #16]
 80073e4:	f107 0108 	add.w	r1, r7, #8
 80073e8:	4610      	mov	r0, r2
 80073ea:	4798      	blx	r3
 80073ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ee:	e070      	b.n	80074d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa90 	bl	8007918 <USBD_CtlError>
            err++;
 80073f8:	7afb      	ldrb	r3, [r7, #11]
 80073fa:	3301      	adds	r3, #1
 80073fc:	72fb      	strb	r3, [r7, #11]
          break;
 80073fe:	e068      	b.n	80074d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00b      	beq.n	8007424 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	7c12      	ldrb	r2, [r2, #16]
 8007418:	f107 0108 	add.w	r1, r7, #8
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
 8007420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007422:	e056      	b.n	80074d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fa76 	bl	8007918 <USBD_CtlError>
            err++;
 800742c:	7afb      	ldrb	r3, [r7, #11]
 800742e:	3301      	adds	r3, #1
 8007430:	72fb      	strb	r3, [r7, #11]
          break;
 8007432:	e04e      	b.n	80074d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	7c12      	ldrb	r2, [r2, #16]
 800744c:	f107 0108 	add.w	r1, r7, #8
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007456:	e03c      	b.n	80074d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa5c 	bl	8007918 <USBD_CtlError>
            err++;
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	3301      	adds	r3, #1
 8007464:	72fb      	strb	r3, [r7, #11]
          break;
 8007466:	e034      	b.n	80074d2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	7c12      	ldrb	r2, [r2, #16]
 8007480:	f107 0108 	add.w	r1, r7, #8
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
 8007488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800748a:	e022      	b.n	80074d2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa42 	bl	8007918 <USBD_CtlError>
            err++;
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	3301      	adds	r3, #1
 8007498:	72fb      	strb	r3, [r7, #11]
          break;
 800749a:	e01a      	b.n	80074d2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00c      	beq.n	80074c2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	8852      	ldrh	r2, [r2, #2]
 80074b4:	b2d1      	uxtb	r1, r2
 80074b6:	f107 0208 	add.w	r2, r7, #8
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
 80074be:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80074c0:	e006      	b.n	80074d0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa27 	bl	8007918 <USBD_CtlError>
            err++;
 80074ca:	7afb      	ldrb	r3, [r7, #11]
 80074cc:	3301      	adds	r3, #1
 80074ce:	72fb      	strb	r3, [r7, #11]
          break;
 80074d0:	bf00      	nop
      }
      break;
 80074d2:	e037      	b.n	8007544 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	7c1b      	ldrb	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e4:	f107 0208 	add.w	r2, r7, #8
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074ee:	e029      	b.n	8007544 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa10 	bl	8007918 <USBD_CtlError>
        err++;
 80074f8:	7afb      	ldrb	r3, [r7, #11]
 80074fa:	3301      	adds	r3, #1
 80074fc:	72fb      	strb	r3, [r7, #11]
      break;
 80074fe:	e021      	b.n	8007544 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	7c1b      	ldrb	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10d      	bne.n	8007524 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	f107 0208 	add.w	r2, r7, #8
 8007514:	4610      	mov	r0, r2
 8007516:	4798      	blx	r3
 8007518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	2207      	movs	r2, #7
 8007520:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007522:	e00f      	b.n	8007544 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9f6 	bl	8007918 <USBD_CtlError>
        err++;
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	3301      	adds	r3, #1
 8007530:	72fb      	strb	r3, [r7, #11]
      break;
 8007532:	e007      	b.n	8007544 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f9ee 	bl	8007918 <USBD_CtlError>
      err++;
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	3301      	adds	r3, #1
 8007540:	72fb      	strb	r3, [r7, #11]
      break;
 8007542:	bf00      	nop
  }

  if (err != 0U)
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d11e      	bne.n	8007588 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	88db      	ldrh	r3, [r3, #6]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d016      	beq.n	8007580 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8007552:	893b      	ldrh	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00e      	beq.n	8007576 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	88da      	ldrh	r2, [r3, #6]
 800755c:	893b      	ldrh	r3, [r7, #8]
 800755e:	4293      	cmp	r3, r2
 8007560:	bf28      	it	cs
 8007562:	4613      	movcs	r3, r2
 8007564:	b29b      	uxth	r3, r3
 8007566:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007568:	893b      	ldrh	r3, [r7, #8]
 800756a:	461a      	mov	r2, r3
 800756c:	68f9      	ldr	r1, [r7, #12]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa43 	bl	80079fa <USBD_CtlSendData>
 8007574:	e009      	b.n	800758a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f9cd 	bl	8007918 <USBD_CtlError>
 800757e:	e004      	b.n	800758a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fa94 	bl	8007aae <USBD_CtlSendStatus>
 8007586:	e000      	b.n	800758a <USBD_GetDescriptor+0x2f2>
    return;
 8007588:	bf00      	nop
  }
}
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	889b      	ldrh	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d131      	bne.n	8007606 <USBD_SetAddress+0x76>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	88db      	ldrh	r3, [r3, #6]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d12d      	bne.n	8007606 <USBD_SetAddress+0x76>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	885b      	ldrh	r3, [r3, #2]
 80075ae:	2b7f      	cmp	r3, #127	; 0x7f
 80075b0:	d829      	bhi.n	8007606 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	885b      	ldrh	r3, [r3, #2]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d104      	bne.n	80075d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f9a3 	bl	8007918 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d2:	e01d      	b.n	8007610 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	7bfa      	ldrb	r2, [r7, #15]
 80075d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fe85 	bl	80082f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fa61 	bl	8007aae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fa:	e009      	b.n	8007610 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007604:	e004      	b.n	8007610 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f985 	bl	8007918 <USBD_CtlError>
  }
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	4b4c      	ldr	r3, [pc, #304]	; (8007760 <USBD_SetConfig+0x148>)
 800762e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007630:	4b4b      	ldr	r3, [pc, #300]	; (8007760 <USBD_SetConfig+0x148>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d905      	bls.n	8007644 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f96c 	bl	8007918 <USBD_CtlError>
    return USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	e088      	b.n	8007756 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d002      	beq.n	8007656 <USBD_SetConfig+0x3e>
 8007650:	2b03      	cmp	r3, #3
 8007652:	d025      	beq.n	80076a0 <USBD_SetConfig+0x88>
 8007654:	e071      	b.n	800773a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007656:	4b42      	ldr	r3, [pc, #264]	; (8007760 <USBD_SetConfig+0x148>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01c      	beq.n	8007698 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800765e:	4b40      	ldr	r3, [pc, #256]	; (8007760 <USBD_SetConfig+0x148>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007668:	4b3d      	ldr	r3, [pc, #244]	; (8007760 <USBD_SetConfig+0x148>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff f937 	bl	80068e2 <USBD_SetClassConfig>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f949 	bl	8007918 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007686:	e065      	b.n	8007754 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fa10 	bl	8007aae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2203      	movs	r2, #3
 8007692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007696:	e05d      	b.n	8007754 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fa08 	bl	8007aae <USBD_CtlSendStatus>
      break;
 800769e:	e059      	b.n	8007754 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076a0:	4b2f      	ldr	r3, [pc, #188]	; (8007760 <USBD_SetConfig+0x148>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d112      	bne.n	80076ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80076b0:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <USBD_SetConfig+0x148>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076ba:	4b29      	ldr	r3, [pc, #164]	; (8007760 <USBD_SetConfig+0x148>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff f92a 	bl	800691a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f9f1 	bl	8007aae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076cc:	e042      	b.n	8007754 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80076ce:	4b24      	ldr	r3, [pc, #144]	; (8007760 <USBD_SetConfig+0x148>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d02a      	beq.n	8007732 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff f918 	bl	800691a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80076ea:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <USBD_SetConfig+0x148>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076f4:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <USBD_SetConfig+0x148>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff f8f1 	bl	80068e2 <USBD_SetClassConfig>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00f      	beq.n	800772a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800770a:	6839      	ldr	r1, [r7, #0]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f903 	bl	8007918 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff f8fd 	bl	800691a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007728:	e014      	b.n	8007754 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f9bf 	bl	8007aae <USBD_CtlSendStatus>
      break;
 8007730:	e010      	b.n	8007754 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9bb 	bl	8007aae <USBD_CtlSendStatus>
      break;
 8007738:	e00c      	b.n	8007754 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f8eb 	bl	8007918 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007742:	4b07      	ldr	r3, [pc, #28]	; (8007760 <USBD_SetConfig+0x148>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff f8e6 	bl	800691a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800774e:	2303      	movs	r3, #3
 8007750:	73fb      	strb	r3, [r7, #15]
      break;
 8007752:	bf00      	nop
  }

  return ret;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	200001f7 	.word	0x200001f7

08007764 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88db      	ldrh	r3, [r3, #6]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d004      	beq.n	8007780 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f8cd 	bl	8007918 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800777e:	e023      	b.n	80077c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	dc02      	bgt.n	8007792 <USBD_GetConfig+0x2e>
 800778c:	2b00      	cmp	r3, #0
 800778e:	dc03      	bgt.n	8007798 <USBD_GetConfig+0x34>
 8007790:	e015      	b.n	80077be <USBD_GetConfig+0x5a>
 8007792:	2b03      	cmp	r3, #3
 8007794:	d00b      	beq.n	80077ae <USBD_GetConfig+0x4a>
 8007796:	e012      	b.n	80077be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3308      	adds	r3, #8
 80077a2:	2201      	movs	r2, #1
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f927 	bl	80079fa <USBD_CtlSendData>
        break;
 80077ac:	e00c      	b.n	80077c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3304      	adds	r3, #4
 80077b2:	2201      	movs	r2, #1
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f91f 	bl	80079fa <USBD_CtlSendData>
        break;
 80077bc:	e004      	b.n	80077c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f8a9 	bl	8007918 <USBD_CtlError>
        break;
 80077c6:	bf00      	nop
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	3b01      	subs	r3, #1
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d81e      	bhi.n	8007826 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	88db      	ldrh	r3, [r3, #6]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d004      	beq.n	80077fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f890 	bl	8007918 <USBD_CtlError>
        break;
 80077f8:	e01a      	b.n	8007830 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007806:	2b00      	cmp	r3, #0
 8007808:	d005      	beq.n	8007816 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f043 0202 	orr.w	r2, r3, #2
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	330c      	adds	r3, #12
 800781a:	2202      	movs	r2, #2
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8eb 	bl	80079fa <USBD_CtlSendData>
      break;
 8007824:	e004      	b.n	8007830 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f875 	bl	8007918 <USBD_CtlError>
      break;
 800782e:	bf00      	nop
  }
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	885b      	ldrh	r3, [r3, #2]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d106      	bne.n	8007858 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f92b 	bl	8007aae <USBD_CtlSendStatus>
  }
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007870:	b2db      	uxtb	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	2b02      	cmp	r3, #2
 8007876:	d80b      	bhi.n	8007890 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	885b      	ldrh	r3, [r3, #2]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d10c      	bne.n	800789a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f910 	bl	8007aae <USBD_CtlSendStatus>
      }
      break;
 800788e:	e004      	b.n	800789a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f840 	bl	8007918 <USBD_CtlError>
      break;
 8007898:	e000      	b.n	800789c <USBD_ClrFeature+0x3c>
      break;
 800789a:	bf00      	nop
  }
}
 800789c:	bf00      	nop
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f7ff faaa 	bl	8006e28 <SWAPBYTE>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7ff fa9d 	bl	8006e28 <SWAPBYTE>
 80078ee:	4603      	mov	r3, r0
 80078f0:	461a      	mov	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3301      	adds	r3, #1
 8007900:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f7ff fa90 	bl	8006e28 <SWAPBYTE>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	80da      	strh	r2, [r3, #6]
}
 8007910:	bf00      	nop
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc79 	bl	800821c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800792a:	2100      	movs	r1, #0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fc75 	bl	800821c <USBD_LL_StallEP>
}
 8007932:	bf00      	nop
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d036      	beq.n	80079be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007954:	6938      	ldr	r0, [r7, #16]
 8007956:	f000 f836 	bl	80079c6 <USBD_GetLen>
 800795a:	4603      	mov	r3, r0
 800795c:	3301      	adds	r3, #1
 800795e:	b29b      	uxth	r3, r3
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	b29a      	uxth	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4413      	add	r3, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	701a      	strb	r2, [r3, #0]
  idx++;
 8007974:	7dfb      	ldrb	r3, [r7, #23]
 8007976:	3301      	adds	r3, #1
 8007978:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	4413      	add	r3, r2
 8007980:	2203      	movs	r2, #3
 8007982:	701a      	strb	r2, [r3, #0]
  idx++;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
 8007986:	3301      	adds	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800798a:	e013      	b.n	80079b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	4413      	add	r3, r2
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	7812      	ldrb	r2, [r2, #0]
 8007996:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	3301      	adds	r3, #1
 800799c:	613b      	str	r3, [r7, #16]
    idx++;
 800799e:	7dfb      	ldrb	r3, [r7, #23]
 80079a0:	3301      	adds	r3, #1
 80079a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	4413      	add	r3, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	3301      	adds	r3, #1
 80079b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e7      	bne.n	800798c <USBD_GetString+0x52>
 80079bc:	e000      	b.n	80079c0 <USBD_GetString+0x86>
    return;
 80079be:	bf00      	nop
  }
}
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80079d6:	e005      	b.n	80079e4 <USBD_GetLen+0x1e>
  {
    len++;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	3301      	adds	r3, #1
 80079dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	3301      	adds	r3, #1
 80079e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f5      	bne.n	80079d8 <USBD_GetLen+0x12>
  }

  return len;
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b084      	sub	sp, #16
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	2100      	movs	r1, #0
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fc84 	bl	800832e <USBD_LL_Transmit>

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	2100      	movs	r1, #0
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 fc73 	bl	800832e <USBD_LL_Transmit>

  return USBD_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2203      	movs	r2, #3
 8007a62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fc77 	bl	8008370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fc66 	bl	8008370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2204      	movs	r2, #4
 8007aba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fc32 	bl	800832e <USBD_LL_Transmit>

  return USBD_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2205      	movs	r2, #5
 8007ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2100      	movs	r1, #0
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fc40 	bl	8008370 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b00:	2200      	movs	r2, #0
 8007b02:	4912      	ldr	r1, [pc, #72]	; (8007b4c <MX_USB_DEVICE_Init+0x50>)
 8007b04:	4812      	ldr	r0, [pc, #72]	; (8007b50 <MX_USB_DEVICE_Init+0x54>)
 8007b06:	f7fe fe63 	bl	80067d0 <USBD_Init>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b10:	f7f8 ff88 	bl	8000a24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8007b14:	490f      	ldr	r1, [pc, #60]	; (8007b54 <MX_USB_DEVICE_Init+0x58>)
 8007b16:	480e      	ldr	r0, [pc, #56]	; (8007b50 <MX_USB_DEVICE_Init+0x54>)
 8007b18:	f7fe fe8a 	bl	8006830 <USBD_RegisterClass>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b22:	f7f8 ff7f 	bl	8000a24 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8007b26:	490c      	ldr	r1, [pc, #48]	; (8007b58 <MX_USB_DEVICE_Init+0x5c>)
 8007b28:	4809      	ldr	r0, [pc, #36]	; (8007b50 <MX_USB_DEVICE_Init+0x54>)
 8007b2a:	f7fe facf 	bl	80060cc <USBD_DFU_RegisterMedia>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b34:	f7f8 ff76 	bl	8000a24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b38:	4805      	ldr	r0, [pc, #20]	; (8007b50 <MX_USB_DEVICE_Init+0x54>)
 8007b3a:	f7fe fea0 	bl	800687e <USBD_Start>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b44:	f7f8 ff6e 	bl	8000a24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b48:	bf00      	nop
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20000070 	.word	0x20000070
 8007b50:	200007d4 	.word	0x200007d4
 8007b54:	2000000c 	.word	0x2000000c
 8007b58:	200000c0 	.word	0x200000c0

08007b5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	6039      	str	r1, [r7, #0]
 8007b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2212      	movs	r2, #18
 8007b6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b6e:	4b03      	ldr	r3, [pc, #12]	; (8007b7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	2000008c 	.word	0x2000008c

08007b80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b92:	4b03      	ldr	r3, [pc, #12]	; (8007ba0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	200000a0 	.word	0x200000a0

08007ba4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d105      	bne.n	8007bc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	4907      	ldr	r1, [pc, #28]	; (8007bd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bba:	4808      	ldr	r0, [pc, #32]	; (8007bdc <USBD_FS_ProductStrDescriptor+0x38>)
 8007bbc:	f7ff febd 	bl	800793a <USBD_GetString>
 8007bc0:	e004      	b.n	8007bcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4904      	ldr	r1, [pc, #16]	; (8007bd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bc6:	4805      	ldr	r0, [pc, #20]	; (8007bdc <USBD_FS_ProductStrDescriptor+0x38>)
 8007bc8:	f7ff feb7 	bl	800793a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bcc:	4b02      	ldr	r3, [pc, #8]	; (8007bd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000aa4 	.word	0x20000aa4
 8007bdc:	080084ac 	.word	0x080084ac

08007be0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	6039      	str	r1, [r7, #0]
 8007bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	4904      	ldr	r1, [pc, #16]	; (8007c00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bf0:	4804      	ldr	r0, [pc, #16]	; (8007c04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bf2:	f7ff fea2 	bl	800793a <USBD_GetString>
  return USBD_StrDesc;
 8007bf6:	4b02      	ldr	r3, [pc, #8]	; (8007c00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000aa4 	.word	0x20000aa4
 8007c04:	080084cc 	.word	0x080084cc

08007c08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	6039      	str	r1, [r7, #0]
 8007c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	221a      	movs	r2, #26
 8007c18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c1a:	f000 f843 	bl	8007ca4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c1e:	4b02      	ldr	r3, [pc, #8]	; (8007c28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	200000a4 	.word	0x200000a4

08007c2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	6039      	str	r1, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d105      	bne.n	8007c4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	4907      	ldr	r1, [pc, #28]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c42:	4808      	ldr	r0, [pc, #32]	; (8007c64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c44:	f7ff fe79 	bl	800793a <USBD_GetString>
 8007c48:	e004      	b.n	8007c54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4904      	ldr	r1, [pc, #16]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c4e:	4805      	ldr	r0, [pc, #20]	; (8007c64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c50:	f7ff fe73 	bl	800793a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000aa4 	.word	0x20000aa4
 8007c64:	080084e0 	.word	0x080084e0

08007c68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c7a:	683a      	ldr	r2, [r7, #0]
 8007c7c:	4907      	ldr	r1, [pc, #28]	; (8007c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c7e:	4808      	ldr	r0, [pc, #32]	; (8007ca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c80:	f7ff fe5b 	bl	800793a <USBD_GetString>
 8007c84:	e004      	b.n	8007c90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	4904      	ldr	r1, [pc, #16]	; (8007c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c8a:	4805      	ldr	r0, [pc, #20]	; (8007ca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c8c:	f7ff fe55 	bl	800793a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c90:	4b02      	ldr	r3, [pc, #8]	; (8007c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20000aa4 	.word	0x20000aa4
 8007ca0:	080084ec 	.word	0x080084ec

08007ca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007caa:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <Get_SerialNum+0x44>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cb0:	4b0e      	ldr	r3, [pc, #56]	; (8007cec <Get_SerialNum+0x48>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cb6:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <Get_SerialNum+0x4c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cca:	2208      	movs	r2, #8
 8007ccc:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <Get_SerialNum+0x50>)
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f814 	bl	8007cfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	4908      	ldr	r1, [pc, #32]	; (8007cf8 <Get_SerialNum+0x54>)
 8007cd8:	68b8      	ldr	r0, [r7, #8]
 8007cda:	f000 f80f 	bl	8007cfc <IntToUnicode>
  }
}
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	1fff7a10 	.word	0x1fff7a10
 8007cec:	1fff7a14 	.word	0x1fff7a14
 8007cf0:	1fff7a18 	.word	0x1fff7a18
 8007cf4:	200000a6 	.word	0x200000a6
 8007cf8:	200000b6 	.word	0x200000b6

08007cfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4613      	mov	r3, r2
 8007d08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75fb      	strb	r3, [r7, #23]
 8007d12:	e027      	b.n	8007d64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	0f1b      	lsrs	r3, r3, #28
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	d80b      	bhi.n	8007d34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	0f1b      	lsrs	r3, r3, #28
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	4619      	mov	r1, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	440b      	add	r3, r1
 8007d2c:	3230      	adds	r2, #48	; 0x30
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	e00a      	b.n	8007d4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	0f1b      	lsrs	r3, r3, #28
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4619      	mov	r1, r3
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	440b      	add	r3, r1
 8007d44:	3237      	adds	r2, #55	; 0x37
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	3301      	adds	r3, #1
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	4413      	add	r3, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	3301      	adds	r3, #1
 8007d62:	75fb      	strb	r3, [r7, #23]
 8007d64:	7dfa      	ldrb	r2, [r7, #23]
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d3d3      	bcc.n	8007d14 <IntToUnicode+0x18>
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	bf00      	nop
 8007d70:	371c      	adds	r7, #28
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8007d7e:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8007d8e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8007da2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8007dbc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8007dd6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	460b      	mov	r3, r1
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8007df6:	bf00      	nop
  }
  return (USBD_OK);
 8007df8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b0a0      	sub	sp, #128	; 0x80
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	605a      	str	r2, [r3, #4]
 8007e1a:	609a      	str	r2, [r3, #8]
 8007e1c:	60da      	str	r2, [r3, #12]
 8007e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e20:	f107 0314 	add.w	r3, r7, #20
 8007e24:	2258      	movs	r2, #88	; 0x58
 8007e26:	2100      	movs	r1, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fb2b 	bl	8008484 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e36:	d155      	bne.n	8007ee4 <HAL_PCD_MspInit+0xdc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007e38:	2320      	movs	r3, #32
 8007e3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e40:	f107 0314 	add.w	r3, r7, #20
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fb fc19 	bl	800367c <HAL_RCCEx_PeriphCLKConfig>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8007e50:	f7f8 fde8 	bl	8000a24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e54:	2300      	movs	r3, #0
 8007e56:	613b      	str	r3, [r7, #16]
 8007e58:	4b24      	ldr	r3, [pc, #144]	; (8007eec <HAL_PCD_MspInit+0xe4>)
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	4a23      	ldr	r2, [pc, #140]	; (8007eec <HAL_PCD_MspInit+0xe4>)
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	6313      	str	r3, [r2, #48]	; 0x30
 8007e64:	4b21      	ldr	r3, [pc, #132]	; (8007eec <HAL_PCD_MspInit+0xe4>)
 8007e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007e70:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8007e74:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e76:	2302      	movs	r3, #2
 8007e78:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e82:	230a      	movs	r3, #10
 8007e84:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4818      	ldr	r0, [pc, #96]	; (8007ef0 <HAL_PCD_MspInit+0xe8>)
 8007e8e:	f7f9 fd55 	bl	800193c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007ea0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4812      	ldr	r0, [pc, #72]	; (8007ef0 <HAL_PCD_MspInit+0xe8>)
 8007ea8:	f7f9 fd48 	bl	800193c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007eac:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <HAL_PCD_MspInit+0xe4>)
 8007eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb0:	4a0e      	ldr	r2, [pc, #56]	; (8007eec <HAL_PCD_MspInit+0xe4>)
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb6:	6353      	str	r3, [r2, #52]	; 0x34
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <HAL_PCD_MspInit+0xe4>)
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <HAL_PCD_MspInit+0xe4>)
 8007ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8007ec8:	4b08      	ldr	r3, [pc, #32]	; (8007eec <HAL_PCD_MspInit+0xe4>)
 8007eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	2043      	movs	r0, #67	; 0x43
 8007eda:	f7f9 fcf8 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ede:	2043      	movs	r0, #67	; 0x43
 8007ee0:	f7f9 fd11 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ee4:	bf00      	nop
 8007ee6:	3780      	adds	r7, #128	; 0x80
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	40023800 	.word	0x40023800
 8007ef0:	40020000 	.word	0x40020000

08007ef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f7fe fd1d 	bl	800694a <USBD_LL_SetupStage>
}
 8007f10:	bf00      	nop
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f2a:	78fa      	ldrb	r2, [r7, #3]
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	440b      	add	r3, r1
 8007f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	4619      	mov	r1, r3
 8007f42:	f7fe fd57 	bl	80069f4 <USBD_LL_DataOutStage>
}
 8007f46:	bf00      	nop
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	4613      	mov	r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	440b      	add	r3, r1
 8007f6e:	3348      	adds	r3, #72	; 0x48
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	4619      	mov	r1, r3
 8007f76:	f7fe fda0 	bl	8006aba <USBD_LL_DataInStage>
}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe feb4 	bl	8006cfe <USBD_LL_SOF>
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d001      	beq.n	8007fb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007fb2:	f7f8 fd37 	bl	8000a24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fbc:	7bfa      	ldrb	r2, [r7, #15]
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fe fe5e 	bl	8006c82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fe fe0a 	bl	8006be6 <USBD_LL_Reset>
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fe59 	bl	8006ca2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6812      	ldr	r2, [r2, #0]
 8007ffe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008002:	f043 0301 	orr.w	r3, r3, #1
 8008006:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a1b      	ldr	r3, [r3, #32]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008010:	4b04      	ldr	r3, [pc, #16]	; (8008024 <HAL_PCD_SuspendCallback+0x48>)
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	4a03      	ldr	r2, [pc, #12]	; (8008024 <HAL_PCD_SuspendCallback+0x48>)
 8008016:	f043 0306 	orr.w	r3, r3, #6
 800801a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	e000ed00 	.word	0xe000ed00

08008028 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fe49 	bl	8006cce <USBD_LL_Resume>
}
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe fe97 	bl	8006d8e <USBD_LL_IsoOUTIncomplete>
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800807a:	78fa      	ldrb	r2, [r7, #3]
 800807c:	4611      	mov	r1, r2
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe fe5f 	bl	8006d42 <USBD_LL_IsoINIncomplete>
}
 8008084:	bf00      	nop
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe fe9d 	bl	8006dda <USBD_LL_DevConnected>
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fe9a 	bl	8006df0 <USBD_LL_DevDisconnected>
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d13f      	bne.n	8008154 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80080d4:	4a22      	ldr	r2, [pc, #136]	; (8008160 <USBD_LL_Init+0x9c>)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a20      	ldr	r2, [pc, #128]	; (8008160 <USBD_LL_Init+0x9c>)
 80080e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80080e4:	4b1e      	ldr	r3, [pc, #120]	; (8008160 <USBD_LL_Init+0x9c>)
 80080e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80080ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80080ec:	4b1c      	ldr	r3, [pc, #112]	; (8008160 <USBD_LL_Init+0x9c>)
 80080ee:	2206      	movs	r2, #6
 80080f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80080f2:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <USBD_LL_Init+0x9c>)
 80080f4:	2202      	movs	r2, #2
 80080f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80080f8:	4b19      	ldr	r3, [pc, #100]	; (8008160 <USBD_LL_Init+0x9c>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080fe:	4b18      	ldr	r3, [pc, #96]	; (8008160 <USBD_LL_Init+0x9c>)
 8008100:	2202      	movs	r2, #2
 8008102:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008104:	4b16      	ldr	r3, [pc, #88]	; (8008160 <USBD_LL_Init+0x9c>)
 8008106:	2201      	movs	r2, #1
 8008108:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800810a:	4b15      	ldr	r3, [pc, #84]	; (8008160 <USBD_LL_Init+0x9c>)
 800810c:	2200      	movs	r2, #0
 800810e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008110:	4b13      	ldr	r3, [pc, #76]	; (8008160 <USBD_LL_Init+0x9c>)
 8008112:	2200      	movs	r2, #0
 8008114:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8008116:	4b12      	ldr	r3, [pc, #72]	; (8008160 <USBD_LL_Init+0x9c>)
 8008118:	2201      	movs	r2, #1
 800811a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800811c:	4b10      	ldr	r3, [pc, #64]	; (8008160 <USBD_LL_Init+0x9c>)
 800811e:	2201      	movs	r2, #1
 8008120:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <USBD_LL_Init+0x9c>)
 8008124:	2200      	movs	r2, #0
 8008126:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008128:	480d      	ldr	r0, [pc, #52]	; (8008160 <USBD_LL_Init+0x9c>)
 800812a:	f7f9 fef9 	bl	8001f20 <HAL_PCD_Init>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008134:	f7f8 fc76 	bl	8000a24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008138:	2180      	movs	r1, #128	; 0x80
 800813a:	4809      	ldr	r0, [pc, #36]	; (8008160 <USBD_LL_Init+0x9c>)
 800813c:	f7fb f861 	bl	8003202 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008140:	2240      	movs	r2, #64	; 0x40
 8008142:	2100      	movs	r1, #0
 8008144:	4806      	ldr	r0, [pc, #24]	; (8008160 <USBD_LL_Init+0x9c>)
 8008146:	f7fb f815 	bl	8003174 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800814a:	2280      	movs	r2, #128	; 0x80
 800814c:	2101      	movs	r1, #1
 800814e:	4804      	ldr	r0, [pc, #16]	; (8008160 <USBD_LL_Init+0x9c>)
 8008150:	f7fb f810 	bl	8003174 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20000ca4 	.word	0x20000ca4

08008164 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800817a:	4618      	mov	r0, r3
 800817c:	f7f9 fff4 	bl	8002168 <HAL_PCD_Start>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f92c 	bl	80083e4 <USBD_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008190:	7bbb      	ldrb	r3, [r7, #14]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fa f80c 	bl	80021ce <HAL_PCD_Stop>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f911 	bl	80083e4 <USBD_Get_USB_Status>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	4608      	mov	r0, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	4603      	mov	r3, r0
 80081e0:	70fb      	strb	r3, [r7, #3]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70bb      	strb	r3, [r7, #2]
 80081e6:	4613      	mov	r3, r2
 80081e8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081f8:	78bb      	ldrb	r3, [r7, #2]
 80081fa:	883a      	ldrh	r2, [r7, #0]
 80081fc:	78f9      	ldrb	r1, [r7, #3]
 80081fe:	f7fa fc23 	bl	8002a48 <HAL_PCD_EP_Open>
 8008202:	4603      	mov	r3, r0
 8008204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f8eb 	bl	80083e4 <USBD_Get_USB_Status>
 800820e:	4603      	mov	r3, r0
 8008210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008212:	7bbb      	ldrb	r3, [r7, #14]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008236:	78fa      	ldrb	r2, [r7, #3]
 8008238:	4611      	mov	r1, r2
 800823a:	4618      	mov	r0, r3
 800823c:	f7fa fd01 	bl	8002c42 <HAL_PCD_EP_SetStall>
 8008240:	4603      	mov	r3, r0
 8008242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 f8cc 	bl	80083e4 <USBD_Get_USB_Status>
 800824c:	4603      	mov	r3, r0
 800824e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008250:	7bbb      	ldrb	r3, [r7, #14]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008274:	78fa      	ldrb	r2, [r7, #3]
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f7fa fd46 	bl	8002d0a <HAL_PCD_EP_ClrStall>
 800827e:	4603      	mov	r3, r0
 8008280:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	4618      	mov	r0, r3
 8008286:	f000 f8ad 	bl	80083e4 <USBD_Get_USB_Status>
 800828a:	4603      	mov	r3, r0
 800828c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800828e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da0b      	bge.n	80082cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	4613      	mov	r3, r2
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	1a9b      	subs	r3, r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	333e      	adds	r3, #62	; 0x3e
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	e00b      	b.n	80082e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082d2:	68f9      	ldr	r1, [r7, #12]
 80082d4:	4613      	mov	r3, r2
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	440b      	add	r3, r1
 80082de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80082e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800830a:	78fa      	ldrb	r2, [r7, #3]
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f7fa fb75 	bl	80029fe <HAL_PCD_SetAddress>
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	4618      	mov	r0, r3
 800831c:	f000 f862 	bl	80083e4 <USBD_Get_USB_Status>
 8008320:	4603      	mov	r3, r0
 8008322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008324:	7bbb      	ldrb	r3, [r7, #14]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b086      	sub	sp, #24
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
 800833a:	460b      	mov	r3, r1
 800833c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800834c:	7af9      	ldrb	r1, [r7, #11]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	f7fa fc2c 	bl	8002bae <HAL_PCD_EP_Transmit>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	4618      	mov	r0, r3
 800835e:	f000 f841 	bl	80083e4 <USBD_Get_USB_Status>
 8008362:	4603      	mov	r3, r0
 8008364:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008366:	7dbb      	ldrb	r3, [r7, #22]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	460b      	mov	r3, r1
 800837e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800838e:	7af9      	ldrb	r1, [r7, #11]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	f7fa fbc0 	bl	8002b18 <HAL_PCD_EP_Receive>
 8008398:	4603      	mov	r3, r0
 800839a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f820 	bl	80083e4 <USBD_Get_USB_Status>
 80083a4:	4603      	mov	r3, r0
 80083a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80083bc:	4b03      	ldr	r3, [pc, #12]	; (80083cc <USBD_static_malloc+0x18>)
}
 80083be:	4618      	mov	r0, r3
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	200001f8 	.word	0x200001f8

080083d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]

}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d817      	bhi.n	8008428 <USBD_Get_USB_Status+0x44>
 80083f8:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <USBD_Get_USB_Status+0x1c>)
 80083fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fe:	bf00      	nop
 8008400:	08008411 	.word	0x08008411
 8008404:	08008417 	.word	0x08008417
 8008408:	0800841d 	.word	0x0800841d
 800840c:	08008423 	.word	0x08008423
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
    break;
 8008414:	e00b      	b.n	800842e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008416:	2303      	movs	r3, #3
 8008418:	73fb      	strb	r3, [r7, #15]
    break;
 800841a:	e008      	b.n	800842e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800841c:	2301      	movs	r3, #1
 800841e:	73fb      	strb	r3, [r7, #15]
    break;
 8008420:	e005      	b.n	800842e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008422:	2303      	movs	r3, #3
 8008424:	73fb      	strb	r3, [r7, #15]
    break;
 8008426:	e002      	b.n	800842e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008428:	2303      	movs	r3, #3
 800842a:	73fb      	strb	r3, [r7, #15]
    break;
 800842c:	bf00      	nop
  }
  return usb_status;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <__libc_init_array>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4d0d      	ldr	r5, [pc, #52]	; (8008474 <__libc_init_array+0x38>)
 8008440:	4c0d      	ldr	r4, [pc, #52]	; (8008478 <__libc_init_array+0x3c>)
 8008442:	1b64      	subs	r4, r4, r5
 8008444:	10a4      	asrs	r4, r4, #2
 8008446:	2600      	movs	r6, #0
 8008448:	42a6      	cmp	r6, r4
 800844a:	d109      	bne.n	8008460 <__libc_init_array+0x24>
 800844c:	4d0b      	ldr	r5, [pc, #44]	; (800847c <__libc_init_array+0x40>)
 800844e:	4c0c      	ldr	r4, [pc, #48]	; (8008480 <__libc_init_array+0x44>)
 8008450:	f000 f820 	bl	8008494 <_init>
 8008454:	1b64      	subs	r4, r4, r5
 8008456:	10a4      	asrs	r4, r4, #2
 8008458:	2600      	movs	r6, #0
 800845a:	42a6      	cmp	r6, r4
 800845c:	d105      	bne.n	800846a <__libc_init_array+0x2e>
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	f855 3b04 	ldr.w	r3, [r5], #4
 8008464:	4798      	blx	r3
 8008466:	3601      	adds	r6, #1
 8008468:	e7ee      	b.n	8008448 <__libc_init_array+0xc>
 800846a:	f855 3b04 	ldr.w	r3, [r5], #4
 800846e:	4798      	blx	r3
 8008470:	3601      	adds	r6, #1
 8008472:	e7f2      	b.n	800845a <__libc_init_array+0x1e>
 8008474:	0800857c 	.word	0x0800857c
 8008478:	0800857c 	.word	0x0800857c
 800847c:	0800857c 	.word	0x0800857c
 8008480:	08008580 	.word	0x08008580

08008484 <memset>:
 8008484:	4402      	add	r2, r0
 8008486:	4603      	mov	r3, r0
 8008488:	4293      	cmp	r3, r2
 800848a:	d100      	bne.n	800848e <memset+0xa>
 800848c:	4770      	bx	lr
 800848e:	f803 1b01 	strb.w	r1, [r3], #1
 8008492:	e7f9      	b.n	8008488 <memset+0x4>

08008494 <_init>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	bf00      	nop
 8008498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849a:	bc08      	pop	{r3}
 800849c:	469e      	mov	lr, r3
 800849e:	4770      	bx	lr

080084a0 <_fini>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

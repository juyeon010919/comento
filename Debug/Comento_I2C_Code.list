
Comento_I2C_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097fc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080099d4  080099d4  0000a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a9c  08009a9c  0000b0dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009a9c  08009a9c  0000aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aa4  08009aa4  0000b0dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa4  08009aa4  0000aaa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aa8  08009aa8  0000aaa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08009aac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  200000dc  08009b88  0000b0dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  08009b88  0000c0ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018204  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f5  00000000  00000000  00023310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00026d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100e  00000000  00000000  000281c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025932  00000000  00000000  000291ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1eb  00000000  00000000  0004eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbddd  00000000  00000000  0006aceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005788  00000000  00000000  00146b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0014c294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000dc 	.word	0x200000dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080099bc 	.word	0x080099bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e0 	.word	0x200000e0
 8000214:	080099bc 	.word	0x080099bc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	@ 0x28
 8000548:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fd43 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f861 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 fa15 	bl	8000980 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f9e9 	bl	800092c <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800055a:	f000 f919 	bl	8000790 <MX_CAN1_Init>
  MX_I2C1_Init();
 800055e:	f000 f94b 	bl	80007f8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000562:	f000 f977 	bl	8000854 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000566:	f000 f9ab 	bl	80008c0 <MX_SPI3_Init>
  MX_ADC1_Init();
 800056a:	f000 f8bf 	bl	80006ec <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800056e:	f008 fd59 	bl	8009024 <MX_USB_DEVICE_Init>
  // HAL_I2C_Master_Receive(); 각 함수의 매개변수 파악
  uint8_t rx_data[1] = {0};
 8000572:	2300      	movs	r3, #0
 8000574:	743b      	strb	r3, [r7, #16]

  HAL_I2C_Master_Receive(
 8000576:	f107 0210 	add.w	r2, r7, #16
 800057a:	2364      	movs	r3, #100	@ 0x64
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2301      	movs	r3, #1
 8000580:	21c0      	movs	r1, #192	@ 0xc0
 8000582:	4823      	ldr	r0, [pc, #140]	@ (8000610 <main+0xcc>)
 8000584:	f001 fe2c 	bl	80021e0 <HAL_I2C_Master_Receive>
    1,                 // 수신할 데이터 크기 (1바이트)
    100                // 타임아웃 시간(ms, 응답 없으면 종료)
  );

  // HAL_I2C_Master_Transmit(); 각 함수의 매개변수 파악
  uint8_t vout_data[2] = {0x20, 0xA4};  // 0x20: BUCKA VOUT 레지스터, 0xA4 = 1.025V
 8000588:	f24a 4320 	movw	r3, #42016	@ 0xa420
 800058c:	81bb      	strh	r3, [r7, #12]

  // MP5475의 BUCKA 출력 전압을 1.025V로 설정하는 코드
  // 6.25mV 단위로 설정되며, 0xA4 = 164 × 6.25mV = 1.025V

  HAL_I2C_Master_Transmit(
 800058e:	f107 020c 	add.w	r2, r7, #12
 8000592:	2364      	movs	r3, #100	@ 0x64
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2302      	movs	r3, #2
 8000598:	21c0      	movs	r1, #192	@ 0xc0
 800059a:	481d      	ldr	r0, [pc, #116]	@ (8000610 <main+0xcc>)
 800059c:	f001 fd22 	bl	8001fe4 <HAL_I2C_Master_Transmit>
    100                // 타임아웃 시간
  );
  // Fault 상태 저장할 구조체 선언
  FaultStatus_t faultStatus;
  // MP5475의 REG_FAULT_STATUS1 (0x00번) 레지스터 읽기
  HAL_I2C_Mem_Read(
 80005a0:	2364      	movs	r3, #100	@ 0x64
 80005a2:	9302      	str	r3, [sp, #8]
 80005a4:	2301      	movs	r3, #1
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	2200      	movs	r2, #0
 80005b2:	21c0      	movs	r1, #192	@ 0xc0
 80005b4:	4816      	ldr	r0, [pc, #88]	@ (8000610 <main+0xcc>)
 80005b6:	f002 f839 	bl	800262c <HAL_I2C_Mem_Read>
      // 나중에 여기에 오류 처리 로직을 넣을 수 있음
      // 예: LED 켜기, UART로 메시지 출력 등
  }
  /* USER CODE BEGIN 2 */

  uint8_t i2c_tx_data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	75fb      	strb	r3, [r7, #23]
  uint8_t i2c_tx_addr = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	75bb      	strb	r3, [r7, #22]
  uint8_t i2c_rx_data = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	757b      	strb	r3, [r7, #21]
  uint8_t i2c_rx_addr = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	753b      	strb	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      test1.field.a = 1;
 80005ca:	793b      	ldrb	r3, [r7, #4]
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	713b      	strb	r3, [r7, #4]
      i2c_tx_data = test1.Pmic_data;
 80005d2:	793b      	ldrb	r3, [r7, #4]
 80005d4:	75fb      	strb	r3, [r7, #23]

      uint8_t i2c_tx_data = 0x55;
 80005d6:	2355      	movs	r3, #85	@ 0x55
 80005d8:	70fb      	strb	r3, [r7, #3]
      uint8_t i2c_rx_data = 0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	70bb      	strb	r3, [r7, #2]
       * @param  0xA0: 데이터를 보낼 슬레이브 장치 주소 (8비트 주소)
       * @param  i2c_tx_data: 전송할 데이터가 담긴 변수 주소
       * @param  1: 데이터 크기 (1 바이트)
       * @param  1000: 타임아웃 시간 (ms 단위)
       */
      HAL_I2C_Master_Transmit(&hi2c1, 0xA0, &i2c_tx_data, 1, 1000);
 80005de:	1cfa      	adds	r2, r7, #3
 80005e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	21a0      	movs	r1, #160	@ 0xa0
 80005ea:	4809      	ldr	r0, [pc, #36]	@ (8000610 <main+0xcc>)
 80005ec:	f001 fcfa 	bl	8001fe4 <HAL_I2C_Master_Transmit>
       * @param  i2c_rx_data: 수신한 데이터를 저장할 변수 주소
       * @param  1: 수신할 바이트 수
       * @param  1000: 타임아웃 시간
       */

      HAL_I2C_Master_Receive(&hi2c1, 0xA0, &i2c_rx_data, 1, 1000);
 80005f0:	1cba      	adds	r2, r7, #2
 80005f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	21a0      	movs	r1, #160	@ 0xa0
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <main+0xcc>)
 80005fe:	f001 fdef 	bl	80021e0 <HAL_I2C_Master_Receive>

      HAL_Delay(1000);  // 반복 방지용 딜레이
 8000602:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000606:	f000 fd57 	bl	80010b8 <HAL_Delay>
  {
 800060a:	bf00      	nop
 800060c:	e7dd      	b.n	80005ca <main+0x86>
 800060e:	bf00      	nop
 8000610:	20000168 	.word	0x20000168

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2234      	movs	r2, #52	@ 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f009 f99e 	bl	8009964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b29      	ldr	r3, [pc, #164]	@ (80006e4 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a28      	ldr	r2, [pc, #160]	@ (80006e4 <SystemClock_Config+0xd0>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <SystemClock_Config+0xd0>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a22      	ldr	r2, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd4>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000674:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000682:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000688:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800068c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068e:	2304      	movs	r3, #4
 8000690:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000692:	2308      	movs	r3, #8
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fc5e 	bl	8004f60 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006aa:	f000 fa17 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2103      	movs	r1, #3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 ff9c 	bl	8004608 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d6:	f000 fa01 	bl	8000adc <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <MX_ADC1_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000706:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800070a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070c:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_ADC1_Init+0x98>)
 800072e:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_ADC1_Init+0xa0>)
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_ADC1_Init+0x98>)
 800073a:	2201      	movs	r2, #1
 800073c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <MX_ADC1_Init+0x98>)
 800074e:	f000 fcd7 	bl	8001100 <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000758:	f000 f9c0 	bl	8000adc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075c:	2301      	movs	r3, #1
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_ADC1_Init+0x98>)
 800076e:	f000 fd0b 	bl	8001188 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000778:	f000 f9b0 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000f8 	.word	0x200000f8
 8000788:	40012000 	.word	0x40012000
 800078c:	0f000001 	.word	0x0f000001

08000790 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000794:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_CAN1_Init+0x60>)
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <MX_CAN1_Init+0x64>)
 8000798:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_CAN1_Init+0x60>)
 800079c:	2210      	movs	r2, #16
 800079e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007a0:	4b13      	ldr	r3, [pc, #76]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007d8:	2200      	movs	r2, #0
 80007da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_CAN1_Init+0x60>)
 80007de:	f000 ff01 	bl	80015e4 <HAL_CAN_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007e8:	f000 f978 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000140 	.word	0x20000140
 80007f4:	40006400 	.word	0x40006400

080007f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_I2C1_Init+0x50>)
 80007fe:	4a13      	ldr	r2, [pc, #76]	@ (800084c <MX_I2C1_Init+0x54>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000804:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <MX_I2C1_Init+0x58>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800081a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_I2C1_Init+0x50>)
 8000836:	f001 fa91 	bl	8001d5c <HAL_I2C_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000840:	f000 f94c 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000168 	.word	0x20000168
 800084c:	40005400 	.word	0x40005400
 8000850:	000186a0 	.word	0x000186a0

08000854 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000858:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_SPI2_Init+0x64>)
 800085a:	4a18      	ldr	r2, [pc, #96]	@ (80008bc <MX_SPI2_Init+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_SPI2_Init+0x64>)
 8000860:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000864:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_SPI2_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_SPI2_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_SPI2_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_SPI2_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_SPI2_Init+0x64>)
 8000880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000884:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_SPI2_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <MX_SPI2_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_SPI2_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <MX_SPI2_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_SPI2_Init+0x64>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	@ (80008b8 <MX_SPI2_Init+0x64>)
 80008a6:	f004 fddf 	bl	8005468 <HAL_SPI_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008b0:	f000 f914 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200001bc 	.word	0x200001bc
 80008bc:	40003800 	.word	0x40003800

080008c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	@ (8000928 <MX_SPI3_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <MX_SPI3_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_SPI3_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <MX_SPI3_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_SPI3_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_SPI3_Init+0x64>)
 8000912:	f004 fda9 	bl	8005468 <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 f8de 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000214 	.word	0x20000214
 8000928:	40003c00 	.word	0x40003c00

0800092c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_USART3_UART_Init+0x50>)
 8000934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_USART3_UART_Init+0x4c>)
 8000964:	f004 fe09 	bl	800557a <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800096e:	f000 f8b5 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000026c 	.word	0x2000026c
 800097c:	40004800 	.word	0x40004800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	@ 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	4b4c      	ldr	r3, [pc, #304]	@ (8000acc <MX_GPIO_Init+0x14c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a4b      	ldr	r2, [pc, #300]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b49      	ldr	r3, [pc, #292]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	4b45      	ldr	r3, [pc, #276]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a44      	ldr	r2, [pc, #272]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b42      	ldr	r3, [pc, #264]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b3e      	ldr	r3, [pc, #248]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a3d      	ldr	r2, [pc, #244]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b3b      	ldr	r3, [pc, #236]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b37      	ldr	r3, [pc, #220]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a36      	ldr	r2, [pc, #216]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b34      	ldr	r3, [pc, #208]	@ (8000acc <MX_GPIO_Init+0x14c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <MX_GPIO_Init+0x14c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000acc <MX_GPIO_Init+0x14c>)
 8000a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <MX_GPIO_Init+0x14c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a28      	ldr	r2, [pc, #160]	@ (8000acc <MX_GPIO_Init+0x14c>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_GPIO_Init+0x14c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a44:	4822      	ldr	r0, [pc, #136]	@ (8000ad0 <MX_GPIO_Init+0x150>)
 8000a46:	f001 f96f 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2140      	movs	r1, #64	@ 0x40
 8000a4e:	4821      	ldr	r0, [pc, #132]	@ (8000ad4 <MX_GPIO_Init+0x154>)
 8000a50:	f001 f96a 	bl	8001d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481b      	ldr	r0, [pc, #108]	@ (8000ad8 <MX_GPIO_Init+0x158>)
 8000a6c:	f000 ffc8 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a70:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_GPIO_Init+0x150>)
 8000a8a:	f000 ffb9 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a8e:	2340      	movs	r3, #64	@ 0x40
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	@ (8000ad4 <MX_GPIO_Init+0x154>)
 8000aa6:	f000 ffab 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aaa:	2380      	movs	r3, #128	@ 0x80
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_GPIO_Init+0x154>)
 8000abe:	f000 ff9f 	bl	8001a00 <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	@ 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40020800 	.word	0x40020800

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add HAL_I2C_Master_Transmit()his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a17      	ldr	r2, [pc, #92]	@ (8000bb4 <HAL_ADC_MspInit+0x7c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d127      	bne.n	8000baa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <HAL_ADC_MspInit+0x80>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	4a15      	ldr	r2, [pc, #84]	@ (8000bb8 <HAL_ADC_MspInit+0x80>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <HAL_ADC_MspInit+0x80>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_ADC_MspInit+0x80>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <HAL_ADC_MspInit+0x80>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_ADC_MspInit+0x80>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b92:	2302      	movs	r3, #2
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	2303      	movs	r3, #3
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <HAL_ADC_MspInit+0x84>)
 8000ba6:	f000 ff2b 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40012000 	.word	0x40012000
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a19      	ldr	r2, [pc, #100]	@ (8000c44 <HAL_CAN_MspInit+0x84>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12b      	bne.n	8000c3a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_CAN_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <HAL_CAN_MspInit+0x88>)
 8000bec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_CAN_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_CAN_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_CAN_MspInit+0x88>)
 8000c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_CAN_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c2a:	2309      	movs	r3, #9
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <HAL_CAN_MspInit+0x8c>)
 8000c36:	f000 fee3 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	@ 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40006400 	.word	0x40006400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40021800 	.word	0x40021800

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a19      	ldr	r2, [pc, #100]	@ (8000cd4 <HAL_I2C_MspInit+0x84>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12c      	bne.n	8000ccc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a17      	ldr	r2, [pc, #92]	@ (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c8e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c94:	2312      	movs	r3, #18
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <HAL_I2C_MspInit+0x8c>)
 8000cac:	f000 fea8 	bl	8001a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000cba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <HAL_I2C_MspInit+0x88>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	@ 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	@ 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a51      	ldr	r2, [pc, #324]	@ (8000e44 <HAL_SPI_MspInit+0x164>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d14b      	bne.n	8000d9a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
 8000d06:	4b50      	ldr	r3, [pc, #320]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a4f      	ldr	r2, [pc, #316]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b4d      	ldr	r3, [pc, #308]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	4b49      	ldr	r3, [pc, #292]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a48      	ldr	r2, [pc, #288]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d28:	f043 0304 	orr.w	r3, r3, #4
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b46      	ldr	r3, [pc, #280]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	4b42      	ldr	r3, [pc, #264]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a41      	ldr	r2, [pc, #260]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d56:	230c      	movs	r3, #12
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d66:	2305      	movs	r3, #5
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4836      	ldr	r0, [pc, #216]	@ (8000e4c <HAL_SPI_MspInit+0x16c>)
 8000d72:	f000 fe45 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	482f      	ldr	r0, [pc, #188]	@ (8000e50 <HAL_SPI_MspInit+0x170>)
 8000d94:	f000 fe34 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d98:	e050      	b.n	8000e3c <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000e54 <HAL_SPI_MspInit+0x174>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d14b      	bne.n	8000e3c <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	4a26      	ldr	r2, [pc, #152]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db4:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de4:	4a18      	ldr	r2, [pc, #96]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_SPI_MspInit+0x168>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	480e      	ldr	r0, [pc, #56]	@ (8000e50 <HAL_SPI_MspInit+0x170>)
 8000e16:	f000 fdf3 	bl	8001a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <HAL_SPI_MspInit+0x16c>)
 8000e38:	f000 fde2 	bl	8001a00 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3738      	adds	r7, #56	@ 0x38
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40003800 	.word	0x40003800
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40003c00 	.word	0x40003c00

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a19      	ldr	r2, [pc, #100]	@ (8000edc <HAL_UART_MspInit+0x84>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d12c      	bne.n	8000ed4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	4a17      	ldr	r2, [pc, #92]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_UART_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <HAL_UART_MspInit+0x8c>)
 8000ed0:	f000 fd96 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	@ 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020c00 	.word	0x40020c00

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <NMI_Handler+0x4>

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <MemManage_Handler+0x4>

08000f00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3e:	f000 f89b 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <OTG_FS_IRQHandler+0x10>)
 8000f4e:	f002 fb38 	bl	80035c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000884 	.word	0x20000884

08000f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f86:	490e      	ldr	r1, [pc, #56]	@ (8000fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f88:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8000fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000faa:	f7ff ffd7 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f008 fce1 	bl	8009974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fac7 	bl	8000544 <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fb8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000fc4:	08009aac 	.word	0x08009aac
  ldr r2, =_sbss
 8000fc8:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000fcc:	200010ac 	.word	0x200010ac

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <HAL_Init+0x40>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_Init+0x40>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_Init+0x40>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 fcbd 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f808 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fd6e 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 fcd5 	bl	80019e6 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 fc9d 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	@ (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	@ (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	200002b0 	.word	0x200002b0

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	@ (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200002b0 	.word	0x200002b0

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e033      	b.n	800117e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fd0a 	bl	8000b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	2b00      	cmp	r3, #0
 800113c:	d118      	bne.n	8001170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001146:	f023 0302 	bic.w	r3, r3, #2
 800114a:	f043 0202 	orr.w	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f94a 	bl	80013ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
 800116e:	e001      	b.n	8001174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x1c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e113      	b.n	80013cc <HAL_ADC_ConfigChannel+0x244>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	d925      	bls.n	8001200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68d9      	ldr	r1, [r3, #12]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	3b1e      	subs	r3, #30
 80011ca:	2207      	movs	r2, #7
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43da      	mvns	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	400a      	ands	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68d9      	ldr	r1, [r3, #12]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4403      	add	r3, r0
 80011f2:	3b1e      	subs	r3, #30
 80011f4:	409a      	lsls	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	e022      	b.n	8001246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6919      	ldr	r1, [r3, #16]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	2207      	movs	r2, #7
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	400a      	ands	r2, r1
 8001222:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	4603      	mov	r3, r0
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4403      	add	r3, r0
 800123c:	409a      	lsls	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b06      	cmp	r3, #6
 800124c:	d824      	bhi.n	8001298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b05      	subs	r3, #5
 8001260:	221f      	movs	r2, #31
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	400a      	ands	r2, r1
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b05      	subs	r3, #5
 800128a:	fa00 f203 	lsl.w	r2, r0, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34
 8001296:	e04c      	b.n	8001332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b0c      	cmp	r3, #12
 800129e:	d824      	bhi.n	80012ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	3b23      	subs	r3, #35	@ 0x23
 80012b2:	221f      	movs	r2, #31
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43da      	mvns	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	400a      	ands	r2, r1
 80012c0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	3b23      	subs	r3, #35	@ 0x23
 80012dc:	fa00 f203 	lsl.w	r2, r0, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012e8:	e023      	b.n	8001332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3b41      	subs	r3, #65	@ 0x41
 80012fc:	221f      	movs	r2, #31
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	400a      	ands	r2, r1
 800130a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	3b41      	subs	r3, #65	@ 0x41
 8001326:	fa00 f203 	lsl.w	r2, r0, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001332:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_ADC_ConfigChannel+0x250>)
 8001334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a28      	ldr	r2, [pc, #160]	@ (80013dc <HAL_ADC_ConfigChannel+0x254>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d10f      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d8>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b12      	cmp	r3, #18
 8001346:	d10b      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1d      	ldr	r2, [pc, #116]	@ (80013dc <HAL_ADC_ConfigChannel+0x254>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12b      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <HAL_ADC_ConfigChannel+0x258>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_ADC_ConfigChannel+0x1f4>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b11      	cmp	r3, #17
 800137a:	d122      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a11      	ldr	r2, [pc, #68]	@ (80013e0 <HAL_ADC_ConfigChannel+0x258>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d111      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_ADC_ConfigChannel+0x25c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_ADC_ConfigChannel+0x260>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	0c9a      	lsrs	r2, r3, #18
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013b4:	e002      	b.n	80013bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f9      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40012300 	.word	0x40012300
 80013dc:	40012000 	.word	0x40012000
 80013e0:	10000012 	.word	0x10000012
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f4:	4b79      	ldr	r3, [pc, #484]	@ (80015dc <ADC_Init+0x1f0>)
 80013f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	431a      	orrs	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	021a      	lsls	r2, r3, #8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147e:	4a58      	ldr	r2, [pc, #352]	@ (80015e0 <ADC_Init+0x1f4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6899      	ldr	r1, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e00f      	b.n	80014ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0202 	bic.w	r2, r2, #2
 80014f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6899      	ldr	r1, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	7e1b      	ldrb	r3, [r3, #24]
 8001504:	005a      	lsls	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01b      	beq.n	8001550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001526:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6859      	ldr	r1, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	3b01      	subs	r3, #1
 8001544:	035a      	lsls	r2, r3, #13
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e007      	b.n	8001560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800155e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	3b01      	subs	r3, #1
 800157c:	051a      	lsls	r2, r3, #20
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015a2:	025a      	lsls	r2, r3, #9
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6899      	ldr	r1, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	029a      	lsls	r2, r3, #10
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40012300 	.word	0x40012300
 80015e0:	0f000001 	.word	0x0f000001

080015e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0ed      	b.n	80017d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fadc 	bl	8000bc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001618:	f7ff fd42 	bl	80010a0 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800161e:	e012      	b.n	8001646 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001620:	f7ff fd3e 	bl	80010a0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b0a      	cmp	r3, #10
 800162c:	d90b      	bls.n	8001646 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2205      	movs	r2, #5
 800163e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0c5      	b.n	80017d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0e5      	beq.n	8001620 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0202 	bic.w	r2, r2, #2
 8001662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff fd1c 	bl	80010a0 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800166a:	e012      	b.n	8001692 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800166c:	f7ff fd18 	bl	80010a0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b0a      	cmp	r3, #10
 8001678:	d90b      	bls.n	8001692 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2205      	movs	r2, #5
 800168a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e09f      	b.n	80017d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e5      	bne.n	800166c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7e1b      	ldrb	r3, [r3, #24]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e007      	b.n	80016ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7e5b      	ldrb	r3, [r3, #25]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7e9b      	ldrb	r3, [r3, #26]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0220 	orr.w	r2, r2, #32
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e007      	b.n	800171e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0220 	bic.w	r2, r2, #32
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7edb      	ldrb	r3, [r3, #27]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0210 	bic.w	r2, r2, #16
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e007      	b.n	8001748 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0210 	orr.w	r2, r2, #16
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7f1b      	ldrb	r3, [r3, #28]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0208 	orr.w	r2, r2, #8
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e007      	b.n	8001772 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0208 	bic.w	r2, r2, #8
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7f5b      	ldrb	r3, [r3, #29]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d108      	bne.n	800178c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0204 	orr.w	r2, r2, #4
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e007      	b.n	800179c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	ea42 0103 	orr.w	r1, r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	1e5a      	subs	r2, r3, #1
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	@ (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	@ (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	@ (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	@ (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a4:	f7ff ff3e 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	6978      	ldr	r0, [r7, #20]
 80019b0:	f7ff ff8e 	bl	80018d0 <NVIC_EncodePriority>
 80019b4:	4602      	mov	r2, r0
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff5d 	bl	800187c <__NVIC_SetPriority>
}
 80019c2:	bf00      	nop
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff31 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffa2 	bl	8001938 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	@ 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e165      	b.n	8001ce8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8154 	bne.w	8001ce2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80ae 	beq.w	8001ce2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d00 <HAL_GPIO_Init+0x300>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8001d00 <HAL_GPIO_Init+0x300>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b96:	4b5a      	ldr	r3, [pc, #360]	@ (8001d00 <HAL_GPIO_Init+0x300>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba2:	4a58      	ldr	r2, [pc, #352]	@ (8001d04 <HAL_GPIO_Init+0x304>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d08 <HAL_GPIO_Init+0x308>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x21a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4e      	ldr	r2, [pc, #312]	@ (8001d0c <HAL_GPIO_Init+0x30c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x216>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d10 <HAL_GPIO_Init+0x310>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x212>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d14 <HAL_GPIO_Init+0x314>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x20e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d18 <HAL_GPIO_Init+0x318>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x20a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8001d1c <HAL_GPIO_Init+0x31c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x206>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a49      	ldr	r2, [pc, #292]	@ (8001d20 <HAL_GPIO_Init+0x320>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x202>
 8001bfe:	2306      	movs	r3, #6
 8001c00:	e00c      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c02:	2307      	movs	r3, #7
 8001c04:	e00a      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c06:	2305      	movs	r3, #5
 8001c08:	e008      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e004      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x21c>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f002 0203 	and.w	r2, r2, #3
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	4093      	lsls	r3, r2
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c2c:	4935      	ldr	r1, [pc, #212]	@ (8001d04 <HAL_GPIO_Init+0x304>)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d24 <HAL_GPIO_Init+0x324>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c5e:	4a31      	ldr	r2, [pc, #196]	@ (8001d24 <HAL_GPIO_Init+0x324>)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c64:	4b2f      	ldr	r3, [pc, #188]	@ (8001d24 <HAL_GPIO_Init+0x324>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c88:	4a26      	ldr	r2, [pc, #152]	@ (8001d24 <HAL_GPIO_Init+0x324>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c8e:	4b25      	ldr	r3, [pc, #148]	@ (8001d24 <HAL_GPIO_Init+0x324>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d24 <HAL_GPIO_Init+0x324>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <HAL_GPIO_Init+0x324>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cdc:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <HAL_GPIO_Init+0x324>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	f67f ae96 	bls.w	8001a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3724      	adds	r7, #36	@ 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40013800 	.word	0x40013800
 8001d08:	40020000 	.word	0x40020000
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40020c00 	.word	0x40020c00
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40021400 	.word	0x40021400
 8001d20:	40021800 	.word	0x40021800
 8001d24:	40013c00 	.word	0x40013c00

08001d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
 8001d34:	4613      	mov	r3, r2
 8001d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	787b      	ldrb	r3, [r7, #1]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d44:	e003      	b.n	8001d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	619a      	str	r2, [r3, #24]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e12b      	b.n	8001fc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe ff64 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2224      	movs	r2, #36	@ 0x24
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001dae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dc0:	f002 fe1a 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8001dc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a81      	ldr	r2, [pc, #516]	@ (8001fd0 <HAL_I2C_Init+0x274>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d807      	bhi.n	8001de0 <HAL_I2C_Init+0x84>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a80      	ldr	r2, [pc, #512]	@ (8001fd4 <HAL_I2C_Init+0x278>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	bf94      	ite	ls
 8001dd8:	2301      	movls	r3, #1
 8001dda:	2300      	movhi	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	e006      	b.n	8001dee <HAL_I2C_Init+0x92>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4a7d      	ldr	r2, [pc, #500]	@ (8001fd8 <HAL_I2C_Init+0x27c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	bf94      	ite	ls
 8001de8:	2301      	movls	r3, #1
 8001dea:	2300      	movhi	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0e7      	b.n	8001fc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a78      	ldr	r2, [pc, #480]	@ (8001fdc <HAL_I2C_Init+0x280>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9b      	lsrs	r3, r3, #18
 8001e00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a6a      	ldr	r2, [pc, #424]	@ (8001fd0 <HAL_I2C_Init+0x274>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d802      	bhi.n	8001e30 <HAL_I2C_Init+0xd4>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	e009      	b.n	8001e44 <HAL_I2C_Init+0xe8>
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	4a69      	ldr	r2, [pc, #420]	@ (8001fe0 <HAL_I2C_Init+0x284>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	3301      	adds	r3, #1
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	495c      	ldr	r1, [pc, #368]	@ (8001fd0 <HAL_I2C_Init+0x274>)
 8001e60:	428b      	cmp	r3, r1
 8001e62:	d819      	bhi.n	8001e98 <HAL_I2C_Init+0x13c>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e59      	subs	r1, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e72:	1c59      	adds	r1, r3, #1
 8001e74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e78:	400b      	ands	r3, r1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <HAL_I2C_Init+0x138>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e59      	subs	r1, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e92:	e051      	b.n	8001f38 <HAL_I2C_Init+0x1dc>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e04f      	b.n	8001f38 <HAL_I2C_Init+0x1dc>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d111      	bne.n	8001ec4 <HAL_I2C_Init+0x168>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	440b      	add	r3, r1
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e012      	b.n	8001eea <HAL_I2C_Init+0x18e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1e58      	subs	r0, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	0099      	lsls	r1, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Init+0x196>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e022      	b.n	8001f38 <HAL_I2C_Init+0x1dc>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10e      	bne.n	8001f18 <HAL_I2C_Init+0x1bc>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1e58      	subs	r0, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6859      	ldr	r1, [r3, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	440b      	add	r3, r1
 8001f08:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f16:	e00f      	b.n	8001f38 <HAL_I2C_Init+0x1dc>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1e58      	subs	r0, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	0099      	lsls	r1, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	6809      	ldr	r1, [r1, #0]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6911      	ldr	r1, [r2, #16]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68d2      	ldr	r2, [r2, #12]
 8001f72:	4311      	orrs	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	000186a0 	.word	0x000186a0
 8001fd4:	001e847f 	.word	0x001e847f
 8001fd8:	003d08ff 	.word	0x003d08ff
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	10624dd3 	.word	0x10624dd3

08001fe4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	817b      	strh	r3, [r7, #10]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ff8:	f7ff f852 	bl	80010a0 <HAL_GetTick>
 8001ffc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	f040 80e0 	bne.w	80021cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2319      	movs	r3, #25
 8002012:	2201      	movs	r2, #1
 8002014:	4970      	ldr	r1, [pc, #448]	@ (80021d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 ff66 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002022:	2302      	movs	r3, #2
 8002024:	e0d3      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_I2C_Master_Transmit+0x50>
 8002030:	2302      	movs	r3, #2
 8002032:	e0cc      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d007      	beq.n	800205a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002068:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2221      	movs	r2, #33	@ 0x21
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2210      	movs	r2, #16
 8002076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	893a      	ldrh	r2, [r7, #8]
 800208a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a50      	ldr	r2, [pc, #320]	@ (80021dc <HAL_I2C_Master_Transmit+0x1f8>)
 800209a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800209c:	8979      	ldrh	r1, [r7, #10]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	6a3a      	ldr	r2, [r7, #32]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fce8 	bl	8002a78 <I2C_MasterRequestWrite>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e08d      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020c8:	e066      	b.n	8002198 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	6a39      	ldr	r1, [r7, #32]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 ffe0 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00d      	beq.n	80020f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d107      	bne.n	80020f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06b      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	781a      	ldrb	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b04      	cmp	r3, #4
 8002132:	d11b      	bne.n	800216c <HAL_I2C_Master_Transmit+0x188>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d017      	beq.n	800216c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	781a      	ldrb	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	6a39      	ldr	r1, [r7, #32]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 ffd0 	bl	8003116 <I2C_WaitOnBTFFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00d      	beq.n	8002198 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	2b04      	cmp	r3, #4
 8002182:	d107      	bne.n	8002194 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002192:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e01a      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d194      	bne.n	80020ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
  }
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	00100002 	.word	0x00100002
 80021dc:	ffff0000 	.word	0xffff0000

080021e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08c      	sub	sp, #48	@ 0x30
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7fe ff54 	bl	80010a0 <HAL_GetTick>
 80021f8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	f040 820b 	bne.w	800261e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2319      	movs	r3, #25
 800220e:	2201      	movs	r2, #1
 8002210:	497c      	ldr	r1, [pc, #496]	@ (8002404 <HAL_I2C_Master_Receive+0x224>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fe68 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	e1fe      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_I2C_Master_Receive+0x50>
 800222c:	2302      	movs	r3, #2
 800222e:	e1f7      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d007      	beq.n	8002256 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2222      	movs	r2, #34	@ 0x22
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2210      	movs	r2, #16
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	893a      	ldrh	r2, [r7, #8]
 8002286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a5c      	ldr	r2, [pc, #368]	@ (8002408 <HAL_I2C_Master_Receive+0x228>)
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 fc6c 	bl	8002b7c <I2C_MasterRequestRead>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e1b8      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d113      	bne.n	80022de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	623b      	str	r3, [r7, #32]
 80022ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e18c      	b.n	80025f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d11b      	bne.n	800231e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e16c      	b.n	80025f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002322:	2b02      	cmp	r3, #2
 8002324:	d11b      	bne.n	800235e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002334:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	e14c      	b.n	80025f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800236c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002384:	e138      	b.n	80025f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238a:	2b03      	cmp	r3, #3
 800238c:	f200 80f1 	bhi.w	8002572 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	2b01      	cmp	r3, #1
 8002396:	d123      	bne.n	80023e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fefb 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e139      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b29a      	uxth	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023de:	e10b      	b.n	80025f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d14e      	bne.n	8002486 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ee:	2200      	movs	r2, #0
 80023f0:	4906      	ldr	r1, [pc, #24]	@ (800240c <HAL_I2C_Master_Receive+0x22c>)
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fd78 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e10e      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
 8002402:	bf00      	nop
 8002404:	00100002 	.word	0x00100002
 8002408:	ffff0000 	.word	0xffff0000
 800240c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002484:	e0b8      	b.n	80025f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248c:	2200      	movs	r2, #0
 800248e:	4966      	ldr	r1, [pc, #408]	@ (8002628 <HAL_I2C_Master_Receive+0x448>)
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fd29 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0bf      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	2200      	movs	r2, #0
 80024ea:	494f      	ldr	r1, [pc, #316]	@ (8002628 <HAL_I2C_Master_Receive+0x448>)
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fcfb 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e091      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800250a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002570:	e042      	b.n	80025f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002574:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fe0e 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e04c      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d118      	bne.n	80025f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f47f aec2 	bne.w	8002386 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3728      	adds	r7, #40	@ 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	00010004 	.word	0x00010004

0800262c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	@ 0x30
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7fe fd2b 	bl	80010a0 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 8208 	bne.w	8002a6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	497b      	ldr	r1, [pc, #492]	@ (8002850 <HAL_I2C_Mem_Read+0x224>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fc3f 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e1fb      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Read+0x56>
 800267e:	2302      	movs	r3, #2
 8002680:	e1f4      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2222      	movs	r2, #34	@ 0x22
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002854 <HAL_I2C_Mem_Read+0x228>)
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fb0c 	bl	8002d18 <I2C_RequestMemoryRead>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e1b0      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	d113      	bne.n	800273a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e184      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273e:	2b01      	cmp	r3, #1
 8002740:	d11b      	bne.n	800277a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e164      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	2b02      	cmp	r3, #2
 8002780:	d11b      	bne.n	80027ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	e144      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027d0:	e138      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	f200 80f1 	bhi.w	80029be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d123      	bne.n	800282c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fcd5 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e139      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800282a:	e10b      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002830:	2b02      	cmp	r3, #2
 8002832:	d14e      	bne.n	80028d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283a:	2200      	movs	r2, #0
 800283c:	4906      	ldr	r1, [pc, #24]	@ (8002858 <HAL_I2C_Mem_Read+0x22c>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fb52 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e10e      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
 800284e:	bf00      	nop
 8002850:	00100002 	.word	0x00100002
 8002854:	ffff0000 	.word	0xffff0000
 8002858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028d0:	e0b8      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d8:	2200      	movs	r2, #0
 80028da:	4966      	ldr	r1, [pc, #408]	@ (8002a74 <HAL_I2C_Mem_Read+0x448>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fb03 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0bf      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	494f      	ldr	r1, [pc, #316]	@ (8002a74 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fad5 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e091      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029bc:	e042      	b.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fbe8 	bl	8003198 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e04c      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d118      	bne.n	8002a44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f aec2 	bne.w	80027d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3728      	adds	r7, #40	@ 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00010004 	.word	0x00010004

08002a78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	460b      	mov	r3, r1
 8002a86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d006      	beq.n	8002aa2 <I2C_MasterRequestWrite+0x2a>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d003      	beq.n	8002aa2 <I2C_MasterRequestWrite+0x2a>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aa0:	d108      	bne.n	8002ab4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e00b      	b.n	8002acc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	d107      	bne.n	8002acc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fa05 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002af2:	d103      	bne.n	8002afc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e035      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b08:	d108      	bne.n	8002b1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b18:	611a      	str	r2, [r3, #16]
 8002b1a:	e01b      	b.n	8002b54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b1c:	897b      	ldrh	r3, [r7, #10]
 8002b1e:	11db      	asrs	r3, r3, #7
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f003 0306 	and.w	r3, r3, #6
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f063 030f 	orn	r3, r3, #15
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	490e      	ldr	r1, [pc, #56]	@ (8002b74 <I2C_MasterRequestWrite+0xfc>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fa2b 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e010      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4907      	ldr	r1, [pc, #28]	@ (8002b78 <I2C_MasterRequestWrite+0x100>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fa1b 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	00010008 	.word	0x00010008
 8002b78:	00010002 	.word	0x00010002

08002b7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d006      	beq.n	8002bb6 <I2C_MasterRequestRead+0x3a>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d003      	beq.n	8002bb6 <I2C_MasterRequestRead+0x3a>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e00b      	b.n	8002be0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	2b11      	cmp	r3, #17
 8002bce:	d107      	bne.n	8002be0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f97b 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00d      	beq.n	8002c14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c06:	d103      	bne.n	8002c10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e079      	b.n	8002d08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c1c:	d108      	bne.n	8002c30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	611a      	str	r2, [r3, #16]
 8002c2e:	e05f      	b.n	8002cf0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c30:	897b      	ldrh	r3, [r7, #10]
 8002c32:	11db      	asrs	r3, r3, #7
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f003 0306 	and.w	r3, r3, #6
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f063 030f 	orn	r3, r3, #15
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4930      	ldr	r1, [pc, #192]	@ (8002d10 <I2C_MasterRequestRead+0x194>)
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f9a1 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e054      	b.n	8002d08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c5e:	897b      	ldrh	r3, [r7, #10]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4929      	ldr	r1, [pc, #164]	@ (8002d14 <I2C_MasterRequestRead+0x198>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f991 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e044      	b.n	8002d08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f919 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cca:	d103      	bne.n	8002cd4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e017      	b.n	8002d08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cd8:	897b      	ldrh	r3, [r7, #10]
 8002cda:	11db      	asrs	r3, r3, #7
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 0306 	and.w	r3, r3, #6
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f063 030e 	orn	r3, r3, #14
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4907      	ldr	r1, [pc, #28]	@ (8002d14 <I2C_MasterRequestRead+0x198>)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f94d 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00010008 	.word	0x00010008
 8002d14:	00010002 	.word	0x00010002

08002d18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f8c2 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d78:	d103      	bne.n	8002d82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e0aa      	b.n	8002edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	4952      	ldr	r1, [pc, #328]	@ (8002ee4 <I2C_RequestMemoryRead+0x1cc>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f8fa 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e097      	b.n	8002edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc4:	6a39      	ldr	r1, [r7, #32]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f964 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d107      	bne.n	8002dea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e076      	b.n	8002edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df4:	893b      	ldrh	r3, [r7, #8]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e021      	b.n	8002e44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e10:	6a39      	ldr	r1, [r7, #32]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f93e 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d107      	bne.n	8002e36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e050      	b.n	8002edc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3a:	893b      	ldrh	r3, [r7, #8]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e46:	6a39      	ldr	r1, [r7, #32]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f923 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d107      	bne.n	8002e6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e035      	b.n	8002edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f82b 	bl	8002ee8 <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00d      	beq.n	8002eb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea6:	d103      	bne.n	8002eb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e013      	b.n	8002edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eb4:	897b      	ldrh	r3, [r7, #10]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	6a3a      	ldr	r2, [r7, #32]
 8002ec8:	4906      	ldr	r1, [pc, #24]	@ (8002ee4 <I2C_RequestMemoryRead+0x1cc>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f863 	bl	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	00010002 	.word	0x00010002

08002ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	e025      	b.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d021      	beq.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7fe f8cd 	bl	80010a0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e023      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10d      	bne.n	8002f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	e00c      	b.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d0b6      	beq.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa4:	e051      	b.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb4:	d123      	bne.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e046      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d021      	beq.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	f7fe f84b 	bl	80010a0 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	429a      	cmp	r2, r3
 8003014:	d302      	bcc.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d116      	bne.n	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e020      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d10c      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4013      	ands	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e00b      	b.n	8003086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	43da      	mvns	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	4013      	ands	r3, r2
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d18d      	bne.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a0:	e02d      	b.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f8ce 	bl	8003244 <I2C_IsAcknowledgeFailed>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e02d      	b.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d021      	beq.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fd fff1 	bl	80010a0 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d116      	bne.n	80030fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003108:	2b80      	cmp	r3, #128	@ 0x80
 800310a:	d1ca      	bne.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b084      	sub	sp, #16
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003122:	e02d      	b.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f88d 	bl	8003244 <I2C_IsAcknowledgeFailed>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e02d      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d021      	beq.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313c:	f7fd ffb0 	bl	80010a0 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	d302      	bcc.n	8003152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d116      	bne.n	8003180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e007      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d1ca      	bne.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a4:	e042      	b.n	800322c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d119      	bne.n	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0210 	mvn.w	r2, #16
 80031bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e029      	b.n	800323c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7fd ff5a 	bl	80010a0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d116      	bne.n	800322c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	f043 0220 	orr.w	r2, r3, #32
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e007      	b.n	800323c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003236:	2b40      	cmp	r3, #64	@ 0x40
 8003238:	d1b5      	bne.n	80031a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d11b      	bne.n	8003294 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003264:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a4:	b08f      	sub	sp, #60	@ 0x3c
 80032a6:	af0a      	add	r7, sp, #40	@ 0x28
 80032a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e116      	b.n	80034e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f006 f82e 	bl	8009330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 fd27 	bl	8005d46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	687e      	ldr	r6, [r7, #4]
 8003300:	466d      	mov	r5, sp
 8003302:	f106 0410 	add.w	r4, r6, #16
 8003306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800330c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003312:	e885 0003 	stmia.w	r5, {r0, r1}
 8003316:	1d33      	adds	r3, r6, #4
 8003318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800331a:	6838      	ldr	r0, [r7, #0]
 800331c:	f002 fbfe 	bl	8005b1c <USB_CoreInit>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0d7      	b.n	80034e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f002 fd15 	bl	8005d68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	e04a      	b.n	80033da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	333d      	adds	r3, #61	@ 0x3d
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	333c      	adds	r3, #60	@ 0x3c
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	b298      	uxth	r0, r3
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3342      	adds	r3, #66	@ 0x42
 8003380:	4602      	mov	r2, r0
 8003382:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	333f      	adds	r3, #63	@ 0x3f
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3344      	adds	r3, #68	@ 0x44
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3348      	adds	r3, #72	@ 0x48
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3350      	adds	r3, #80	@ 0x50
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3af      	bcc.n	8003344 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e044      	b.n	8003474 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3301      	adds	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d3b5      	bcc.n	80033ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	687e      	ldr	r6, [r7, #4]
 8003486:	466d      	mov	r5, sp
 8003488:	f106 0410 	add.w	r4, r6, #16
 800348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003494:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003498:	e885 0003 	stmia.w	r5, {r0, r1}
 800349c:	1d33      	adds	r3, r6, #4
 800349e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a0:	6838      	ldr	r0, [r7, #0]
 80034a2:	f002 fcad 	bl	8005e00 <USB_DevInit>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e014      	b.n	80034e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d102      	bne.n	80034d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 f869 	bl	80045a8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fc40 	bl	8006d60 <USB_DevDisconnect>

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_PCD_Start+0x1c>
 8003502:	2302      	movs	r3, #2
 8003504:	e020      	b.n	8003548 <HAL_PCD_Start+0x5e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	2b01      	cmp	r3, #1
 8003514:	d109      	bne.n	800352a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800351a:	2b01      	cmp	r3, #1
 800351c:	d005      	beq.n	800352a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003522:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f002 fbf8 	bl	8005d24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f003 fbf0 	bl	8006d1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_PCD_Stop+0x1c>
 8003568:	2302      	movs	r3, #2
 800356a:	e026      	b.n	80035ba <HAL_PCD_Stop+0x6a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f002 fbe4 	bl	8005d46 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f003 fbec 	bl	8006d60 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2110      	movs	r1, #16
 800358e:	4618      	mov	r0, r3
 8003590:	f002 fd94 	bl	80060bc <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	2b01      	cmp	r3, #1
 800359a:	d109      	bne.n	80035b0 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d005      	beq.n	80035b0 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035c2:	b590      	push	{r4, r7, lr}
 80035c4:	b08d      	sub	sp, #52	@ 0x34
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 fc75 	bl	8006ec8 <USB_GetMode>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 83ca 	bne.w	8003d7a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f003 fbd9 	bl	8006da2 <USB_ReadInterrupts>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 83c0 	beq.w	8003d78 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f003 fbd0 	bl	8006da2 <USB_ReadInterrupts>
 8003602:	4603      	mov	r3, r0
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b02      	cmp	r3, #2
 800360a:	d107      	bne.n	800361c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695a      	ldr	r2, [r3, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f002 0202 	and.w	r2, r2, #2
 800361a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f003 fbbe 	bl	8006da2 <USB_ReadInterrupts>
 8003626:	4603      	mov	r3, r0
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b10      	cmp	r3, #16
 800362e:	d161      	bne.n	80036f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0210 	bic.w	r2, r2, #16
 800363e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 020f 	and.w	r2, r3, #15
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	3304      	adds	r3, #4
 800365e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003666:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800366a:	d124      	bne.n	80036b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d035      	beq.n	80036e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6a38      	ldr	r0, [r7, #32]
 800368c:	f003 f9f5 	bl	8006a7a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	091b      	lsrs	r3, r3, #4
 8003698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369c:	441a      	add	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ae:	441a      	add	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	619a      	str	r2, [r3, #24]
 80036b4:	e016      	b.n	80036e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80036bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80036c0:	d110      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80036c8:	2208      	movs	r2, #8
 80036ca:	4619      	mov	r1, r3
 80036cc:	6a38      	ldr	r0, [r7, #32]
 80036ce:	f003 f9d4 	bl	8006a7a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036de:	441a      	add	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0210 	orr.w	r2, r2, #16
 80036f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 fb52 	bl	8006da2 <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003704:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003708:	d16e      	bne.n	80037e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fb58 	bl	8006dc8 <USB_ReadDevAllOutEpInterrupt>
 8003718:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800371a:	e062      	b.n	80037e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800371c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d057      	beq.n	80037d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f003 fb7d 	bl	8006e30 <USB_ReadDevOutEPInterrupt>
 8003736:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800374e:	461a      	mov	r2, r3
 8003750:	2301      	movs	r3, #1
 8003752:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003754:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fd7c 	bl	8004254 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00c      	beq.n	8003780 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003772:	461a      	mov	r2, r3
 8003774:	2308      	movs	r3, #8
 8003776:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003778:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fe76 	bl	800446c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003796:	461a      	mov	r2, r3
 8003798:	2310      	movs	r3, #16
 800379a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b2:	461a      	mov	r2, r3
 80037b4:	2320      	movs	r3, #32
 80037b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ce:	461a      	mov	r2, r3
 80037d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	3301      	adds	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d199      	bne.n	800371c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f003 fad8 	bl	8006da2 <USB_ReadInterrupts>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037fc:	f040 80c0 	bne.w	8003980 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 faf9 	bl	8006dfc <USB_ReadDevAllInEpInterrupt>
 800380a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003810:	e0b2      	b.n	8003978 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80a7 	beq.w	800396c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f003 fb1f 	bl	8006e6c <USB_ReadDevInEPInterrupt>
 800382e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d057      	beq.n	80038ea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	2201      	movs	r2, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800384e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43db      	mvns	r3, r3
 8003854:	69f9      	ldr	r1, [r7, #28]
 8003856:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800385a:	4013      	ands	r3, r2
 800385c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800386a:	461a      	mov	r2, r3
 800386c:	2301      	movs	r3, #1
 800386e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d132      	bne.n	80038de <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	3348      	adds	r3, #72	@ 0x48
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4403      	add	r3, r0
 8003898:	3344      	adds	r3, #68	@ 0x44
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4419      	add	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4403      	add	r3, r0
 80038ac:	3348      	adds	r3, #72	@ 0x48
 80038ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d113      	bne.n	80038de <HAL_PCD_IRQHandler+0x31c>
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3350      	adds	r3, #80	@ 0x50
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d108      	bne.n	80038de <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80038d6:	461a      	mov	r2, r3
 80038d8:	2101      	movs	r1, #1
 80038da:	f003 fb27 	bl	8006f2c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f005 fdc6 	bl	8009476 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d008      	beq.n	8003906 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003900:	461a      	mov	r2, r3
 8003902:	2308      	movs	r3, #8
 8003904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800391c:	461a      	mov	r2, r3
 800391e:	2310      	movs	r3, #16
 8003920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003938:	461a      	mov	r2, r3
 800393a:	2340      	movs	r3, #64	@ 0x40
 800393c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003954:	461a      	mov	r2, r3
 8003956:	2302      	movs	r3, #2
 8003958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003964:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fbe6 	bl	8004138 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	3301      	adds	r3, #1
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	2b00      	cmp	r3, #0
 800397c:	f47f af49 	bne.w	8003812 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f003 fa0c 	bl	8006da2 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003994:	d122      	bne.n	80039dc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039a4:	f023 0301 	bic.w	r3, r3, #1
 80039a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d108      	bne.n	80039c6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039bc:	2100      	movs	r1, #0
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fe16 	bl	80045f0 <HAL_PCDEx_LPM_Callback>
 80039c4:	e002      	b.n	80039cc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f005 fdc2 	bl	8009550 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80039da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f003 f9de 	bl	8006da2 <USB_ReadInterrupts>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f0:	d112      	bne.n	8003a18 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f005 fd7e 	bl	8009504 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003a16:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f003 f9c0 	bl	8006da2 <USB_ReadInterrupts>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a2c:	d121      	bne.n	8003a72 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003a3c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d111      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a62:	2101      	movs	r1, #1
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fdc3 	bl	80045f0 <HAL_PCDEx_LPM_Callback>
 8003a6a:	e002      	b.n	8003a72 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f005 fd49 	bl	8009504 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 f993 	bl	8006da2 <USB_ReadInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a86:	f040 80c7 	bne.w	8003c18 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 fb09 	bl	80060bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aaa:	2300      	movs	r3, #0
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aae:	e056      	b.n	8003b5e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003abc:	461a      	mov	r2, r3
 8003abe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ac2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ad4:	0151      	lsls	r1, r2, #5
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	440a      	add	r2, r1
 8003ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ade:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ae2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003afe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b16:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b56:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d3a3      	bcc.n	8003ab0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b76:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003b7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d016      	beq.n	8003bb2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b94:	f043 030b 	orr.w	r3, r3, #11
 8003b98:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003baa:	f043 030b 	orr.w	r3, r3, #11
 8003bae:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bb0:	e015      	b.n	8003bde <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bc4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003bc8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd8:	f043 030b 	orr.w	r3, r3, #11
 8003bdc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003bf0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c02:	461a      	mov	r2, r3
 8003c04:	f003 f992 	bl	8006f2c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f003 f8c0 	bl	8006da2 <USB_ReadInterrupts>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2c:	d124      	bne.n	8003c78 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 f956 	bl	8006ee4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f002 fa9a 	bl	8006176 <USB_GetDevSpeed>
 8003c42:	4603      	mov	r3, r0
 8003c44:	461a      	mov	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681c      	ldr	r4, [r3, #0]
 8003c4e:	f000 fec7 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8003c52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f001 ffbf 	bl	8005be0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f005 fc2f 	bl	80094c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 f890 	bl	8006da2 <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10a      	bne.n	8003ca2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f005 fc0c 	bl	80094aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f002 0208 	and.w	r2, r2, #8
 8003ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 f87b 	bl	8006da2 <USB_ReadInterrupts>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cb6:	d10f      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f005 fc64 	bl	8009590 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f003 f860 	bl	8006da2 <USB_ReadInterrupts>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cec:	d10f      	bne.n	8003d0e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f005 fc37 	bl	800956c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f003 f845 	bl	8006da2 <USB_ReadInterrupts>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d22:	d10a      	bne.n	8003d3a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f005 fc45 	bl	80095b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f003 f82f 	bl	8006da2 <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d115      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f005 fc35 	bl	80095d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	e000      	b.n	8003d7a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003d78:	bf00      	nop
    }
  }
}
 8003d7a:	3734      	adds	r7, #52	@ 0x34
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}

08003d80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_PCD_SetAddress+0x1a>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e013      	b.n	8003dc2 <HAL_PCD_SetAddress+0x42>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f002 ff8d 	bl	8006cd2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4603      	mov	r3, r0
 8003dda:	70fb      	strb	r3, [r7, #3]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	803b      	strh	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da0f      	bge.n	8003e10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3338      	adds	r3, #56	@ 0x38
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	3304      	adds	r3, #4
 8003e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	705a      	strb	r2, [r3, #1]
 8003e0e:	e00f      	b.n	8003e30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	3304      	adds	r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e3c:	883a      	ldrh	r2, [r7, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	78ba      	ldrb	r2, [r7, #2]
 8003e46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	785b      	ldrb	r3, [r3, #1]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e5a:	78bb      	ldrb	r3, [r7, #2]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d102      	bne.n	8003e66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_PCD_EP_Open+0xaa>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e00e      	b.n	8003e92 <HAL_PCD_EP_Open+0xc8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f002 f99c 	bl	80061c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8003e90:	7afb      	ldrb	r3, [r7, #11]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b086      	sub	sp, #24
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	f003 020f 	and.w	r2, r3, #15
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003edc:	7afb      	ldrb	r3, [r7, #11]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ef6:	7afb      	ldrb	r3, [r7, #11]
 8003ef8:	f003 030f 	and.w	r3, r3, #15
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6979      	ldr	r1, [r7, #20]
 8003f0e:	f002 fc23 	bl	8006758 <USB_EP0StartXfer>
 8003f12:	e008      	b.n	8003f26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6979      	ldr	r1, [r7, #20]
 8003f22:	f002 f9d5 	bl	80062d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f40:	7afb      	ldrb	r3, [r7, #11]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	3338      	adds	r3, #56	@ 0x38
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f70:	7afb      	ldrb	r3, [r7, #11]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d102      	bne.n	8003f8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6979      	ldr	r1, [r7, #20]
 8003fa2:	f002 fbd9 	bl	8006758 <USB_EP0StartXfer>
 8003fa6:	e008      	b.n	8003fba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6979      	ldr	r1, [r7, #20]
 8003fb6:	f002 f98b 	bl	80062d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d901      	bls.n	8003fe2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e050      	b.n	8004084 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da0f      	bge.n	800400a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	3338      	adds	r3, #56	@ 0x38
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3304      	adds	r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	705a      	strb	r2, [r3, #1]
 8004008:	e00d      	b.n	8004026 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	3304      	adds	r3, #4
 800401e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2201      	movs	r2, #1
 800402a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_PCD_EP_SetStall+0x82>
 8004042:	2302      	movs	r3, #2
 8004044:	e01e      	b.n	8004084 <HAL_PCD_EP_SetStall+0xc0>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	4618      	mov	r0, r3
 8004056:	f002 fd68 	bl	8006b2a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 030f 	and.w	r3, r3, #15
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	b2d9      	uxtb	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004074:	461a      	mov	r2, r3
 8004076:	f002 ff59 	bl	8006f2c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 020f 	and.w	r2, r3, #15
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d901      	bls.n	80040aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e042      	b.n	8004130 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da0f      	bge.n	80040d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	3338      	adds	r3, #56	@ 0x38
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	3304      	adds	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	705a      	strb	r2, [r3, #1]
 80040d0:	e00f      	b.n	80040f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	3304      	adds	r3, #4
 80040ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_PCD_EP_ClrStall+0x86>
 800410e:	2302      	movs	r3, #2
 8004110:	e00e      	b.n	8004130 <HAL_PCD_EP_ClrStall+0xa4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	4618      	mov	r0, r3
 8004122:	f002 fd70 	bl	8006c06 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	3338      	adds	r3, #56	@ 0x38
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	429a      	cmp	r2, r3
 800416a:	d901      	bls.n	8004170 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e06c      	b.n	800424a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	429a      	cmp	r2, r3
 8004184:	d902      	bls.n	800418c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	3303      	adds	r3, #3
 8004190:	089b      	lsrs	r3, r3, #2
 8004192:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004194:	e02b      	b.n	80041ee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d902      	bls.n	80041b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3303      	adds	r3, #3
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	68d9      	ldr	r1, [r3, #12]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	4603      	mov	r3, r0
 80041d0:	6978      	ldr	r0, [r7, #20]
 80041d2:	f002 fc14 	bl	80069fe <USB_WritePacket>

    ep->xfer_buff  += len;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	441a      	add	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699a      	ldr	r2, [r3, #24]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	429a      	cmp	r2, r3
 8004202:	d809      	bhi.n	8004218 <PCD_WriteEmptyTxFifo+0xe0>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699a      	ldr	r2, [r3, #24]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800420c:	429a      	cmp	r2, r3
 800420e:	d203      	bcs.n	8004218 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1be      	bne.n	8004196 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	429a      	cmp	r2, r3
 8004222:	d811      	bhi.n	8004248 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	2201      	movs	r2, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	43db      	mvns	r3, r3
 800423e:	6939      	ldr	r1, [r7, #16]
 8004240:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004244:	4013      	ands	r3, r2
 8004246:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	333c      	adds	r3, #60	@ 0x3c
 800426c:	3304      	adds	r3, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b01      	cmp	r3, #1
 8004288:	f040 80a0 	bne.w	80043cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d015      	beq.n	80042c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a72      	ldr	r2, [pc, #456]	@ (8004464 <PCD_EP_OutXfrComplete_int+0x210>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f240 80dd 	bls.w	800445a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80d7 	beq.w	800445a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042be:	6093      	str	r3, [r2, #8]
 80042c0:	e0cb      	b.n	800445a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d8:	461a      	mov	r2, r3
 80042da:	2320      	movs	r3, #32
 80042dc:	6093      	str	r3, [r2, #8]
 80042de:	e0bc      	b.n	800445a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f040 80b7 	bne.w	800445a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a5d      	ldr	r2, [pc, #372]	@ (8004464 <PCD_EP_OutXfrComplete_int+0x210>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d90f      	bls.n	8004314 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430a:	461a      	mov	r2, r3
 800430c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004310:	6093      	str	r3, [r2, #8]
 8004312:	e0a2      	b.n	800445a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8004326:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	0159      	lsls	r1, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	440b      	add	r3, r1
 8004330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800433a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4403      	add	r3, r0
 800434a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800434e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004362:	6819      	ldr	r1, [r3, #0]
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4403      	add	r3, r0
 8004372:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4419      	add	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4403      	add	r3, r0
 8004388:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800438c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d114      	bne.n	80043be <PCD_EP_OutXfrComplete_int+0x16a>
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d108      	bne.n	80043be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80043b6:	461a      	mov	r2, r3
 80043b8:	2101      	movs	r1, #1
 80043ba:	f002 fdb7 	bl	8006f2c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f005 f83b 	bl	8009440 <HAL_PCD_DataOutStageCallback>
 80043ca:	e046      	b.n	800445a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a26      	ldr	r2, [pc, #152]	@ (8004468 <PCD_EP_OutXfrComplete_int+0x214>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d124      	bne.n	800441e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ea:	461a      	mov	r2, r3
 80043ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043f0:	6093      	str	r3, [r2, #8]
 80043f2:	e032      	b.n	800445a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	2320      	movs	r3, #32
 800440e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f005 f812 	bl	8009440 <HAL_PCD_DataOutStageCallback>
 800441c:	e01d      	b.n	800445a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d114      	bne.n	800444e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d108      	bne.n	800444e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004446:	461a      	mov	r2, r3
 8004448:	2100      	movs	r1, #0
 800444a:	f002 fd6f 	bl	8006f2c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f004 fff3 	bl	8009440 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	4f54300a 	.word	0x4f54300a
 8004468:	4f54310a 	.word	0x4f54310a

0800446c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	333c      	adds	r3, #60	@ 0x3c
 8004484:	3304      	adds	r3, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a15      	ldr	r2, [pc, #84]	@ (80044f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d90e      	bls.n	80044c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b8:	461a      	mov	r2, r3
 80044ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f004 ffab 	bl	800941c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a0a      	ldr	r2, [pc, #40]	@ (80044f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d90c      	bls.n	80044e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d108      	bne.n	80044e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80044e0:	461a      	mov	r2, r3
 80044e2:	2101      	movs	r1, #1
 80044e4:	f002 fd22 	bl	8006f2c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	4f54300a 	.word	0x4f54300a

080044f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
 8004504:	4613      	mov	r3, r2
 8004506:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d107      	bne.n	8004526 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004516:	883b      	ldrh	r3, [r7, #0]
 8004518:	0419      	lsls	r1, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	430a      	orrs	r2, r1
 8004522:	629a      	str	r2, [r3, #40]	@ 0x28
 8004524:	e028      	b.n	8004578 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4413      	add	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e00d      	b.n	8004556 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	3340      	adds	r3, #64	@ 0x40
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4413      	add	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	3301      	adds	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	3b01      	subs	r3, #1
 800455c:	429a      	cmp	r2, r3
 800455e:	d3ec      	bcc.n	800453a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004560:	883b      	ldrh	r3, [r7, #0]
 8004562:	0418      	lsls	r0, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6819      	ldr	r1, [r3, #0]
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	3b01      	subs	r3, #1
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	4302      	orrs	r2, r0
 8004570:	3340      	adds	r3, #64	@ 0x40
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045da:	f043 0303 	orr.w	r3, r3, #3
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0cc      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800461c:	4b68      	ldr	r3, [pc, #416]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d90c      	bls.n	8004644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b65      	ldr	r3, [pc, #404]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b63      	ldr	r3, [pc, #396]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0b8      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b59      	ldr	r3, [pc, #356]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a58      	ldr	r2, [pc, #352]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004674:	4b53      	ldr	r3, [pc, #332]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a52      	ldr	r2, [pc, #328]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800467e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b50      	ldr	r3, [pc, #320]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	494d      	ldr	r1, [pc, #308]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d044      	beq.n	8004728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b47      	ldr	r3, [pc, #284]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d119      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b3f      	ldr	r3, [pc, #252]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	4b3b      	ldr	r3, [pc, #236]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e067      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b37      	ldr	r3, [pc, #220]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4934      	ldr	r1, [pc, #208]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f8:	f7fc fcd2 	bl	80010a0 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fc fcce 	bl	80010a0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e04f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2b      	ldr	r3, [pc, #172]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d20c      	bcs.n	8004750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b22      	ldr	r3, [pc, #136]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b20      	ldr	r3, [pc, #128]	@ (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e032      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475c:	4b19      	ldr	r3, [pc, #100]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4916      	ldr	r1, [pc, #88]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477a:	4b12      	ldr	r3, [pc, #72]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	490e      	ldr	r1, [pc, #56]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478e:	f000 f821 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 8004792:	4602      	mov	r2, r0
 8004794:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	490a      	ldr	r1, [pc, #40]	@ (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	5ccb      	ldrb	r3, [r1, r3]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	4a09      	ldr	r2, [pc, #36]	@ (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fc fc32 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00
 80047c4:	40023800 	.word	0x40023800
 80047c8:	08009a84 	.word	0x08009a84
 80047cc:	20000000 	.word	0x20000000
 80047d0:	20000004 	.word	0x20000004

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b094      	sub	sp, #80	@ 0x50
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e0:	2300      	movs	r3, #0
 80047e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e4:	2300      	movs	r3, #0
 80047e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	4b79      	ldr	r3, [pc, #484]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d00d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x40>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	f200 80e1 	bhi.w	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x34>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x3a>
 8004806:	e0db      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b73      	ldr	r3, [pc, #460]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800480a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800480c:	e0db      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4b73      	ldr	r3, [pc, #460]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004810:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004812:	e0d8      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4b6f      	ldr	r3, [pc, #444]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800481c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481e:	4b6d      	ldr	r3, [pc, #436]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b6a      	ldr	r3, [pc, #424]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	2200      	movs	r2, #0
 8004832:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004834:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483c:	633b      	str	r3, [r7, #48]	@ 0x30
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
 8004842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004846:	4622      	mov	r2, r4
 8004848:	462b      	mov	r3, r5
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	0159      	lsls	r1, r3, #5
 8004854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004858:	0150      	lsls	r0, r2, #5
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4621      	mov	r1, r4
 8004860:	1a51      	subs	r1, r2, r1
 8004862:	6139      	str	r1, [r7, #16]
 8004864:	4629      	mov	r1, r5
 8004866:	eb63 0301 	sbc.w	r3, r3, r1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004878:	4659      	mov	r1, fp
 800487a:	018b      	lsls	r3, r1, #6
 800487c:	4651      	mov	r1, sl
 800487e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004882:	4651      	mov	r1, sl
 8004884:	018a      	lsls	r2, r1, #6
 8004886:	4651      	mov	r1, sl
 8004888:	ebb2 0801 	subs.w	r8, r2, r1
 800488c:	4659      	mov	r1, fp
 800488e:	eb63 0901 	sbc.w	r9, r3, r1
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a6:	4690      	mov	r8, r2
 80048a8:	4699      	mov	r9, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	eb18 0303 	adds.w	r3, r8, r3
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	462b      	mov	r3, r5
 80048b4:	eb49 0303 	adc.w	r3, r9, r3
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048c6:	4629      	mov	r1, r5
 80048c8:	024b      	lsls	r3, r1, #9
 80048ca:	4621      	mov	r1, r4
 80048cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d0:	4621      	mov	r1, r4
 80048d2:	024a      	lsls	r2, r1, #9
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048da:	2200      	movs	r2, #0
 80048dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048e4:	f7fb fc98 	bl	8000218 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f0:	e058      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f2:	4b38      	ldr	r3, [pc, #224]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	2200      	movs	r2, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	4611      	mov	r1, r2
 80048fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
 8004908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	f04f 0000 	mov.w	r0, #0
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491e:	0150      	lsls	r0, r2, #5
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4641      	mov	r1, r8
 8004926:	ebb2 0a01 	subs.w	sl, r2, r1
 800492a:	4649      	mov	r1, r9
 800492c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800493c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004944:	ebb2 040a 	subs.w	r4, r2, sl
 8004948:	eb63 050b 	sbc.w	r5, r3, fp
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	00eb      	lsls	r3, r5, #3
 8004956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495a:	00e2      	lsls	r2, r4, #3
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	4643      	mov	r3, r8
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	464b      	mov	r3, r9
 8004968:	eb45 0303 	adc.w	r3, r5, r3
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800497a:	4629      	mov	r1, r5
 800497c:	028b      	lsls	r3, r1, #10
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004984:	4621      	mov	r1, r4
 8004986:	028a      	lsls	r2, r1, #10
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	61fa      	str	r2, [r7, #28]
 8004994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004998:	f7fb fc3e 	bl	8000218 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049a4:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	3301      	adds	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80049b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049be:	e002      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3750      	adds	r7, #80	@ 0x50
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	00f42400 	.word	0x00f42400
 80049dc:	007a1200 	.word	0x007a1200

080049e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e4:	4b03      	ldr	r3, [pc, #12]	@ (80049f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000000 	.word	0x20000000

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff0 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0a9b      	lsrs	r3, r3, #10
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	@ (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	08009a94 	.word	0x08009a94

08004a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a24:	f7ff ffdc 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0b5b      	lsrs	r3, r3, #13
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	08009a94 	.word	0x08009a94

08004a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004a6c:	4b7a      	ldr	r3, [pc, #488]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a72:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	4977      	ldr	r1, [pc, #476]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d010      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004a9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aa0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	496b      	ldr	r1, [pc, #428]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d022      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004ac8:	4b63      	ldr	r3, [pc, #396]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad6:	4960      	ldr	r1, [pc, #384]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004af2:	d10c      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004af4:	4b58      	ldr	r3, [pc, #352]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004afa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	4954      	ldr	r1, [pc, #336]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d022      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b20:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b28:	494b      	ldr	r1, [pc, #300]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004b46:	4b44      	ldr	r3, [pc, #272]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	493f      	ldr	r1, [pc, #252]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 808a 	beq.w	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	4b39      	ldr	r3, [pc, #228]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	4a38      	ldr	r2, [pc, #224]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b7e:	4b36      	ldr	r3, [pc, #216]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b8a:	4b34      	ldr	r3, [pc, #208]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a33      	ldr	r2, [pc, #204]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b96:	f7fc fa83 	bl	80010a0 <HAL_GetTick>
 8004b9a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fc fa7f 	bl	80010a0 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1d1      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bbc:	4b26      	ldr	r3, [pc, #152]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02f      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d028      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bda:	4b1f      	ldr	r3, [pc, #124]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004be4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bea:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bf6:	4b18      	ldr	r3, [pc, #96]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d114      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c02:	f7fc fa4d 	bl	80010a0 <HAL_GetTick>
 8004c06:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fc fa49 	bl	80010a0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e199      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c20:	4b0d      	ldr	r3, [pc, #52]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0ee      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c38:	d114      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004c3a:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4e:	4902      	ldr	r1, [pc, #8]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	608b      	str	r3, [r1, #8]
 8004c54:	e00c      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40007000 	.word	0x40007000
 8004c60:	42470e40 	.word	0x42470e40
 8004c64:	4b89      	ldr	r3, [pc, #548]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a88      	ldr	r2, [pc, #544]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c6a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c6e:	6093      	str	r3, [r2, #8]
 8004c70:	4b86      	ldr	r3, [pc, #536]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7c:	4983      	ldr	r1, [pc, #524]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8004c94:	4b7e      	ldr	r3, [pc, #504]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004c96:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004ca4:	4b79      	ldr	r3, [pc, #484]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004caa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	4976      	ldr	r1, [pc, #472]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d011      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cc6:	4b71      	ldr	r3, [pc, #452]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ccc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	496d      	ldr	r1, [pc, #436]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce4:	d101      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004cf6:	4b65      	ldr	r3, [pc, #404]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cfc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d04:	4961      	ldr	r1, [pc, #388]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d004      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b80      	cmp	r3, #128	@ 0x80
 8004d18:	f040 80c6 	bne.w	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d1c:	4b5d      	ldr	r3, [pc, #372]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fc f9bd 	bl	80010a0 <HAL_GetTick>
 8004d26:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d2a:	f7fc f9b9 	bl	80010a0 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e10b      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d3c:	4b53      	ldr	r3, [pc, #332]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004d48:	4a53      	ldr	r2, [pc, #332]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d023      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d019      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d8c:	d00e      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d019      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d115      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004daa:	d110      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	061b      	lsls	r3, r3, #24
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	4931      	ldr	r1, [pc, #196]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d026      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d122      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004df6:	4b25      	ldr	r3, [pc, #148]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	061b      	lsls	r3, r3, #24
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	071b      	lsls	r3, r3, #28
 8004e1c:	491b      	ldr	r1, [pc, #108]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004e24:	4b19      	ldr	r3, [pc, #100]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e2a:	f023 021f 	bic.w	r2, r3, #31
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	4915      	ldr	r1, [pc, #84]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d010      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	019b      	lsls	r3, r3, #6
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	061b      	lsls	r3, r3, #24
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	071b      	lsls	r3, r3, #28
 8004e62:	490a      	ldr	r1, [pc, #40]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e70:	f7fc f916 	bl	80010a0 <HAL_GetTick>
 8004e74:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e76:	e011      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e78:	f7fc f912 	bl	80010a0 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d90a      	bls.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e064      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	424711e0 	.word	0x424711e0
 8004e94:	42470068 	.word	0x42470068
 8004e98:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0e7      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eb4:	4b29      	ldr	r3, [pc, #164]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec2:	4926      	ldr	r1, [pc, #152]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ed6:	4b21      	ldr	r3, [pc, #132]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004edc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	491d      	ldr	r1, [pc, #116]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004ef8:	4b18      	ldr	r3, [pc, #96]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004efe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f06:	4915      	ldr	r1, [pc, #84]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004f1a:	4b10      	ldr	r3, [pc, #64]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f20:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f28:	490c      	ldr	r1, [pc, #48]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3c:	4b07      	ldr	r3, [pc, #28]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f42:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4a:	4904      	ldr	r1, [pc, #16]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800

08004f60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e273      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d075      	beq.n	800506a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f7e:	4b88      	ldr	r3, [pc, #544]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d00c      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f8a:	4b85      	ldr	r3, [pc, #532]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d112      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f96:	4b82      	ldr	r3, [pc, #520]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa2:	d10b      	bne.n	8004fbc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa4:	4b7e      	ldr	r3, [pc, #504]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d05b      	beq.n	8005068 <HAL_RCC_OscConfig+0x108>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d157      	bne.n	8005068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e24e      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc4:	d106      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x74>
 8004fc6:	4b76      	ldr	r3, [pc, #472]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a75      	ldr	r2, [pc, #468]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e01d      	b.n	8005010 <HAL_RCC_OscConfig+0xb0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x98>
 8004fde:	4b70      	ldr	r3, [pc, #448]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a6f      	ldr	r2, [pc, #444]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	4b6d      	ldr	r3, [pc, #436]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6c      	ldr	r2, [pc, #432]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e00b      	b.n	8005010 <HAL_RCC_OscConfig+0xb0>
 8004ff8:	4b69      	ldr	r3, [pc, #420]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a68      	ldr	r2, [pc, #416]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	4b66      	ldr	r3, [pc, #408]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a65      	ldr	r2, [pc, #404]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 800500a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800500e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d013      	beq.n	8005040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fc f842 	bl	80010a0 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005020:	f7fc f83e 	bl	80010a0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b64      	cmp	r3, #100	@ 0x64
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e213      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005032:	4b5b      	ldr	r3, [pc, #364]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0xc0>
 800503e:	e014      	b.n	800506a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fc f82e 	bl	80010a0 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005048:	f7fc f82a 	bl	80010a0 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	@ 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1ff      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505a:	4b51      	ldr	r3, [pc, #324]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0xe8>
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d063      	beq.n	800513e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005076:	4b4a      	ldr	r3, [pc, #296]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005082:	4b47      	ldr	r3, [pc, #284]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800508a:	2b08      	cmp	r3, #8
 800508c:	d11c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800508e:	4b44      	ldr	r3, [pc, #272]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d116      	bne.n	80050c8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	4b41      	ldr	r3, [pc, #260]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_RCC_OscConfig+0x152>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d001      	beq.n	80050b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e1d3      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b2:	4b3b      	ldr	r3, [pc, #236]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4937      	ldr	r1, [pc, #220]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	e03a      	b.n	800513e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d020      	beq.n	8005112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050d0:	4b34      	ldr	r3, [pc, #208]	@ (80051a4 <HAL_RCC_OscConfig+0x244>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d6:	f7fb ffe3 	bl	80010a0 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050dc:	e008      	b.n	80050f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050de:	f7fb ffdf 	bl	80010a0 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e1b4      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f0:	4b2b      	ldr	r3, [pc, #172]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0f0      	beq.n	80050de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fc:	4b28      	ldr	r3, [pc, #160]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4925      	ldr	r1, [pc, #148]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
 8005110:	e015      	b.n	800513e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005112:	4b24      	ldr	r3, [pc, #144]	@ (80051a4 <HAL_RCC_OscConfig+0x244>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fb ffc2 	bl	80010a0 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005120:	f7fb ffbe 	bl	80010a0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e193      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005132:	4b1b      	ldr	r3, [pc, #108]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d036      	beq.n	80051b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005152:	4b15      	ldr	r3, [pc, #84]	@ (80051a8 <HAL_RCC_OscConfig+0x248>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fb ffa2 	bl	80010a0 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005160:	f7fb ff9e 	bl	80010a0 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e173      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005172:	4b0b      	ldr	r3, [pc, #44]	@ (80051a0 <HAL_RCC_OscConfig+0x240>)
 8005174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x200>
 800517e:	e01b      	b.n	80051b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005180:	4b09      	ldr	r3, [pc, #36]	@ (80051a8 <HAL_RCC_OscConfig+0x248>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fb ff8b 	bl	80010a0 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	e00e      	b.n	80051ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800518e:	f7fb ff87 	bl	80010a0 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d907      	bls.n	80051ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e15c      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
 80051a0:	40023800 	.word	0x40023800
 80051a4:	42470000 	.word	0x42470000
 80051a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ac:	4b8a      	ldr	r3, [pc, #552]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80051ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ea      	bne.n	800518e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8097 	beq.w	80052f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c6:	2300      	movs	r3, #0
 80051c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ca:	4b83      	ldr	r3, [pc, #524]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10f      	bne.n	80051f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	2300      	movs	r3, #0
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	4b7f      	ldr	r3, [pc, #508]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	4a7e      	ldr	r2, [pc, #504]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80051e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80051e6:	4b7c      	ldr	r3, [pc, #496]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f6:	4b79      	ldr	r3, [pc, #484]	@ (80053dc <HAL_RCC_OscConfig+0x47c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d118      	bne.n	8005234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005202:	4b76      	ldr	r3, [pc, #472]	@ (80053dc <HAL_RCC_OscConfig+0x47c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a75      	ldr	r2, [pc, #468]	@ (80053dc <HAL_RCC_OscConfig+0x47c>)
 8005208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520e:	f7fb ff47 	bl	80010a0 <HAL_GetTick>
 8005212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005216:	f7fb ff43 	bl	80010a0 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e118      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005228:	4b6c      	ldr	r3, [pc, #432]	@ (80053dc <HAL_RCC_OscConfig+0x47c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d106      	bne.n	800524a <HAL_RCC_OscConfig+0x2ea>
 800523c:	4b66      	ldr	r3, [pc, #408]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005240:	4a65      	ldr	r2, [pc, #404]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	6713      	str	r3, [r2, #112]	@ 0x70
 8005248:	e01c      	b.n	8005284 <HAL_RCC_OscConfig+0x324>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b05      	cmp	r3, #5
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0x30c>
 8005252:	4b61      	ldr	r3, [pc, #388]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005256:	4a60      	ldr	r2, [pc, #384]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005258:	f043 0304 	orr.w	r3, r3, #4
 800525c:	6713      	str	r3, [r2, #112]	@ 0x70
 800525e:	4b5e      	ldr	r3, [pc, #376]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005262:	4a5d      	ldr	r2, [pc, #372]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6713      	str	r3, [r2, #112]	@ 0x70
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0x324>
 800526c:	4b5a      	ldr	r3, [pc, #360]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	4a59      	ldr	r2, [pc, #356]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	6713      	str	r3, [r2, #112]	@ 0x70
 8005278:	4b57      	ldr	r3, [pc, #348]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527c:	4a56      	ldr	r2, [pc, #344]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 800527e:	f023 0304 	bic.w	r3, r3, #4
 8005282:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d015      	beq.n	80052b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fb ff08 	bl	80010a0 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005294:	f7fb ff04 	bl	80010a0 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0d7      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052aa:	4b4b      	ldr	r3, [pc, #300]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ee      	beq.n	8005294 <HAL_RCC_OscConfig+0x334>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fb fef2 	bl	80010a0 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7fb feee 	bl	80010a0 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0c1      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d6:	4b40      	ldr	r3, [pc, #256]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1ee      	bne.n	80052c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e8:	4b3b      	ldr	r3, [pc, #236]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	4a3a      	ldr	r2, [pc, #232]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80052ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80ad 	beq.w	8005458 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052fe:	4b36      	ldr	r3, [pc, #216]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b08      	cmp	r3, #8
 8005308:	d060      	beq.n	80053cc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d145      	bne.n	800539e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005312:	4b33      	ldr	r3, [pc, #204]	@ (80053e0 <HAL_RCC_OscConfig+0x480>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fb fec2 	bl	80010a0 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005320:	f7fb febe 	bl	80010a0 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e093      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005332:	4b29      	ldr	r3, [pc, #164]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	019b      	lsls	r3, r3, #6
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	3b01      	subs	r3, #1
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	061b      	lsls	r3, r3, #24
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	071b      	lsls	r3, r3, #28
 800536a:	491b      	ldr	r1, [pc, #108]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 800536c:	4313      	orrs	r3, r2
 800536e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005370:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <HAL_RCC_OscConfig+0x480>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7fb fe93 	bl	80010a0 <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537e:	f7fb fe8f 	bl	80010a0 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e064      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005390:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x41e>
 800539c:	e05c      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800539e:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <HAL_RCC_OscConfig+0x480>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fb fe7c 	bl	80010a0 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ac:	f7fb fe78 	bl	80010a0 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e04d      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCC_OscConfig+0x478>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x44c>
 80053ca:	e045      	b.n	8005458 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e040      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40007000 	.word	0x40007000
 80053e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005464 <HAL_RCC_OscConfig+0x504>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d030      	beq.n	8005454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d129      	bne.n	8005454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d122      	bne.n	8005454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005414:	4013      	ands	r3, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800541a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800541c:	4293      	cmp	r3, r2
 800541e:	d119      	bne.n	8005454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	3b01      	subs	r3, #1
 800542e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d10f      	bne.n	8005454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d107      	bne.n	8005454 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800

08005468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e07b      	b.n	8005572 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d108      	bne.n	8005494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800548a:	d009      	beq.n	80054a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
 8005492:	e005      	b.n	80054a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fb fc10 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005524:	ea42 0103 	orr.w	r1, r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	f003 0104 	and.w	r1, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	f003 0210 	and.w	r2, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005560:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e03f      	b.n	800560c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb fc59 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2224      	movs	r2, #36	@ 0x24
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f828 	bl	8005614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005618:	b0c0      	sub	sp, #256	@ 0x100
 800561a:	af00      	add	r7, sp, #0
 800561c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005630:	68d9      	ldr	r1, [r3, #12]
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	ea40 0301 	orr.w	r3, r0, r1
 800563c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	431a      	orrs	r2, r3
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	431a      	orrs	r2, r3
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800566c:	f021 010c 	bic.w	r1, r1, #12
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800567a:	430b      	orrs	r3, r1
 800567c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568e:	6999      	ldr	r1, [r3, #24]
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	ea40 0301 	orr.w	r3, r0, r1
 800569a:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b95      	ldr	r3, [pc, #596]	@ (80058f8 <UART_SetConfig+0x2e4>)
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d011      	beq.n	80056cc <UART_SetConfig+0xb8>
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b93      	ldr	r3, [pc, #588]	@ (80058fc <UART_SetConfig+0x2e8>)
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d00b      	beq.n	80056cc <UART_SetConfig+0xb8>
 80056b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b91      	ldr	r3, [pc, #580]	@ (8005900 <UART_SetConfig+0x2ec>)
 80056bc:	429a      	cmp	r2, r3
 80056be:	d005      	beq.n	80056cc <UART_SetConfig+0xb8>
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005904 <UART_SetConfig+0x2f0>)
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d104      	bne.n	80056d6 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056cc:	f7ff f9a8 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 80056d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056d4:	e003      	b.n	80056de <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056d6:	f7ff f98f 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 80056da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e8:	f040 8110 	bne.w	800590c <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056fe:	4622      	mov	r2, r4
 8005700:	462b      	mov	r3, r5
 8005702:	1891      	adds	r1, r2, r2
 8005704:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005706:	415b      	adcs	r3, r3
 8005708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800570a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800570e:	4621      	mov	r1, r4
 8005710:	eb12 0801 	adds.w	r8, r2, r1
 8005714:	4629      	mov	r1, r5
 8005716:	eb43 0901 	adc.w	r9, r3, r1
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800572a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800572e:	4690      	mov	r8, r2
 8005730:	4699      	mov	r9, r3
 8005732:	4623      	mov	r3, r4
 8005734:	eb18 0303 	adds.w	r3, r8, r3
 8005738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800573c:	462b      	mov	r3, r5
 800573e:	eb49 0303 	adc.w	r3, r9, r3
 8005742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005752:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005756:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800575a:	460b      	mov	r3, r1
 800575c:	18db      	adds	r3, r3, r3
 800575e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005760:	4613      	mov	r3, r2
 8005762:	eb42 0303 	adc.w	r3, r2, r3
 8005766:	657b      	str	r3, [r7, #84]	@ 0x54
 8005768:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800576c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005770:	f7fa fd52 	bl	8000218 <__aeabi_uldivmod>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4b63      	ldr	r3, [pc, #396]	@ (8005908 <UART_SetConfig+0x2f4>)
 800577a:	fba3 2302 	umull	r2, r3, r3, r2
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	011c      	lsls	r4, r3, #4
 8005782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005786:	2200      	movs	r2, #0
 8005788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800578c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005790:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005794:	4642      	mov	r2, r8
 8005796:	464b      	mov	r3, r9
 8005798:	1891      	adds	r1, r2, r2
 800579a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800579c:	415b      	adcs	r3, r3
 800579e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057a4:	4641      	mov	r1, r8
 80057a6:	eb12 0a01 	adds.w	sl, r2, r1
 80057aa:	4649      	mov	r1, r9
 80057ac:	eb43 0b01 	adc.w	fp, r3, r1
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057c4:	4692      	mov	sl, r2
 80057c6:	469b      	mov	fp, r3
 80057c8:	4643      	mov	r3, r8
 80057ca:	eb1a 0303 	adds.w	r3, sl, r3
 80057ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057d2:	464b      	mov	r3, r9
 80057d4:	eb4b 0303 	adc.w	r3, fp, r3
 80057d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057f0:	460b      	mov	r3, r1
 80057f2:	18db      	adds	r3, r3, r3
 80057f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057f6:	4613      	mov	r3, r2
 80057f8:	eb42 0303 	adc.w	r3, r2, r3
 80057fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005802:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005806:	f7fa fd07 	bl	8000218 <__aeabi_uldivmod>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4611      	mov	r1, r2
 8005810:	4b3d      	ldr	r3, [pc, #244]	@ (8005908 <UART_SetConfig+0x2f4>)
 8005812:	fba3 2301 	umull	r2, r3, r3, r1
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	2264      	movs	r2, #100	@ 0x64
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	1acb      	subs	r3, r1, r3
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005826:	4b38      	ldr	r3, [pc, #224]	@ (8005908 <UART_SetConfig+0x2f4>)
 8005828:	fba3 2302 	umull	r2, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005834:	441c      	add	r4, r3
 8005836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800583a:	2200      	movs	r2, #0
 800583c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005840:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005844:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005848:	4642      	mov	r2, r8
 800584a:	464b      	mov	r3, r9
 800584c:	1891      	adds	r1, r2, r2
 800584e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005850:	415b      	adcs	r3, r3
 8005852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005858:	4641      	mov	r1, r8
 800585a:	1851      	adds	r1, r2, r1
 800585c:	6339      	str	r1, [r7, #48]	@ 0x30
 800585e:	4649      	mov	r1, r9
 8005860:	414b      	adcs	r3, r1
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005870:	4659      	mov	r1, fp
 8005872:	00cb      	lsls	r3, r1, #3
 8005874:	4651      	mov	r1, sl
 8005876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800587a:	4651      	mov	r1, sl
 800587c:	00ca      	lsls	r2, r1, #3
 800587e:	4610      	mov	r0, r2
 8005880:	4619      	mov	r1, r3
 8005882:	4603      	mov	r3, r0
 8005884:	4642      	mov	r2, r8
 8005886:	189b      	adds	r3, r3, r2
 8005888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800588c:	464b      	mov	r3, r9
 800588e:	460a      	mov	r2, r1
 8005890:	eb42 0303 	adc.w	r3, r2, r3
 8005894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058ac:	460b      	mov	r3, r1
 80058ae:	18db      	adds	r3, r3, r3
 80058b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058b2:	4613      	mov	r3, r2
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058c2:	f7fa fca9 	bl	8000218 <__aeabi_uldivmod>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <UART_SetConfig+0x2f4>)
 80058cc:	fba3 1302 	umull	r1, r3, r3, r2
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	2164      	movs	r1, #100	@ 0x64
 80058d4:	fb01 f303 	mul.w	r3, r1, r3
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	3332      	adds	r3, #50	@ 0x32
 80058de:	4a0a      	ldr	r2, [pc, #40]	@ (8005908 <UART_SetConfig+0x2f4>)
 80058e0:	fba2 2303 	umull	r2, r3, r2, r3
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	f003 0207 	and.w	r2, r3, #7
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4422      	add	r2, r4
 80058f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058f4:	e10a      	b.n	8005b0c <UART_SetConfig+0x4f8>
 80058f6:	bf00      	nop
 80058f8:	40011000 	.word	0x40011000
 80058fc:	40011400 	.word	0x40011400
 8005900:	40011800 	.word	0x40011800
 8005904:	40011c00 	.word	0x40011c00
 8005908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800590c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005910:	2200      	movs	r2, #0
 8005912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005916:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800591a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800591e:	4642      	mov	r2, r8
 8005920:	464b      	mov	r3, r9
 8005922:	1891      	adds	r1, r2, r2
 8005924:	6239      	str	r1, [r7, #32]
 8005926:	415b      	adcs	r3, r3
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
 800592a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800592e:	4641      	mov	r1, r8
 8005930:	1854      	adds	r4, r2, r1
 8005932:	4649      	mov	r1, r9
 8005934:	eb43 0501 	adc.w	r5, r3, r1
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	00eb      	lsls	r3, r5, #3
 8005942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005946:	00e2      	lsls	r2, r4, #3
 8005948:	4614      	mov	r4, r2
 800594a:	461d      	mov	r5, r3
 800594c:	4643      	mov	r3, r8
 800594e:	18e3      	adds	r3, r4, r3
 8005950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005954:	464b      	mov	r3, r9
 8005956:	eb45 0303 	adc.w	r3, r5, r3
 800595a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800595e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800596a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800596e:	f04f 0200 	mov.w	r2, #0
 8005972:	f04f 0300 	mov.w	r3, #0
 8005976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800597a:	4629      	mov	r1, r5
 800597c:	008b      	lsls	r3, r1, #2
 800597e:	4621      	mov	r1, r4
 8005980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005984:	4621      	mov	r1, r4
 8005986:	008a      	lsls	r2, r1, #2
 8005988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800598c:	f7fa fc44 	bl	8000218 <__aeabi_uldivmod>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4b60      	ldr	r3, [pc, #384]	@ (8005b18 <UART_SetConfig+0x504>)
 8005996:	fba3 2302 	umull	r2, r3, r3, r2
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	011c      	lsls	r4, r3, #4
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059b0:	4642      	mov	r2, r8
 80059b2:	464b      	mov	r3, r9
 80059b4:	1891      	adds	r1, r2, r2
 80059b6:	61b9      	str	r1, [r7, #24]
 80059b8:	415b      	adcs	r3, r3
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c0:	4641      	mov	r1, r8
 80059c2:	1851      	adds	r1, r2, r1
 80059c4:	6139      	str	r1, [r7, #16]
 80059c6:	4649      	mov	r1, r9
 80059c8:	414b      	adcs	r3, r1
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d8:	4659      	mov	r1, fp
 80059da:	00cb      	lsls	r3, r1, #3
 80059dc:	4651      	mov	r1, sl
 80059de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e2:	4651      	mov	r1, sl
 80059e4:	00ca      	lsls	r2, r1, #3
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	4642      	mov	r2, r8
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059f4:	464b      	mov	r3, r9
 80059f6:	460a      	mov	r2, r1
 80059f8:	eb42 0303 	adc.w	r3, r2, r3
 80059fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a18:	4649      	mov	r1, r9
 8005a1a:	008b      	lsls	r3, r1, #2
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a22:	4641      	mov	r1, r8
 8005a24:	008a      	lsls	r2, r1, #2
 8005a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a2a:	f7fa fbf5 	bl	8000218 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	4b38      	ldr	r3, [pc, #224]	@ (8005b18 <UART_SetConfig+0x504>)
 8005a36:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	2264      	movs	r2, #100	@ 0x64
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	1acb      	subs	r3, r1, r3
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	3332      	adds	r3, #50	@ 0x32
 8005a48:	4a33      	ldr	r2, [pc, #204]	@ (8005b18 <UART_SetConfig+0x504>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a54:	441c      	add	r4, r3
 8005a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	1891      	adds	r1, r2, r2
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	415b      	adcs	r3, r3
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a74:	4641      	mov	r1, r8
 8005a76:	1851      	adds	r1, r2, r1
 8005a78:	6039      	str	r1, [r7, #0]
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	414b      	adcs	r3, r1
 8005a7e:	607b      	str	r3, [r7, #4]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	00cb      	lsls	r3, r1, #3
 8005a90:	4651      	mov	r1, sl
 8005a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a96:	4651      	mov	r1, sl
 8005a98:	00ca      	lsls	r2, r1, #3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	189b      	adds	r3, r3, r2
 8005aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	eb42 0303 	adc.w	r3, r2, r3
 8005aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005aba:	667a      	str	r2, [r7, #100]	@ 0x64
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ac8:	4649      	mov	r1, r9
 8005aca:	008b      	lsls	r3, r1, #2
 8005acc:	4641      	mov	r1, r8
 8005ace:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	008a      	lsls	r2, r1, #2
 8005ad6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ada:	f7fa fb9d 	bl	8000218 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <UART_SetConfig+0x504>)
 8005ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	2164      	movs	r1, #100	@ 0x64
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	3332      	adds	r3, #50	@ 0x32
 8005af6:	4a08      	ldr	r2, [pc, #32]	@ (8005b18 <UART_SetConfig+0x504>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4422      	add	r2, r4
 8005b0a:	609a      	str	r2, [r3, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b12:	46bd      	mov	sp, r7
 8005b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b18:	51eb851f 	.word	0x51eb851f

08005b1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	f107 001c 	add.w	r0, r7, #28
 8005b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d122      	bne.n	8005b7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d105      	bne.n	8005b6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 fa3a 	bl	8006fe8 <USB_CoreReset>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
 8005b78:	e01a      	b.n	8005bb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 fa2e 	bl	8006fe8 <USB_CoreReset>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ba2:	e005      	b.n	8005bb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d10b      	bne.n	8005bce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f043 0206 	orr.w	r2, r3, #6
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bda:	b004      	add	sp, #16
 8005bdc:	4770      	bx	lr
	...

08005be0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d165      	bne.n	8005cc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4a41      	ldr	r2, [pc, #260]	@ (8005cfc <USB_SetTurnaroundTime+0x11c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d906      	bls.n	8005c0a <USB_SetTurnaroundTime+0x2a>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4a40      	ldr	r2, [pc, #256]	@ (8005d00 <USB_SetTurnaroundTime+0x120>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d202      	bcs.n	8005c0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c04:	230f      	movs	r3, #15
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e062      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d00 <USB_SetTurnaroundTime+0x120>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d306      	bcc.n	8005c20 <USB_SetTurnaroundTime+0x40>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4a3b      	ldr	r2, [pc, #236]	@ (8005d04 <USB_SetTurnaroundTime+0x124>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d202      	bcs.n	8005c20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c1a:	230e      	movs	r3, #14
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e057      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4a38      	ldr	r2, [pc, #224]	@ (8005d04 <USB_SetTurnaroundTime+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d306      	bcc.n	8005c36 <USB_SetTurnaroundTime+0x56>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4a37      	ldr	r2, [pc, #220]	@ (8005d08 <USB_SetTurnaroundTime+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d202      	bcs.n	8005c36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c30:	230d      	movs	r3, #13
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e04c      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4a33      	ldr	r2, [pc, #204]	@ (8005d08 <USB_SetTurnaroundTime+0x128>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d306      	bcc.n	8005c4c <USB_SetTurnaroundTime+0x6c>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4a32      	ldr	r2, [pc, #200]	@ (8005d0c <USB_SetTurnaroundTime+0x12c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d802      	bhi.n	8005c4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c46:	230c      	movs	r3, #12
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e041      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8005d0c <USB_SetTurnaroundTime+0x12c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d906      	bls.n	8005c62 <USB_SetTurnaroundTime+0x82>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4a2e      	ldr	r2, [pc, #184]	@ (8005d10 <USB_SetTurnaroundTime+0x130>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d802      	bhi.n	8005c62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c5c:	230b      	movs	r3, #11
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e036      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	@ (8005d10 <USB_SetTurnaroundTime+0x130>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d906      	bls.n	8005c78 <USB_SetTurnaroundTime+0x98>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4a29      	ldr	r2, [pc, #164]	@ (8005d14 <USB_SetTurnaroundTime+0x134>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d802      	bhi.n	8005c78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c72:	230a      	movs	r3, #10
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e02b      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4a26      	ldr	r2, [pc, #152]	@ (8005d14 <USB_SetTurnaroundTime+0x134>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d906      	bls.n	8005c8e <USB_SetTurnaroundTime+0xae>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4a25      	ldr	r2, [pc, #148]	@ (8005d18 <USB_SetTurnaroundTime+0x138>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d202      	bcs.n	8005c8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c88:	2309      	movs	r3, #9
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e020      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4a21      	ldr	r2, [pc, #132]	@ (8005d18 <USB_SetTurnaroundTime+0x138>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d306      	bcc.n	8005ca4 <USB_SetTurnaroundTime+0xc4>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4a20      	ldr	r2, [pc, #128]	@ (8005d1c <USB_SetTurnaroundTime+0x13c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d802      	bhi.n	8005ca4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e015      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <USB_SetTurnaroundTime+0x13c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d906      	bls.n	8005cba <USB_SetTurnaroundTime+0xda>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4a1c      	ldr	r2, [pc, #112]	@ (8005d20 <USB_SetTurnaroundTime+0x140>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d202      	bcs.n	8005cba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005cb4:	2307      	movs	r3, #7
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e00a      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cba:	2306      	movs	r3, #6
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	e007      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cc6:	2309      	movs	r3, #9
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e001      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ccc:	2309      	movs	r3, #9
 8005cce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	00d8acbf 	.word	0x00d8acbf
 8005d00:	00e4e1c0 	.word	0x00e4e1c0
 8005d04:	00f42400 	.word	0x00f42400
 8005d08:	01067380 	.word	0x01067380
 8005d0c:	011a499f 	.word	0x011a499f
 8005d10:	01312cff 	.word	0x01312cff
 8005d14:	014ca43f 	.word	0x014ca43f
 8005d18:	016e3600 	.word	0x016e3600
 8005d1c:	01a6ab1f 	.word	0x01a6ab1f
 8005d20:	01e84800 	.word	0x01e84800

08005d24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f043 0201 	orr.w	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d115      	bne.n	8005db6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d96:	2001      	movs	r0, #1
 8005d98:	f7fb f98e 	bl	80010b8 <HAL_Delay>
      ms++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 f890 	bl	8006ec8 <USB_GetMode>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d01e      	beq.n	8005dec <USB_SetCurrentMode+0x84>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b31      	cmp	r3, #49	@ 0x31
 8005db2:	d9f0      	bls.n	8005d96 <USB_SetCurrentMode+0x2e>
 8005db4:	e01a      	b.n	8005dec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d115      	bne.n	8005de8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7fb f975 	bl	80010b8 <HAL_Delay>
      ms++;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 f877 	bl	8006ec8 <USB_GetMode>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <USB_SetCurrentMode+0x84>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b31      	cmp	r3, #49	@ 0x31
 8005de4:	d9f0      	bls.n	8005dc8 <USB_SetCurrentMode+0x60>
 8005de6:	e001      	b.n	8005dec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e005      	b.n	8005df8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b32      	cmp	r3, #50	@ 0x32
 8005df0:	d101      	bne.n	8005df6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e00:	b084      	sub	sp, #16
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	e009      	b.n	8005e34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3340      	adds	r3, #64	@ 0x40
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3301      	adds	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b0e      	cmp	r3, #14
 8005e38:	d9f2      	bls.n	8005e20 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11c      	bne.n	8005e7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e4e:	f043 0302 	orr.w	r3, r3, #2
 8005e52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e005      	b.n	8005e86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	680b      	ldr	r3, [r1, #0]
 8005ea4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10c      	bne.n	8005ec6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f945 	bl	8006144 <USB_SetDevSpeed>
 8005eba:	e008      	b.n	8005ece <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f940 	bl	8006144 <USB_SetDevSpeed>
 8005ec4:	e003      	b.n	8005ece <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ec6:	2103      	movs	r1, #3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f93b 	bl	8006144 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ece:	2110      	movs	r1, #16
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f8f3 	bl	80060bc <USB_FlushTxFifo>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f90f 	bl	8006104 <USB_FlushRxFifo>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f02:	461a      	mov	r2, r3
 8005f04:	2300      	movs	r3, #0
 8005f06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	e043      	b.n	8005fa2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f30:	d118      	bne.n	8005f64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f44:	461a      	mov	r2, r3
 8005f46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e013      	b.n	8005f76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e008      	b.n	8005f76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f70:	461a      	mov	r2, r3
 8005f72:	2300      	movs	r3, #0
 8005f74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f82:	461a      	mov	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	461a      	mov	r2, r3
 8005f96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d3b7      	bcc.n	8005f1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e043      	b.n	8006038 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fc6:	d118      	bne.n	8005ffa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e013      	b.n	800600c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e008      	b.n	800600c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006018:	461a      	mov	r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602a:	461a      	mov	r2, r3
 800602c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006030:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3301      	adds	r3, #1
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d3b7      	bcc.n	8005fb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800604e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006052:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006060:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d105      	bne.n	8006074 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f043 0210 	orr.w	r2, r3, #16
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	4b0f      	ldr	r3, [pc, #60]	@ (80060b8 <USB_DevInit+0x2b8>)
 800607a:	4313      	orrs	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f043 0208 	orr.w	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d107      	bne.n	80060a8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060a0:	f043 0304 	orr.w	r3, r3, #4
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b4:	b004      	add	sp, #16
 80060b6:	4770      	bx	lr
 80060b8:	803c3800 	.word	0x803c3800

080060bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	019b      	lsls	r3, r3, #6
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3301      	adds	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	4a08      	ldr	r2, [pc, #32]	@ (8006100 <USB_FlushTxFifo+0x44>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e006      	b.n	80060f4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d0f1      	beq.n	80060d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	00030d40 	.word	0x00030d40

08006104 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2210      	movs	r2, #16
 8006114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	4a08      	ldr	r2, [pc, #32]	@ (8006140 <USB_FlushRxFifo+0x3c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d901      	bls.n	8006126 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e006      	b.n	8006134 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0310 	and.w	r3, r3, #16
 800612e:	2b10      	cmp	r3, #16
 8006130:	d0f1      	beq.n	8006116 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	00030d40 	.word	0x00030d40

08006144 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006164:	4313      	orrs	r3, r2
 8006166:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 0306 	and.w	r3, r3, #6
 800618e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d102      	bne.n	800619c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
 800619a:	e00a      	b.n	80061b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d002      	beq.n	80061a8 <USB_GetDevSpeed+0x32>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d102      	bne.n	80061ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061a8:	2302      	movs	r3, #2
 80061aa:	75fb      	strb	r3, [r7, #23]
 80061ac:	e001      	b.n	80061b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061ae:	230f      	movs	r3, #15
 80061b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d13a      	bne.n	8006252 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	2101      	movs	r1, #1
 80061ee:	fa01 f303 	lsl.w	r3, r1, r3
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	68f9      	ldr	r1, [r7, #12]
 80061f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d155      	bne.n	80062c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	78db      	ldrb	r3, [r3, #3]
 800622e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006230:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	059b      	lsls	r3, r3, #22
 8006236:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006238:	4313      	orrs	r3, r2
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006246:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800624a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	e036      	b.n	80062c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	2101      	movs	r1, #1
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	68f9      	ldr	r1, [r7, #12]
 800626c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006270:	4313      	orrs	r3, r2
 8006272:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d11a      	bne.n	80062c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	78db      	ldrb	r3, [r3, #3]
 80062a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062a6:	430b      	orrs	r3, r1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	@ 0x28
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	785b      	ldrb	r3, [r3, #1]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	f040 815c 	bne.w	80065aa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d132      	bne.n	8006360 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006314:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006318:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800631c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006338:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800633c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006358:	0cdb      	lsrs	r3, r3, #19
 800635a:	04db      	lsls	r3, r3, #19
 800635c:	6113      	str	r3, [r2, #16]
 800635e:	e074      	b.n	800644a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800637a:	0cdb      	lsrs	r3, r3, #19
 800637c:	04db      	lsls	r3, r3, #19
 800637e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800639e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6959      	ldr	r1, [r3, #20]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	440b      	add	r3, r1
 80063bc:	1e59      	subs	r1, r3, #1
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80063c6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063c8:	4b9d      	ldr	r3, [pc, #628]	@ (8006640 <USB_EPStartXfer+0x370>)
 80063ca:	400b      	ands	r3, r1
 80063cc:	69b9      	ldr	r1, [r7, #24]
 80063ce:	0148      	lsls	r0, r1, #5
 80063d0:	69f9      	ldr	r1, [r7, #28]
 80063d2:	4401      	add	r1, r0
 80063d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063d8:	4313      	orrs	r3, r2
 80063da:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	0148      	lsls	r0, r1, #5
 80063f6:	69f9      	ldr	r1, [r7, #28]
 80063f8:	4401      	add	r1, r0
 80063fa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063fe:	4313      	orrs	r3, r2
 8006400:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	78db      	ldrb	r3, [r3, #3]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d11f      	bne.n	800644a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006424:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006428:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006444:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006448:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d14b      	bne.n	80064e8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d009      	beq.n	800646c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006464:	461a      	mov	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	78db      	ldrb	r3, [r3, #3]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d128      	bne.n	80064c6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006480:	2b00      	cmp	r3, #0
 8006482:	d110      	bne.n	80064a6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	0151      	lsls	r1, r2, #5
 8006496:	69fa      	ldr	r2, [r7, #28]
 8006498:	440a      	add	r2, r1
 800649a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800649e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	e00f      	b.n	80064c6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064e0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e12f      	b.n	8006748 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006502:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006506:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	78db      	ldrb	r3, [r3, #3]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d015      	beq.n	800653c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8117 	beq.w	8006748 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	2101      	movs	r1, #1
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	69f9      	ldr	r1, [r7, #28]
 8006532:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006536:	4313      	orrs	r3, r2
 8006538:	634b      	str	r3, [r1, #52]	@ 0x34
 800653a:	e105      	b.n	8006748 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006548:	2b00      	cmp	r3, #0
 800654a:	d110      	bne.n	800656e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006566:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e00f      	b.n	800658e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	0151      	lsls	r1, r2, #5
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	440a      	add	r2, r1
 8006584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800658c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	68d9      	ldr	r1, [r3, #12]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	b298      	uxth	r0, r3
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	4603      	mov	r3, r0
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 fa2b 	bl	80069fe <USB_WritePacket>
 80065a8:	e0ce      	b.n	8006748 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065c4:	0cdb      	lsrs	r3, r3, #19
 80065c6:	04db      	lsls	r3, r3, #19
 80065c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80065e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80065ec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d126      	bne.n	8006644 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800660c:	69b9      	ldr	r1, [r7, #24]
 800660e:	0148      	lsls	r0, r1, #5
 8006610:	69f9      	ldr	r1, [r7, #28]
 8006612:	4401      	add	r1, r0
 8006614:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006618:	4313      	orrs	r3, r2
 800661a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006636:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800663a:	6113      	str	r3, [r2, #16]
 800663c:	e036      	b.n	80066ac <USB_EPStartXfer+0x3dc>
 800663e:	bf00      	nop
 8006640:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4413      	add	r3, r2
 800664e:	1e5a      	subs	r2, r3, #1
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	8afb      	ldrh	r3, [r7, #22]
 800666a:	04d9      	lsls	r1, r3, #19
 800666c:	4b39      	ldr	r3, [pc, #228]	@ (8006754 <USB_EPStartXfer+0x484>)
 800666e:	400b      	ands	r3, r1
 8006670:	69b9      	ldr	r1, [r7, #24]
 8006672:	0148      	lsls	r0, r1, #5
 8006674:	69f9      	ldr	r1, [r7, #28]
 8006676:	4401      	add	r1, r0
 8006678:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800667c:	4313      	orrs	r3, r2
 800667e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	8af9      	ldrh	r1, [r7, #22]
 8006694:	fb01 f303 	mul.w	r3, r1, r3
 8006698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669c:	69b9      	ldr	r1, [r7, #24]
 800669e:	0148      	lsls	r0, r1, #5
 80066a0:	69f9      	ldr	r1, [r7, #28]
 80066a2:	4401      	add	r1, r0
 80066a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80066a8:	4313      	orrs	r3, r2
 80066aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d10d      	bne.n	80066ce <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	68d9      	ldr	r1, [r3, #12]
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ca:	460a      	mov	r2, r1
 80066cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	78db      	ldrb	r3, [r3, #3]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d128      	bne.n	8006728 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d110      	bne.n	8006708 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006700:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	e00f      	b.n	8006728 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006726:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	0151      	lsls	r1, r2, #5
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	440a      	add	r2, r1
 800673e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006742:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	1ff80000 	.word	0x1ff80000

08006758 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	f040 80cd 	bne.w	8006914 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d132      	bne.n	80067e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800679c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e0:	0cdb      	lsrs	r3, r3, #19
 80067e2:	04db      	lsls	r3, r3, #19
 80067e4:	6113      	str	r3, [r2, #16]
 80067e6:	e04e      	b.n	8006886 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006802:	0cdb      	lsrs	r3, r3, #19
 8006804:	04db      	lsls	r3, r3, #19
 8006806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	0151      	lsls	r1, r2, #5
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	440a      	add	r2, r1
 800681e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006822:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006826:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800682a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	695a      	ldr	r2, [r3, #20]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	429a      	cmp	r2, r3
 8006836:	d903      	bls.n	8006840 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	440a      	add	r2, r1
 8006856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800685a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800685e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006876:	6939      	ldr	r1, [r7, #16]
 8006878:	0148      	lsls	r0, r1, #5
 800687a:	6979      	ldr	r1, [r7, #20]
 800687c:	4401      	add	r1, r0
 800687e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006882:	4313      	orrs	r3, r2
 8006884:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d11e      	bne.n	80068ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d009      	beq.n	80068a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a0:	461a      	mov	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	0151      	lsls	r1, r2, #5
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	440a      	add	r2, r1
 80068be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	e092      	b.n	80069f0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d07e      	beq.n	80069f0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	2101      	movs	r1, #1
 8006904:	fa01 f303 	lsl.w	r3, r1, r3
 8006908:	6979      	ldr	r1, [r7, #20]
 800690a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800690e:	4313      	orrs	r3, r2
 8006910:	634b      	str	r3, [r1, #52]	@ 0x34
 8006912:	e06d      	b.n	80069f0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800692e:	0cdb      	lsrs	r3, r3, #19
 8006930:	04db      	lsls	r3, r3, #19
 8006932:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800694e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006952:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006956:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006982:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006986:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800699e:	6939      	ldr	r1, [r7, #16]
 80069a0:	0148      	lsls	r0, r1, #5
 80069a2:	6979      	ldr	r1, [r7, #20]
 80069a4:	4401      	add	r1, r0
 80069a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80069aa:	4313      	orrs	r3, r2
 80069ac:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d10d      	bne.n	80069d0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d009      	beq.n	80069d0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	68d9      	ldr	r1, [r3, #12]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069cc:	460a      	mov	r2, r1
 80069ce:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b089      	sub	sp, #36	@ 0x24
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	71fb      	strb	r3, [r7, #7]
 8006a10:	4613      	mov	r3, r2
 8006a12:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d123      	bne.n	8006a6c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a24:	88bb      	ldrh	r3, [r7, #4]
 8006a26:	3303      	adds	r3, #3
 8006a28:	089b      	lsrs	r3, r3, #2
 8006a2a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e018      	b.n	8006a64 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	031a      	lsls	r2, r3, #12
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a3e:	461a      	mov	r2, r3
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3301      	adds	r3, #1
 8006a56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	3301      	adds	r3, #1
 8006a62:	61bb      	str	r3, [r7, #24]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d3e2      	bcc.n	8006a32 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3724      	adds	r7, #36	@ 0x24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b08b      	sub	sp, #44	@ 0x2c
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	4613      	mov	r3, r2
 8006a86:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a90:	88fb      	ldrh	r3, [r7, #6]
 8006a92:	089b      	lsrs	r3, r3, #2
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a98:	88fb      	ldrh	r3, [r7, #6]
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	e014      	b.n	8006ad0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	3301      	adds	r3, #1
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	3301      	adds	r3, #1
 8006ace:	623b      	str	r3, [r7, #32]
 8006ad0:	6a3a      	ldr	r2, [r7, #32]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d3e6      	bcc.n	8006aa6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ad8:	8bfb      	ldrh	r3, [r7, #30]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01e      	beq.n	8006b1c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f107 0310 	add.w	r3, r7, #16
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	fa22 f303 	lsr.w	r3, r2, r3
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	701a      	strb	r2, [r3, #0]
      i++;
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	3301      	adds	r3, #1
 8006b08:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006b10:	8bfb      	ldrh	r3, [r7, #30]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b16:	8bfb      	ldrh	r3, [r7, #30]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1ea      	bne.n	8006af2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	372c      	adds	r7, #44	@ 0x2c
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d12c      	bne.n	8006ba0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	db12      	blt.n	8006b7e <USB_EPSetStall+0x54>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00f      	beq.n	8006b7e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	0151      	lsls	r1, r2, #5
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	440a      	add	r2, r1
 8006b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b7c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	e02b      	b.n	8006bf8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	db12      	blt.n	8006bd8 <USB_EPSetStall+0xae>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00f      	beq.n	8006bd8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	0151      	lsls	r1, r2, #5
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	440a      	add	r2, r1
 8006bce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bd6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d128      	bne.n	8006c74 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	78db      	ldrb	r3, [r3, #3]
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d003      	beq.n	8006c52 <USB_EPClearStall+0x4c>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d138      	bne.n	8006cc4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e027      	b.n	8006cc4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c92:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	78db      	ldrb	r3, [r3, #3]
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d003      	beq.n	8006ca4 <USB_EPClearStall+0x9e>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	78db      	ldrb	r3, [r3, #3]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d10f      	bne.n	8006cc4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cf0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006cf4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006d06:	68f9      	ldr	r1, [r7, #12]
 8006d08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d38:	f023 0303 	bic.w	r3, r3, #3
 8006d3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d4c:	f023 0302 	bic.w	r3, r3, #2
 8006d50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d8e:	f043 0302 	orr.w	r3, r3, #2
 8006d92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	4013      	ands	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dba:	68fb      	ldr	r3, [r7, #12]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4013      	ands	r3, r2
 8006dea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	0c1b      	lsrs	r3, r3, #16
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	b29b      	uxth	r3, r3
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9c:	01db      	lsls	r3, r3, #7
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eba:	68bb      	ldr	r3, [r7, #8]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006efe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	460b      	mov	r3, r1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	333c      	adds	r3, #60	@ 0x3c
 8006f42:	3304      	adds	r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	4a26      	ldr	r2, [pc, #152]	@ (8006fe4 <USB_EP0_OutStart+0xb8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d90a      	bls.n	8006f66 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f60:	d101      	bne.n	8006f66 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e037      	b.n	8006fd6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f94:	f043 0318 	orr.w	r3, r3, #24
 8006f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fa8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006fac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006fae:	7afb      	ldrb	r3, [r7, #11]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10f      	bne.n	8006fd4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fba:	461a      	mov	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	4f54300a 	.word	0x4f54300a

08006fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	4a13      	ldr	r2, [pc, #76]	@ (8007048 <USB_CoreReset+0x60>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d901      	bls.n	8007004 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e01a      	b.n	800703a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	daf3      	bge.n	8006ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f043 0201 	orr.w	r2, r3, #1
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	4a09      	ldr	r2, [pc, #36]	@ (8007048 <USB_CoreReset+0x60>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e006      	b.n	800703a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d0f1      	beq.n	800701c <USB_CoreReset+0x34>

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	00030d40 	.word	0x00030d40

0800704c <__NVIC_SystemReset>:
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007050:	f3bf 8f4f 	dsb	sy
}
 8007054:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007056:	4b06      	ldr	r3, [pc, #24]	@ (8007070 <__NVIC_SystemReset+0x24>)
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800705e:	4904      	ldr	r1, [pc, #16]	@ (8007070 <__NVIC_SystemReset+0x24>)
 8007060:	4b04      	ldr	r3, [pc, #16]	@ (8007074 <__NVIC_SystemReset+0x28>)
 8007062:	4313      	orrs	r3, r2
 8007064:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007066:	f3bf 8f4f 	dsb	sy
}
 800706a:	bf00      	nop
    __NOP();
 800706c:	bf00      	nop
 800706e:	e7fd      	b.n	800706c <__NVIC_SystemReset+0x20>
 8007070:	e000ed00 	.word	0xe000ed00
 8007074:	05fa0004 	.word	0x05fa0004

08007078 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007084:	f240 401c 	movw	r0, #1052	@ 0x41c
 8007088:	f002 fc28 	bl	80098dc <USBD_static_malloc>
 800708c:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800709c:	2302      	movs	r3, #2
 800709e:	e03f      	b.n	8007120 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80070b6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4798      	blx	r3
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	e000      	b.n	8007120 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 800713e:	2302      	movs	r3, #2
 8007140:	e027      	b.n	8007192 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007148:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007182:	4618      	mov	r0, r3
 8007184:	f002 fbb8 	bl	80098f8 <USBD_static_free>
  pdev->pClassData = NULL;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80071ac:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e0d5      	b.n	8007374 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d03e      	beq.n	8007252 <USBD_DFU_Setup+0xb6>
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	f040 80c5 	bne.w	8007364 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b06      	cmp	r3, #6
 80071e0:	d82f      	bhi.n	8007242 <USBD_DFU_Setup+0xa6>
 80071e2:	a201      	add	r2, pc, #4	@ (adr r2, 80071e8 <USBD_DFU_Setup+0x4c>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	08007239 	.word	0x08007239
 80071ec:	08007205 	.word	0x08007205
 80071f0:	0800720f 	.word	0x0800720f
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007221 	.word	0x08007221
 80071fc:	08007229 	.word	0x08007229
 8007200:	08007231 	.word	0x08007231
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fa6c 	bl	80076e4 <DFU_Download>
          break;
 800720c:	e020      	b.n	8007250 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fad3 	bl	80077bc <DFU_Upload>
          break;
 8007216:	e01b      	b.n	8007250 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fba9 	bl	8007970 <DFU_GetStatus>
          break;
 800721e:	e017      	b.n	8007250 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc5b 	bl	8007adc <DFU_ClearStatus>
          break;
 8007226:	e013      	b.n	8007250 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fcab 	bl	8007b84 <DFU_GetState>
          break;
 800722e:	e00f      	b.n	8007250 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fcbf 	bl	8007bb4 <DFU_Abort>
          break;
 8007236:	e00b      	b.n	8007250 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9ee 	bl	800761c <DFU_Detach>
          break;
 8007240:	e006      	b.n	8007250 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fdfb 	bl	8008e40 <USBD_CtlError>
          ret = USBD_FAIL;
 800724a:	2303      	movs	r3, #3
 800724c:	77fb      	strb	r3, [r7, #31]
          break;
 800724e:	bf00      	nop
      }
      break;
 8007250:	e08f      	b.n	8007372 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	785b      	ldrb	r3, [r3, #1]
 8007256:	2b0b      	cmp	r3, #11
 8007258:	d87b      	bhi.n	8007352 <USBD_DFU_Setup+0x1b6>
 800725a:	a201      	add	r2, pc, #4	@ (adr r2, 8007260 <USBD_DFU_Setup+0xc4>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007291 	.word	0x08007291
 8007264:	08007361 	.word	0x08007361
 8007268:	08007353 	.word	0x08007353
 800726c:	08007353 	.word	0x08007353
 8007270:	08007353 	.word	0x08007353
 8007274:	08007353 	.word	0x08007353
 8007278:	080072bb 	.word	0x080072bb
 800727c:	08007353 	.word	0x08007353
 8007280:	08007353 	.word	0x08007353
 8007284:	08007353 	.word	0x08007353
 8007288:	080072e5 	.word	0x080072e5
 800728c:	08007311 	.word	0x08007311
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b03      	cmp	r3, #3
 800729a:	d107      	bne.n	80072ac <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800729c:	f107 030e 	add.w	r3, r7, #14
 80072a0:	2202      	movs	r2, #2
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fe3c 	bl	8008f22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072aa:	e05a      	b.n	8007362 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fdc6 	bl	8008e40 <USBD_CtlError>
            ret = USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	77fb      	strb	r3, [r7, #31]
          break;
 80072b8:	e053      	b.n	8007362 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	885b      	ldrh	r3, [r3, #2]
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b21      	cmp	r3, #33	@ 0x21
 80072c4:	d107      	bne.n	80072d6 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80072c6:	4b2d      	ldr	r3, [pc, #180]	@ (800737c <USBD_DFU_Setup+0x1e0>)
 80072c8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	88db      	ldrh	r3, [r3, #6]
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	bf28      	it	cs
 80072d2:	2309      	movcs	r3, #9
 80072d4:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80072d6:	8afb      	ldrh	r3, [r7, #22]
 80072d8:	461a      	mov	r2, r3
 80072da:	69b9      	ldr	r1, [r7, #24]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 fe20 	bl	8008f22 <USBD_CtlSendData>
          break;
 80072e2:	e03e      	b.n	8007362 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d108      	bne.n	8007302 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072f6:	2201      	movs	r2, #1
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fe11 	bl	8008f22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007300:	e02f      	b.n	8007362 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fd9b 	bl	8008e40 <USBD_CtlError>
            ret = USBD_FAIL;
 800730a:	2303      	movs	r3, #3
 800730c:	77fb      	strb	r3, [r7, #31]
          break;
 800730e:	e028      	b.n	8007362 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	885b      	ldrh	r3, [r3, #2]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d114      	bne.n	8007344 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b03      	cmp	r3, #3
 8007324:	d107      	bne.n	8007336 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	885b      	ldrh	r3, [r3, #2]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007334:	e015      	b.n	8007362 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fd81 	bl	8008e40 <USBD_CtlError>
              ret = USBD_FAIL;
 800733e:	2303      	movs	r3, #3
 8007340:	77fb      	strb	r3, [r7, #31]
          break;
 8007342:	e00e      	b.n	8007362 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fd7a 	bl	8008e40 <USBD_CtlError>
            ret = USBD_FAIL;
 800734c:	2303      	movs	r3, #3
 800734e:	77fb      	strb	r3, [r7, #31]
          break;
 8007350:	e007      	b.n	8007362 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 fd73 	bl	8008e40 <USBD_CtlError>
          ret = USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	77fb      	strb	r3, [r7, #31]
          break;
 800735e:	e000      	b.n	8007362 <USBD_DFU_Setup+0x1c6>
          break;
 8007360:	bf00      	nop
      }
      break;
 8007362:	e006      	b.n	8007372 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 fd6a 	bl	8008e40 <USBD_CtlError>
      ret = USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	77fb      	strb	r3, [r7, #31]
      break;
 8007370:	bf00      	nop
  }

  return (uint8_t)ret;
 8007372:	7ffb      	ldrb	r3, [r7, #31]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	2000005a 	.word	0x2000005a

08007380 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	221b      	movs	r2, #27
 800738c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800738e:	4b03      	ldr	r3, [pc, #12]	@ (800739c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000048 	.word	0x20000048

080073a0 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b088      	sub	sp, #32
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073c4:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80073cc:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e0ce      	b.n	8007576 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80073de:	2b04      	cmp	r3, #4
 80073e0:	f040 80bd 	bne.w	800755e <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d17c      	bne.n	80074e8 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	f000 8093 	beq.w	8007520 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007400:	2b05      	cmp	r3, #5
 8007402:	d15e      	bne.n	80074c2 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b21      	cmp	r3, #33	@ 0x21
 800740a:	d124      	bne.n	8007456 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	461a      	mov	r2, r3
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	789b      	ldrb	r3, [r3, #2]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	441a      	add	r2, r3
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	78db      	ldrb	r3, [r3, #3]
 8007436:	041b      	lsls	r3, r3, #16
 8007438:	441a      	add	r2, r3
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	791b      	ldrb	r3, [r3, #4]
 800744a:	061b      	lsls	r3, r3, #24
 800744c:	441a      	add	r2, r3
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8007454:	e064      	b.n	8007520 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b41      	cmp	r3, #65	@ 0x41
 800745c:	d12f      	bne.n	80074be <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	461a      	mov	r2, r3
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	789b      	ldrb	r3, [r3, #2]
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	441a      	add	r2, r3
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	78db      	ldrb	r3, [r3, #3]
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	441a      	add	r2, r3
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	791b      	ldrb	r3, [r3, #4]
 800749c:	061b      	lsls	r3, r3, #24
 800749e:	441a      	add	r2, r3
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d032      	beq.n	8007520 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e05b      	b.n	8007576 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 80074be:	2303      	movs	r3, #3
 80074c0:	e059      	b.n	8007576 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80074d6:	2301      	movs	r3, #1
 80074d8:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fcad 	bl	8008e40 <USBD_CtlError>
 80074e6:	e01b      	b.n	8007520 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d916      	bls.n	8007520 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80074f8:	3b02      	subs	r3, #2
 80074fa:	029a      	lsls	r2, r3, #10
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8007502:	4413      	add	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	69f8      	ldr	r0, [r7, #28]
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8007514:	4798      	blx	r3
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 800751c:	2303      	movs	r3, #3
 800751e:	e02a      	b.n	8007576 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	2203      	movs	r2, #3
 8007534:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 800755c:	e00a      	b.n	8007574 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007564:	2b07      	cmp	r3, #7
 8007566:	d103      	bne.n	8007570 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fb75 	bl	8007c58 <DFU_Leave>
 800756e:	e001      	b.n	8007574 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	e000      	b.n	8007576 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	220a      	movs	r2, #10
 80075a0:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 80075a2:	4b03      	ldr	r3, [pc, #12]	@ (80075b0 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	20000064 	.word	0x20000064

080075b4 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	460b      	mov	r3, r1
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80075c8:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d808      	bhi.n	80075e2 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	4905      	ldr	r1, [pc, #20]	@ (80075ec <USBD_DFU_GetUsrStringDesc+0x38>)
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 fc42 	bl	8008e62 <USBD_GetString>
    return USBD_StrDesc;
 80075de:	4b03      	ldr	r3, [pc, #12]	@ (80075ec <USBD_DFU_GetUsrStringDesc+0x38>)
 80075e0:	e000      	b.n	80075e4 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80075e2:	2300      	movs	r3, #0
  }
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	200002b4 	.word	0x200002b4

080075f0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007600:	2303      	movs	r3, #3
 8007602:	e004      	b.n	800760e <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800762c:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d051      	beq.n	80076d8 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800763a:	2b02      	cmp	r3, #2
 800763c:	d013      	beq.n	8007666 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007644:	2b03      	cmp	r3, #3
 8007646:	d00e      	beq.n	8007666 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800764e:	2b05      	cmp	r3, #5
 8007650:	d009      	beq.n	8007666 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007658:	2b06      	cmp	r3, #6
 800765a:	d004      	beq.n	8007666 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007662:	2b09      	cmp	r3, #9
 8007664:	d125      	bne.n	80076b2 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2202      	movs	r2, #2
 800766a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 80076b2:	4b0b      	ldr	r3, [pc, #44]	@ (80076e0 <DFU_Detach+0xc4>)
 80076b4:	7d5b      	ldrb	r3, [r3, #21]
 80076b6:	f003 0310 	and.w	r3, r3, #16
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d006      	beq.n	80076cc <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fb7b 	bl	8007dba <USBD_Stop>
    (void)USBD_Start(pdev);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb6c 	bl	8007da2 <USBD_Start>
 80076ca:	e006      	b.n	80076da <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	885b      	ldrh	r3, [r3, #2]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7f9 fcf1 	bl	80010b8 <HAL_Delay>
 80076d6:	e000      	b.n	80076da <DFU_Detach+0xbe>
    return;
 80076d8:	bf00      	nop
  }
}
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	20000048 	.word	0x20000048

080076e4 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076f4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d05b      	beq.n	80077b4 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	88db      	ldrh	r3, [r3, #6]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d02d      	beq.n	8007760 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800770a:	2b02      	cmp	r3, #2
 800770c:	d004      	beq.n	8007718 <DFU_Download+0x34>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007714:	2b05      	cmp	r3, #5
 8007716:	d11e      	bne.n	8007756 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	885b      	ldrh	r3, [r3, #2]
 800771c:	461a      	mov	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	88db      	ldrh	r3, [r3, #6]
 8007728:	461a      	mov	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2203      	movs	r2, #3
 8007734:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8007744:	68f9      	ldr	r1, [r7, #12]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800774c:	461a      	mov	r2, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fc13 	bl	8008f7a <USBD_CtlPrepareRx>
 8007754:	e02f      	b.n	80077b6 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fb71 	bl	8008e40 <USBD_CtlError>
 800775e:	e02a      	b.n	80077b6 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007766:	2b05      	cmp	r3, #5
 8007768:	d004      	beq.n	8007774 <DFU_Download+0x90>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007770:	2b02      	cmp	r3, #2
 8007772:	d11a      	bne.n	80077aa <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2206      	movs	r2, #6
 8007780:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80077a8:	e005      	b.n	80077b6 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 fb47 	bl	8008e40 <USBD_CtlError>
 80077b2:	e000      	b.n	80077b6 <DFU_Download+0xd2>
    return;
 80077b4:	bf00      	nop
    }
  }
}
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80077cc:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80077d4:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80c4 	beq.w	8007966 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	88db      	ldrh	r3, [r3, #6]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80a8 	beq.w	8007938 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d005      	beq.n	80077fe <DFU_Upload+0x42>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	f040 8090 	bne.w	800791e <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	461a      	mov	r2, r3
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	88db      	ldrh	r3, [r3, #6]
 800780e:	461a      	mov	r2, r3
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800781c:	2b00      	cmp	r3, #0
 800781e:	d12c      	bne.n	800787a <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007826:	2b03      	cmp	r3, #3
 8007828:	d901      	bls.n	800782e <DFU_Upload+0x72>
 800782a:	2202      	movs	r2, #2
 800782c:	e000      	b.n	8007830 <DFU_Upload+0x74>
 800782e:	2209      	movs	r2, #9
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2200      	movs	r2, #0
 800785e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2221      	movs	r2, #33	@ 0x21
 8007864:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2241      	movs	r2, #65	@ 0x41
 800786a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2203      	movs	r2, #3
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 fb55 	bl	8008f22 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007878:	e076      	b.n	8007968 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007880:	2b01      	cmp	r3, #1
 8007882:	d931      	bls.n	80078e8 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2209      	movs	r2, #9
 8007888:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80078b6:	3b02      	subs	r3, #2
 80078b8:	029a      	lsls	r2, r3, #10
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80078c0:	4413      	add	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	6979      	ldr	r1, [r7, #20]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80078d2:	4798      	blx	r3
 80078d4:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80078dc:	461a      	mov	r2, r3
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 fb1e 	bl	8008f22 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80078e6:	e03f      	b.n	8007968 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	220f      	movs	r2, #15
 80078ec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 fa92 	bl	8008e40 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800791c:	e024      	b.n	8007968 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2200      	movs	r2, #0
 800792a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 fa85 	bl	8008e40 <USBD_CtlError>
 8007936:	e017      	b.n	8007968 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007964:	e000      	b.n	8007968 <DFU_Upload+0x1ac>
    return;
 8007966:	bf00      	nop
  }
}
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800797e:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007986:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80a0 	beq.w	8007ad0 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007996:	2b03      	cmp	r3, #3
 8007998:	d002      	beq.n	80079a0 <DFU_GetStatus+0x30>
 800799a:	2b06      	cmp	r3, #6
 800799c:	d051      	beq.n	8007a42 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800799e:	e08e      	b.n	8007abe <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d034      	beq.n	8007a14 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2204      	movs	r2, #4
 80079ae:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10e      	bne.n	80079fe <DFU_GetStatus+0x8e>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b41      	cmp	r3, #65	@ 0x41
 80079e6:	d10a      	bne.n	80079fe <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80079f8:	2100      	movs	r1, #0
 80079fa:	4798      	blx	r3
      break;
 80079fc:	e05f      	b.n	8007abe <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8007a0e:	2101      	movs	r1, #1
 8007a10:	4798      	blx	r3
      break;
 8007a12:	e054      	b.n	8007abe <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2205      	movs	r2, #5
 8007a18:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8007a40:	e03d      	b.n	8007abe <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d116      	bne.n	8007a7a <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2207      	movs	r2, #7
 8007a50:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8007a78:	e020      	b.n	8007abc <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d11b      	bne.n	8007abc <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8007a84:	4b14      	ldr	r3, [pc, #80]	@ (8007ad8 <DFU_GetStatus+0x168>)
 8007a86:	7d1b      	ldrb	r3, [r3, #20]
 8007a88:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d015      	beq.n	8007abc <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8007abc:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8007ac4:	2206      	movs	r2, #6
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fa2a 	bl	8008f22 <USBD_CtlSendData>
 8007ace:	e000      	b.n	8007ad2 <DFU_GetStatus+0x162>
    return;
 8007ad0:	bf00      	nop
}
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20000048 	.word	0x20000048

08007adc <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007aea:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d042      	beq.n	8007b78 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007af8:	2b0a      	cmp	r3, #10
 8007afa:	d11e      	bne.n	8007b3a <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8007b38:	e01f      	b.n	8007b7a <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	220e      	movs	r2, #14
 8007b46:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8007b76:	e000      	b.n	8007b7a <DFU_ClearStatus+0x9e>
    return;
 8007b78:	bf00      	nop
  }
}
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b92:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f9bc 	bl	8008f22 <USBD_CtlSendData>
 8007baa:	e000      	b.n	8007bae <DFU_GetState+0x2a>
    return;
 8007bac:	bf00      	nop
}
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007bc2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d03f      	beq.n	8007c4a <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d013      	beq.n	8007bfc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d00e      	beq.n	8007bfc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007be4:	2b05      	cmp	r3, #5
 8007be6:	d009      	beq.n	8007bfc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8007bee:	2b06      	cmp	r3, #6
 8007bf0:	d004      	beq.n	8007bfc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007bf8:	2b09      	cmp	r3, #9
 8007bfa:	d127      	bne.n	8007c4c <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8007c48:	e000      	b.n	8007c4c <DFU_Abort+0x98>
    return;
 8007c4a:	bf00      	nop
  }
}
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
	...

08007c58 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c66:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d03b      	beq.n	8007ce6 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8007c76:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf0 <DFU_Leave+0x98>)
 8007c78:	7d1b      	ldrb	r3, [r3, #20]
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d016      	beq.n	8007cb0 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2206      	movs	r2, #6
 8007c86:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8007cae:	e01b      	b.n	8007ce8 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f86c 	bl	8007dba <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8007ce2:	f7ff f9b3 	bl	800704c <__NVIC_SystemReset>
    return;
 8007ce6:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000048 	.word	0x20000048

08007cf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e01f      	b.n	8007d4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	79fa      	ldrb	r2, [r7, #7]
 8007d3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f001 fc53 	bl	80095ec <USBD_LL_Init>
 8007d46:	4603      	mov	r3, r0
 8007d48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e016      	b.n	8007d9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d88:	f107 020e 	add.w	r2, r7, #14
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	4602      	mov	r2, r0
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b082      	sub	sp, #8
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fc6e 	bl	800968c <USBD_LL_Start>
 8007db0:	4603      	mov	r3, r0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fc7d 	bl	80096c2 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d009      	beq.n	8007de6 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6852      	ldr	r2, [r2, #4]
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	4611      	mov	r1, r2
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
  }

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e12:	2303      	movs	r3, #3
 8007e14:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	78fa      	ldrb	r2, [r7, #3]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	4798      	blx	r3
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
  }

  return USBD_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f000 ffa3 	bl	8008dcc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d01a      	beq.n	8007ee0 <USBD_LL_SetupStage+0x72>
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d822      	bhi.n	8007ef4 <USBD_LL_SetupStage+0x86>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <USBD_LL_SetupStage+0x4a>
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d00a      	beq.n	8007ecc <USBD_LL_SetupStage+0x5e>
 8007eb6:	e01d      	b.n	8007ef4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fa63 	bl	800838c <USBD_StdDevReq>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eca:	e020      	b.n	8007f0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fac7 	bl	8008468 <USBD_StdItfReq>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ede:	e016      	b.n	8007f0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fb06 	bl	80084fa <USBD_StdEPReq>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef2:	e00c      	b.n	8007f0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007efa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 fc1e 	bl	8009744 <USBD_LL_StallEP>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0c:	bf00      	nop
  }

  return ret;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	460b      	mov	r3, r1
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007f26:	7afb      	ldrb	r3, [r7, #11]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d138      	bne.n	8007f9e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007f32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d14a      	bne.n	8007fd4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d913      	bls.n	8007f72 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	4293      	cmp	r3, r2
 8007f62:	bf28      	it	cs
 8007f64:	4613      	movcs	r3, r2
 8007f66:	461a      	mov	r2, r3
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f001 f822 	bl	8008fb4 <USBD_CtlContinueRx>
 8007f70:	e030      	b.n	8007fd4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d10b      	bne.n	8007f96 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f001 f81d 	bl	8008fd6 <USBD_CtlSendStatus>
 8007f9c:	e01a      	b.n	8007fd4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d114      	bne.n	8007fd4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00e      	beq.n	8007fd4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	7afa      	ldrb	r2, [r7, #11]
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	4798      	blx	r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	e000      	b.n	8007fd6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d16b      	bne.n	80080ca <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3314      	adds	r3, #20
 8007ff6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d156      	bne.n	80080b0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	429a      	cmp	r2, r3
 800800c:	d914      	bls.n	8008038 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	1ad2      	subs	r2, r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	461a      	mov	r2, r3
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 ff97 	bl	8008f58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800802a:	2300      	movs	r3, #0
 800802c:	2200      	movs	r2, #0
 800802e:	2100      	movs	r1, #0
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f001 fc31 	bl	8009898 <USBD_LL_PrepareReceive>
 8008036:	e03b      	b.n	80080b0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	d11c      	bne.n	800807e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800804c:	429a      	cmp	r2, r3
 800804e:	d316      	bcc.n	800807e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800805a:	429a      	cmp	r2, r3
 800805c:	d20f      	bcs.n	800807e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800805e:	2200      	movs	r2, #0
 8008060:	2100      	movs	r1, #0
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 ff78 	bl	8008f58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008070:	2300      	movs	r3, #0
 8008072:	2200      	movs	r2, #0
 8008074:	2100      	movs	r1, #0
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f001 fc0e 	bl	8009898 <USBD_LL_PrepareReceive>
 800807c:	e018      	b.n	80080b0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b03      	cmp	r3, #3
 8008088:	d10b      	bne.n	80080a2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080a2:	2180      	movs	r1, #128	@ 0x80
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f001 fb4d 	bl	8009744 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 ffa6 	bl	8008ffc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d122      	bne.n	8008100 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fe98 	bl	8007df0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80080c8:	e01a      	b.n	8008100 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d114      	bne.n	8008100 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00e      	beq.n	8008100 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	7afa      	ldrb	r2, [r7, #11]
 80080ec:	4611      	mov	r1, r2
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	4798      	blx	r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	e000      	b.n	8008102 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800813a:	2303      	movs	r3, #3
 800813c:	e02f      	b.n	800819e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00f      	beq.n	8008168 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d009      	beq.n	8008168 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6852      	ldr	r2, [r2, #4]
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	4611      	mov	r1, r2
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008168:	2340      	movs	r3, #64	@ 0x40
 800816a:	2200      	movs	r2, #0
 800816c:	2100      	movs	r1, #0
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fac2 	bl	80096f8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2240      	movs	r2, #64	@ 0x40
 8008180:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008184:	2340      	movs	r3, #64	@ 0x40
 8008186:	2200      	movs	r2, #0
 8008188:	2180      	movs	r1, #128	@ 0x80
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fab4 	bl	80096f8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2240      	movs	r2, #64	@ 0x40
 800819a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2204      	movs	r2, #4
 80081e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b04      	cmp	r3, #4
 8008204:	d106      	bne.n	8008214 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800820c:	b2da      	uxtb	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	e012      	b.n	800825e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b03      	cmp	r3, #3
 8008242:	d10b      	bne.n	800825c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	e014      	b.n	80082aa <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b03      	cmp	r3, #3
 800828a:	d10d      	bne.n	80082a8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d007      	beq.n	80082a8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	78fa      	ldrb	r2, [r7, #3]
 80082a2:	4611      	mov	r1, r2
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b082      	sub	sp, #8
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	460b      	mov	r3, r1
 80082bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e014      	b.n	80082f6 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d10d      	bne.n	80082f4 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d007      	beq.n	80082f4 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ec:	78fa      	ldrb	r2, [r7, #3]
 80082ee:	4611      	mov	r1, r2
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6852      	ldr	r2, [r2, #4]
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	4611      	mov	r1, r2
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
  }

  return USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	3301      	adds	r3, #1
 8008362:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800836a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800836e:	021b      	lsls	r3, r3, #8
 8008370:	b21a      	sxth	r2, r3
 8008372:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008376:	4313      	orrs	r3, r2
 8008378:	b21b      	sxth	r3, r3
 800837a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800837c:	89fb      	ldrh	r3, [r7, #14]
}
 800837e:	4618      	mov	r0, r3
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083a2:	2b40      	cmp	r3, #64	@ 0x40
 80083a4:	d005      	beq.n	80083b2 <USBD_StdDevReq+0x26>
 80083a6:	2b40      	cmp	r3, #64	@ 0x40
 80083a8:	d853      	bhi.n	8008452 <USBD_StdDevReq+0xc6>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <USBD_StdDevReq+0x3a>
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d14f      	bne.n	8008452 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
 80083c0:	4603      	mov	r3, r0
 80083c2:	73fb      	strb	r3, [r7, #15]
      break;
 80083c4:	e04a      	b.n	800845c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	2b09      	cmp	r3, #9
 80083cc:	d83b      	bhi.n	8008446 <USBD_StdDevReq+0xba>
 80083ce:	a201      	add	r2, pc, #4	@ (adr r2, 80083d4 <USBD_StdDevReq+0x48>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	08008429 	.word	0x08008429
 80083d8:	0800843d 	.word	0x0800843d
 80083dc:	08008447 	.word	0x08008447
 80083e0:	08008433 	.word	0x08008433
 80083e4:	08008447 	.word	0x08008447
 80083e8:	08008407 	.word	0x08008407
 80083ec:	080083fd 	.word	0x080083fd
 80083f0:	08008447 	.word	0x08008447
 80083f4:	0800841f 	.word	0x0800841f
 80083f8:	08008411 	.word	0x08008411
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f9de 	bl	80087c0 <USBD_GetDescriptor>
          break;
 8008404:	e024      	b.n	8008450 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fb55 	bl	8008ab8 <USBD_SetAddress>
          break;
 800840e:	e01f      	b.n	8008450 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fb94 	bl	8008b40 <USBD_SetConfig>
 8008418:	4603      	mov	r3, r0
 800841a:	73fb      	strb	r3, [r7, #15]
          break;
 800841c:	e018      	b.n	8008450 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc33 	bl	8008c8c <USBD_GetConfig>
          break;
 8008426:	e013      	b.n	8008450 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fc64 	bl	8008cf8 <USBD_GetStatus>
          break;
 8008430:	e00e      	b.n	8008450 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fc93 	bl	8008d60 <USBD_SetFeature>
          break;
 800843a:	e009      	b.n	8008450 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fca2 	bl	8008d88 <USBD_ClrFeature>
          break;
 8008444:	e004      	b.n	8008450 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fcf9 	bl	8008e40 <USBD_CtlError>
          break;
 800844e:	bf00      	nop
      }
      break;
 8008450:	e004      	b.n	800845c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fcf3 	bl	8008e40 <USBD_CtlError>
      break;
 800845a:	bf00      	nop
  }

  return ret;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop

08008468 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800847e:	2b40      	cmp	r3, #64	@ 0x40
 8008480:	d005      	beq.n	800848e <USBD_StdItfReq+0x26>
 8008482:	2b40      	cmp	r3, #64	@ 0x40
 8008484:	d82f      	bhi.n	80084e6 <USBD_StdItfReq+0x7e>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <USBD_StdItfReq+0x26>
 800848a:	2b20      	cmp	r3, #32
 800848c:	d12b      	bne.n	80084e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	3b01      	subs	r3, #1
 8008498:	2b02      	cmp	r3, #2
 800849a:	d81d      	bhi.n	80084d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	889b      	ldrh	r3, [r3, #4]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d813      	bhi.n	80084ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	88db      	ldrh	r3, [r3, #6]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d110      	bne.n	80084e2 <USBD_StdItfReq+0x7a>
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10d      	bne.n	80084e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fd85 	bl	8008fd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084cc:	e009      	b.n	80084e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fcb5 	bl	8008e40 <USBD_CtlError>
          break;
 80084d6:	e004      	b.n	80084e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fcb0 	bl	8008e40 <USBD_CtlError>
          break;
 80084e0:	e000      	b.n	80084e4 <USBD_StdItfReq+0x7c>
          break;
 80084e2:	bf00      	nop
      }
      break;
 80084e4:	e004      	b.n	80084f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fca9 	bl	8008e40 <USBD_CtlError>
      break;
 80084ee:	bf00      	nop
  }

  return ret;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	889b      	ldrh	r3, [r3, #4]
 800850c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008516:	2b40      	cmp	r3, #64	@ 0x40
 8008518:	d007      	beq.n	800852a <USBD_StdEPReq+0x30>
 800851a:	2b40      	cmp	r3, #64	@ 0x40
 800851c:	f200 8145 	bhi.w	80087aa <USBD_StdEPReq+0x2b0>
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00c      	beq.n	800853e <USBD_StdEPReq+0x44>
 8008524:	2b20      	cmp	r3, #32
 8008526:	f040 8140 	bne.w	80087aa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	4798      	blx	r3
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
      break;
 800853c:	e13a      	b.n	80087b4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	2b03      	cmp	r3, #3
 8008544:	d007      	beq.n	8008556 <USBD_StdEPReq+0x5c>
 8008546:	2b03      	cmp	r3, #3
 8008548:	f300 8129 	bgt.w	800879e <USBD_StdEPReq+0x2a4>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d07f      	beq.n	8008650 <USBD_StdEPReq+0x156>
 8008550:	2b01      	cmp	r3, #1
 8008552:	d03c      	beq.n	80085ce <USBD_StdEPReq+0xd4>
 8008554:	e123      	b.n	800879e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d002      	beq.n	8008568 <USBD_StdEPReq+0x6e>
 8008562:	2b03      	cmp	r3, #3
 8008564:	d016      	beq.n	8008594 <USBD_StdEPReq+0x9a>
 8008566:	e02c      	b.n	80085c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <USBD_StdEPReq+0x90>
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b80      	cmp	r3, #128	@ 0x80
 8008572:	d00a      	beq.n	800858a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f8e3 	bl	8009744 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800857e:	2180      	movs	r1, #128	@ 0x80
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f8df 	bl	8009744 <USBD_LL_StallEP>
 8008586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008588:	e020      	b.n	80085cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fc57 	bl	8008e40 <USBD_CtlError>
              break;
 8008592:	e01b      	b.n	80085cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	885b      	ldrh	r3, [r3, #2]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10e      	bne.n	80085ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00b      	beq.n	80085ba <USBD_StdEPReq+0xc0>
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	2b80      	cmp	r3, #128	@ 0x80
 80085a6:	d008      	beq.n	80085ba <USBD_StdEPReq+0xc0>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	88db      	ldrh	r3, [r3, #6]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f8c5 	bl	8009744 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fd0b 	bl	8008fd6 <USBD_CtlSendStatus>

              break;
 80085c0:	e004      	b.n	80085cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fc3b 	bl	8008e40 <USBD_CtlError>
              break;
 80085ca:	bf00      	nop
          }
          break;
 80085cc:	e0ec      	b.n	80087a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d002      	beq.n	80085e0 <USBD_StdEPReq+0xe6>
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d016      	beq.n	800860c <USBD_StdEPReq+0x112>
 80085de:	e030      	b.n	8008642 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00d      	beq.n	8008602 <USBD_StdEPReq+0x108>
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b80      	cmp	r3, #128	@ 0x80
 80085ea:	d00a      	beq.n	8008602 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f8a7 	bl	8009744 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085f6:	2180      	movs	r1, #128	@ 0x80
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 f8a3 	bl	8009744 <USBD_LL_StallEP>
 80085fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008600:	e025      	b.n	800864e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fc1b 	bl	8008e40 <USBD_CtlError>
              break;
 800860a:	e020      	b.n	800864e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d11b      	bne.n	800864c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 f8ad 	bl	8009782 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fcd4 	bl	8008fd6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	4798      	blx	r3
 800863c:	4603      	mov	r3, r0
 800863e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008640:	e004      	b.n	800864c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fbfb 	bl	8008e40 <USBD_CtlError>
              break;
 800864a:	e000      	b.n	800864e <USBD_StdEPReq+0x154>
              break;
 800864c:	bf00      	nop
          }
          break;
 800864e:	e0ab      	b.n	80087a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d002      	beq.n	8008662 <USBD_StdEPReq+0x168>
 800865c:	2b03      	cmp	r3, #3
 800865e:	d032      	beq.n	80086c6 <USBD_StdEPReq+0x1cc>
 8008660:	e097      	b.n	8008792 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <USBD_StdEPReq+0x17e>
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b80      	cmp	r3, #128	@ 0x80
 800866c:	d004      	beq.n	8008678 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fbe5 	bl	8008e40 <USBD_CtlError>
                break;
 8008676:	e091      	b.n	800879c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800867c:	2b00      	cmp	r3, #0
 800867e:	da0b      	bge.n	8008698 <USBD_StdEPReq+0x19e>
 8008680:	7bbb      	ldrb	r3, [r7, #14]
 8008682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	3310      	adds	r3, #16
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	4413      	add	r3, r2
 8008694:	3304      	adds	r3, #4
 8008696:	e00b      	b.n	80086b0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	3304      	adds	r3, #4
 80086b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2202      	movs	r2, #2
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fc2f 	bl	8008f22 <USBD_CtlSendData>
              break;
 80086c4:	e06a      	b.n	800879c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da11      	bge.n	80086f2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	3324      	adds	r3, #36	@ 0x24
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d117      	bne.n	8008718 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fba8 	bl	8008e40 <USBD_CtlError>
                  break;
 80086f0:	e054      	b.n	800879c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	f003 020f 	and.w	r2, r3, #15
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4613      	mov	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fb95 	bl	8008e40 <USBD_CtlError>
                  break;
 8008716:	e041      	b.n	800879c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871c:	2b00      	cmp	r3, #0
 800871e:	da0b      	bge.n	8008738 <USBD_StdEPReq+0x23e>
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	3310      	adds	r3, #16
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	3304      	adds	r3, #4
 8008736:	e00b      	b.n	8008750 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	3304      	adds	r3, #4
 8008750:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <USBD_StdEPReq+0x264>
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	2b80      	cmp	r3, #128	@ 0x80
 800875c:	d103      	bne.n	8008766 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	e00e      	b.n	8008784 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 f828 	bl	80097c0 <USBD_LL_IsStallEP>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2201      	movs	r2, #1
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	e002      	b.n	8008784 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2202      	movs	r2, #2
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fbc9 	bl	8008f22 <USBD_CtlSendData>
              break;
 8008790:	e004      	b.n	800879c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fb53 	bl	8008e40 <USBD_CtlError>
              break;
 800879a:	bf00      	nop
          }
          break;
 800879c:	e004      	b.n	80087a8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fb4d 	bl	8008e40 <USBD_CtlError>
          break;
 80087a6:	bf00      	nop
      }
      break;
 80087a8:	e004      	b.n	80087b4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fb47 	bl	8008e40 <USBD_CtlError>
      break;
 80087b2:	bf00      	nop
  }

  return ret;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	885b      	ldrh	r3, [r3, #2]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	2b06      	cmp	r3, #6
 80087e2:	f200 813b 	bhi.w	8008a5c <USBD_GetDescriptor+0x29c>
 80087e6:	a201      	add	r2, pc, #4	@ (adr r2, 80087ec <USBD_GetDescriptor+0x2c>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008809 	.word	0x08008809
 80087f0:	08008821 	.word	0x08008821
 80087f4:	08008861 	.word	0x08008861
 80087f8:	08008a5d 	.word	0x08008a5d
 80087fc:	08008a5d 	.word	0x08008a5d
 8008800:	080089fd 	.word	0x080089fd
 8008804:	08008a29 	.word	0x08008a29
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	7c12      	ldrb	r2, [r2, #16]
 8008814:	f107 0108 	add.w	r1, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
      break;
 800881e:	e125      	b.n	8008a6c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	7c1b      	ldrb	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10d      	bne.n	8008844 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008830:	f107 0208 	add.w	r2, r7, #8
 8008834:	4610      	mov	r0, r2
 8008836:	4798      	blx	r3
 8008838:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	2202      	movs	r2, #2
 8008840:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008842:	e113      	b.n	8008a6c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800884a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884c:	f107 0208 	add.w	r2, r7, #8
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
 8008854:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3301      	adds	r3, #1
 800885a:	2202      	movs	r2, #2
 800885c:	701a      	strb	r2, [r3, #0]
      break;
 800885e:	e105      	b.n	8008a6c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	885b      	ldrh	r3, [r3, #2]
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b05      	cmp	r3, #5
 8008868:	f200 80ac 	bhi.w	80089c4 <USBD_GetDescriptor+0x204>
 800886c:	a201      	add	r2, pc, #4	@ (adr r2, 8008874 <USBD_GetDescriptor+0xb4>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	0800888d 	.word	0x0800888d
 8008878:	080088c1 	.word	0x080088c1
 800887c:	080088f5 	.word	0x080088f5
 8008880:	08008929 	.word	0x08008929
 8008884:	0800895d 	.word	0x0800895d
 8008888:	08008991 	.word	0x08008991
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	7c12      	ldrb	r2, [r2, #16]
 80088a4:	f107 0108 	add.w	r1, r7, #8
 80088a8:	4610      	mov	r0, r2
 80088aa:	4798      	blx	r3
 80088ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ae:	e0a4      	b.n	80089fa <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fac4 	bl	8008e40 <USBD_CtlError>
            err++;
 80088b8:	7afb      	ldrb	r3, [r7, #11]
 80088ba:	3301      	adds	r3, #1
 80088bc:	72fb      	strb	r3, [r7, #11]
          break;
 80088be:	e09c      	b.n	80089fa <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e2:	e08a      	b.n	80089fa <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 faaa 	bl	8008e40 <USBD_CtlError>
            err++;
 80088ec:	7afb      	ldrb	r3, [r7, #11]
 80088ee:	3301      	adds	r3, #1
 80088f0:	72fb      	strb	r3, [r7, #11]
          break;
 80088f2:	e082      	b.n	80089fa <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	7c12      	ldrb	r2, [r2, #16]
 800890c:	f107 0108 	add.w	r1, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008916:	e070      	b.n	80089fa <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fa90 	bl	8008e40 <USBD_CtlError>
            err++;
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	3301      	adds	r3, #1
 8008924:	72fb      	strb	r3, [r7, #11]
          break;
 8008926:	e068      	b.n	80089fa <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	7c12      	ldrb	r2, [r2, #16]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894a:	e056      	b.n	80089fa <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fa76 	bl	8008e40 <USBD_CtlError>
            err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
          break;
 800895a:	e04e      	b.n	80089fa <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	7c12      	ldrb	r2, [r2, #16]
 8008974:	f107 0108 	add.w	r1, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897e:	e03c      	b.n	80089fa <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fa5c 	bl	8008e40 <USBD_CtlError>
            err++;
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	3301      	adds	r3, #1
 800898c:	72fb      	strb	r3, [r7, #11]
          break;
 800898e:	e034      	b.n	80089fa <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	7c12      	ldrb	r2, [r2, #16]
 80089a8:	f107 0108 	add.w	r1, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b2:	e022      	b.n	80089fa <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa42 	bl	8008e40 <USBD_CtlError>
            err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
          break;
 80089c2:	e01a      	b.n	80089fa <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00c      	beq.n	80089ea <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	8852      	ldrh	r2, [r2, #2]
 80089dc:	b2d1      	uxtb	r1, r2
 80089de:	f107 0208 	add.w	r2, r7, #8
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	4798      	blx	r3
 80089e6:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80089e8:	e006      	b.n	80089f8 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa27 	bl	8008e40 <USBD_CtlError>
            err++;
 80089f2:	7afb      	ldrb	r3, [r7, #11]
 80089f4:	3301      	adds	r3, #1
 80089f6:	72fb      	strb	r3, [r7, #11]
          break;
 80089f8:	bf00      	nop
      }
      break;
 80089fa:	e037      	b.n	8008a6c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7c1b      	ldrb	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d109      	bne.n	8008a18 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a0c:	f107 0208 	add.w	r2, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a16:	e029      	b.n	8008a6c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa10 	bl	8008e40 <USBD_CtlError>
        err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
      break;
 8008a26:	e021      	b.n	8008a6c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	7c1b      	ldrb	r3, [r3, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10d      	bne.n	8008a4c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a38:	f107 0208 	add.w	r2, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3301      	adds	r3, #1
 8008a46:	2207      	movs	r2, #7
 8008a48:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a4a:	e00f      	b.n	8008a6c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f9f6 	bl	8008e40 <USBD_CtlError>
        err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
      break;
 8008a5a:	e007      	b.n	8008a6c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f9ee 	bl	8008e40 <USBD_CtlError>
      err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
      break;
 8008a6a:	bf00      	nop
  }

  if (err != 0U)
 8008a6c:	7afb      	ldrb	r3, [r7, #11]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d11e      	bne.n	8008ab0 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	88db      	ldrh	r3, [r3, #6]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d016      	beq.n	8008aa8 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008a7a:	893b      	ldrh	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00e      	beq.n	8008a9e <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	88da      	ldrh	r2, [r3, #6]
 8008a84:	893b      	ldrh	r3, [r7, #8]
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bf28      	it	cs
 8008a8a:	4613      	movcs	r3, r2
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a90:	893b      	ldrh	r3, [r7, #8]
 8008a92:	461a      	mov	r2, r3
 8008a94:	68f9      	ldr	r1, [r7, #12]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa43 	bl	8008f22 <USBD_CtlSendData>
 8008a9c:	e009      	b.n	8008ab2 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f9cd 	bl	8008e40 <USBD_CtlError>
 8008aa6:	e004      	b.n	8008ab2 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fa94 	bl	8008fd6 <USBD_CtlSendStatus>
 8008aae:	e000      	b.n	8008ab2 <USBD_GetDescriptor+0x2f2>
    return;
 8008ab0:	bf00      	nop
  }
}
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d131      	bne.n	8008b2e <USBD_SetAddress+0x76>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d12d      	bne.n	8008b2e <USBD_SetAddress+0x76>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ad8:	d829      	bhi.n	8008b2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	885b      	ldrh	r3, [r3, #2]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ae4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d104      	bne.n	8008afc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f9a3 	bl	8008e40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afa:	e01d      	b.n	8008b38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7bfa      	ldrb	r2, [r7, #15]
 8008b00:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fe85 	bl	8009818 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa61 	bl	8008fd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b22:	e009      	b.n	8008b38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2c:	e004      	b.n	8008b38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f985 	bl	8008e40 <USBD_CtlError>
  }
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	4b4c      	ldr	r3, [pc, #304]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008b56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b58:	4b4b      	ldr	r3, [pc, #300]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d905      	bls.n	8008b6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f96c 	bl	8008e40 <USBD_CtlError>
    return USBD_FAIL;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e088      	b.n	8008c7e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d002      	beq.n	8008b7e <USBD_SetConfig+0x3e>
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d025      	beq.n	8008bc8 <USBD_SetConfig+0x88>
 8008b7c:	e071      	b.n	8008c62 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b7e:	4b42      	ldr	r3, [pc, #264]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d01c      	beq.n	8008bc0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008b86:	4b40      	ldr	r3, [pc, #256]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b90:	4b3d      	ldr	r3, [pc, #244]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff f935 	bl	8007e06 <USBD_SetClassConfig>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f949 	bl	8008e40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bae:	e065      	b.n	8008c7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fa10 	bl	8008fd6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2203      	movs	r2, #3
 8008bba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008bbe:	e05d      	b.n	8008c7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fa08 	bl	8008fd6 <USBD_CtlSendStatus>
      break;
 8008bc6:	e059      	b.n	8008c7c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d112      	bne.n	8008bf6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008be2:	4b29      	ldr	r3, [pc, #164]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff f928 	bl	8007e3e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9f1 	bl	8008fd6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bf4:	e042      	b.n	8008c7c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008bf6:	4b24      	ldr	r3, [pc, #144]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d02a      	beq.n	8008c5a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff f916 	bl	8007e3e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c12:	4b1d      	ldr	r3, [pc, #116]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff f8ef 	bl	8007e06 <USBD_SetClassConfig>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00f      	beq.n	8008c52 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f903 	bl	8008e40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff f8fb 	bl	8007e3e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c50:	e014      	b.n	8008c7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9bf 	bl	8008fd6 <USBD_CtlSendStatus>
      break;
 8008c58:	e010      	b.n	8008c7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f9bb 	bl	8008fd6 <USBD_CtlSendStatus>
      break;
 8008c60:	e00c      	b.n	8008c7c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f8eb 	bl	8008e40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c6a:	4b07      	ldr	r3, [pc, #28]	@ (8008c88 <USBD_SetConfig+0x148>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f7ff f8e4 	bl	8007e3e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c76:	2303      	movs	r3, #3
 8008c78:	73fb      	strb	r3, [r7, #15]
      break;
 8008c7a:	bf00      	nop
  }

  return ret;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	200003b3 	.word	0x200003b3

08008c8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	88db      	ldrh	r3, [r3, #6]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d004      	beq.n	8008ca8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f8cd 	bl	8008e40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ca6:	e023      	b.n	8008cf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	dc02      	bgt.n	8008cba <USBD_GetConfig+0x2e>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dc03      	bgt.n	8008cc0 <USBD_GetConfig+0x34>
 8008cb8:	e015      	b.n	8008ce6 <USBD_GetConfig+0x5a>
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d00b      	beq.n	8008cd6 <USBD_GetConfig+0x4a>
 8008cbe:	e012      	b.n	8008ce6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	2201      	movs	r2, #1
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f927 	bl	8008f22 <USBD_CtlSendData>
        break;
 8008cd4:	e00c      	b.n	8008cf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	2201      	movs	r2, #1
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f91f 	bl	8008f22 <USBD_CtlSendData>
        break;
 8008ce4:	e004      	b.n	8008cf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f8a9 	bl	8008e40 <USBD_CtlError>
        break;
 8008cee:	bf00      	nop
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d81e      	bhi.n	8008d4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	88db      	ldrh	r3, [r3, #6]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d004      	beq.n	8008d22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f890 	bl	8008e40 <USBD_CtlError>
        break;
 8008d20:	e01a      	b.n	8008d58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f043 0202 	orr.w	r2, r3, #2
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	330c      	adds	r3, #12
 8008d42:	2202      	movs	r2, #2
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f8eb 	bl	8008f22 <USBD_CtlSendData>
      break;
 8008d4c:	e004      	b.n	8008d58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f875 	bl	8008e40 <USBD_CtlError>
      break;
 8008d56:	bf00      	nop
  }
}
 8008d58:	bf00      	nop
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d106      	bne.n	8008d80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f92b 	bl	8008fd6 <USBD_CtlSendStatus>
  }
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d80b      	bhi.n	8008db8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	885b      	ldrh	r3, [r3, #2]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d10c      	bne.n	8008dc2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f910 	bl	8008fd6 <USBD_CtlSendStatus>
      }
      break;
 8008db6:	e004      	b.n	8008dc2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f840 	bl	8008e40 <USBD_CtlError>
      break;
 8008dc0:	e000      	b.n	8008dc4 <USBD_ClrFeature+0x3c>
      break;
 8008dc2:	bf00      	nop
  }
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	781a      	ldrb	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f7ff faa8 	bl	800834c <SWAPBYTE>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f7ff fa9b 	bl	800834c <SWAPBYTE>
 8008e16:	4603      	mov	r3, r0
 8008e18:	461a      	mov	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff fa8e 	bl	800834c <SWAPBYTE>
 8008e30:	4603      	mov	r3, r0
 8008e32:	461a      	mov	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	80da      	strh	r2, [r3, #6]
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e4a:	2180      	movs	r1, #128	@ 0x80
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fc79 	bl	8009744 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e52:	2100      	movs	r1, #0
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fc75 	bl	8009744 <USBD_LL_StallEP>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d036      	beq.n	8008ee6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e7c:	6938      	ldr	r0, [r7, #16]
 8008e7e:	f000 f836 	bl	8008eee <USBD_GetLen>
 8008e82:	4603      	mov	r3, r0
 8008e84:	3301      	adds	r3, #1
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e90:	7dfb      	ldrb	r3, [r7, #23]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	4413      	add	r3, r2
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	7812      	ldrb	r2, [r2, #0]
 8008e9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	2203      	movs	r2, #3
 8008eaa:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eac:	7dfb      	ldrb	r3, [r7, #23]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008eb2:	e013      	b.n	8008edc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4413      	add	r3, r2
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	613b      	str	r3, [r7, #16]
    idx++;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ed6:	7dfb      	ldrb	r3, [r7, #23]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e7      	bne.n	8008eb4 <USBD_GetString+0x52>
 8008ee4:	e000      	b.n	8008ee8 <USBD_GetString+0x86>
    return;
 8008ee6:	bf00      	nop
  }
}
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008efe:	e005      	b.n	8008f0c <USBD_GetLen+0x1e>
  {
    len++;
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	3301      	adds	r3, #1
 8008f04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f5      	bne.n	8008f00 <USBD_GetLen+0x12>
  }

  return len;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2202      	movs	r2, #2
 8008f32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	2100      	movs	r1, #0
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fc84 	bl	8009856 <USBD_LL_Transmit>

  return USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fc73 	bl	8009856 <USBD_LL_Transmit>

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2203      	movs	r2, #3
 8008f8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fc77 	bl	8009898 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fc66 	bl	8009898 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fc32 	bl	8009856 <USBD_LL_Transmit>

  return USBD_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2205      	movs	r2, #5
 8009008:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800900c:	2300      	movs	r3, #0
 800900e:	2200      	movs	r2, #0
 8009010:	2100      	movs	r1, #0
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fc40 	bl	8009898 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009028:	2200      	movs	r2, #0
 800902a:	4912      	ldr	r1, [pc, #72]	@ (8009074 <MX_USB_DEVICE_Init+0x50>)
 800902c:	4812      	ldr	r0, [pc, #72]	@ (8009078 <MX_USB_DEVICE_Init+0x54>)
 800902e:	f7fe fe61 	bl	8007cf4 <USBD_Init>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009038:	f7f7 fd50 	bl	8000adc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800903c:	490f      	ldr	r1, [pc, #60]	@ (800907c <MX_USB_DEVICE_Init+0x58>)
 800903e:	480e      	ldr	r0, [pc, #56]	@ (8009078 <MX_USB_DEVICE_Init+0x54>)
 8009040:	f7fe fe88 	bl	8007d54 <USBD_RegisterClass>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800904a:	f7f7 fd47 	bl	8000adc <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800904e:	490c      	ldr	r1, [pc, #48]	@ (8009080 <MX_USB_DEVICE_Init+0x5c>)
 8009050:	4809      	ldr	r0, [pc, #36]	@ (8009078 <MX_USB_DEVICE_Init+0x54>)
 8009052:	f7fe facd 	bl	80075f0 <USBD_DFU_RegisterMedia>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800905c:	f7f7 fd3e 	bl	8000adc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009060:	4805      	ldr	r0, [pc, #20]	@ (8009078 <MX_USB_DEVICE_Init+0x54>)
 8009062:	f7fe fe9e 	bl	8007da2 <USBD_Start>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800906c:	f7f7 fd36 	bl	8000adc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009070:	bf00      	nop
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20000070 	.word	0x20000070
 8009078:	200003b4 	.word	0x200003b4
 800907c:	2000000c 	.word	0x2000000c
 8009080:	200000c0 	.word	0x200000c0

08009084 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	6039      	str	r1, [r7, #0]
 800908e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2212      	movs	r2, #18
 8009094:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009096:	4b03      	ldr	r3, [pc, #12]	@ (80090a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	2000008c 	.word	0x2000008c

080090a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	6039      	str	r1, [r7, #0]
 80090b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2204      	movs	r2, #4
 80090b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090ba:	4b03      	ldr	r3, [pc, #12]	@ (80090c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	200000a0 	.word	0x200000a0

080090cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4907      	ldr	r1, [pc, #28]	@ (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
 80090e2:	4808      	ldr	r0, [pc, #32]	@ (8009104 <USBD_FS_ProductStrDescriptor+0x38>)
 80090e4:	f7ff febd 	bl	8008e62 <USBD_GetString>
 80090e8:	e004      	b.n	80090f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	4904      	ldr	r1, [pc, #16]	@ (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
 80090ee:	4805      	ldr	r0, [pc, #20]	@ (8009104 <USBD_FS_ProductStrDescriptor+0x38>)
 80090f0:	f7ff feb7 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090f4:	4b02      	ldr	r3, [pc, #8]	@ (8009100 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20000684 	.word	0x20000684
 8009104:	080099d4 	.word	0x080099d4

08009108 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	6039      	str	r1, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	4904      	ldr	r1, [pc, #16]	@ (8009128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009118:	4804      	ldr	r0, [pc, #16]	@ (800912c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800911a:	f7ff fea2 	bl	8008e62 <USBD_GetString>
  return USBD_StrDesc;
 800911e:	4b02      	ldr	r3, [pc, #8]	@ (8009128 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	20000684 	.word	0x20000684
 800912c:	080099f4 	.word	0x080099f4

08009130 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	221a      	movs	r2, #26
 8009140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009142:	f000 f843 	bl	80091cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009146:	4b02      	ldr	r3, [pc, #8]	@ (8009150 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	200000a4 	.word	0x200000a4

08009154 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009160:	79fb      	ldrb	r3, [r7, #7]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	4907      	ldr	r1, [pc, #28]	@ (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
 800916a:	4808      	ldr	r0, [pc, #32]	@ (800918c <USBD_FS_ConfigStrDescriptor+0x38>)
 800916c:	f7ff fe79 	bl	8008e62 <USBD_GetString>
 8009170:	e004      	b.n	800917c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4904      	ldr	r1, [pc, #16]	@ (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009176:	4805      	ldr	r0, [pc, #20]	@ (800918c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009178:	f7ff fe73 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	@ (8009188 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000684 	.word	0x20000684
 800918c:	08009a08 	.word	0x08009a08

08009190 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d105      	bne.n	80091ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4907      	ldr	r1, [pc, #28]	@ (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091a6:	4808      	ldr	r0, [pc, #32]	@ (80091c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091a8:	f7ff fe5b 	bl	8008e62 <USBD_GetString>
 80091ac:	e004      	b.n	80091b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	4904      	ldr	r1, [pc, #16]	@ (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091b2:	4805      	ldr	r0, [pc, #20]	@ (80091c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091b4:	f7ff fe55 	bl	8008e62 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091b8:	4b02      	ldr	r3, [pc, #8]	@ (80091c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000684 	.word	0x20000684
 80091c8:	08009a14 	.word	0x08009a14

080091cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009210 <Get_SerialNum+0x44>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009214 <Get_SerialNum+0x48>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091de:	4b0e      	ldr	r3, [pc, #56]	@ (8009218 <Get_SerialNum+0x4c>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4413      	add	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091f2:	2208      	movs	r2, #8
 80091f4:	4909      	ldr	r1, [pc, #36]	@ (800921c <Get_SerialNum+0x50>)
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 f814 	bl	8009224 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091fc:	2204      	movs	r2, #4
 80091fe:	4908      	ldr	r1, [pc, #32]	@ (8009220 <Get_SerialNum+0x54>)
 8009200:	68b8      	ldr	r0, [r7, #8]
 8009202:	f000 f80f 	bl	8009224 <IntToUnicode>
  }
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	1fff7a10 	.word	0x1fff7a10
 8009214:	1fff7a14 	.word	0x1fff7a14
 8009218:	1fff7a18 	.word	0x1fff7a18
 800921c:	200000a6 	.word	0x200000a6
 8009220:	200000b6 	.word	0x200000b6

08009224 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4613      	mov	r3, r2
 8009230:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009236:	2300      	movs	r3, #0
 8009238:	75fb      	strb	r3, [r7, #23]
 800923a:	e027      	b.n	800928c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	0f1b      	lsrs	r3, r3, #28
 8009240:	2b09      	cmp	r3, #9
 8009242:	d80b      	bhi.n	800925c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	0f1b      	lsrs	r3, r3, #28
 8009248:	b2da      	uxtb	r2, r3
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4619      	mov	r1, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	440b      	add	r3, r1
 8009254:	3230      	adds	r2, #48	@ 0x30
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	e00a      	b.n	8009272 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	0f1b      	lsrs	r3, r3, #28
 8009260:	b2da      	uxtb	r2, r3
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	005b      	lsls	r3, r3, #1
 8009266:	4619      	mov	r1, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	440b      	add	r3, r1
 800926c:	3237      	adds	r2, #55	@ 0x37
 800926e:	b2d2      	uxtb	r2, r2
 8009270:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	3301      	adds	r3, #1
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	4413      	add	r3, r2
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	3301      	adds	r3, #1
 800928a:	75fb      	strb	r3, [r7, #23]
 800928c:	7dfa      	ldrb	r2, [r7, #23]
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	429a      	cmp	r2, r3
 8009292:	d3d3      	bcc.n	800923c <IntToUnicode+0x18>
  }
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80092a2:	b480      	push	{r7}
 80092a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80092a6:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80092b2:	b480      	push	{r7}
 80092b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80092b6:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80092ca:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80092e4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b085      	sub	sp, #20
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 80092fe:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	460b      	mov	r3, r1
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800931a:	7afb      	ldrb	r3, [r7, #11]
 800931c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800931e:	bf00      	nop
  }
  return (USBD_OK);
 8009320:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
	...

08009330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b0a0      	sub	sp, #128	@ 0x80
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009338:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	605a      	str	r2, [r3, #4]
 8009342:	609a      	str	r2, [r3, #8]
 8009344:	60da      	str	r2, [r3, #12]
 8009346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009348:	f107 0314 	add.w	r3, r7, #20
 800934c:	2258      	movs	r2, #88	@ 0x58
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fb07 	bl	8009964 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800935e:	d155      	bne.n	800940c <HAL_PCD_MspInit+0xdc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009360:	2320      	movs	r3, #32
 8009362:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009364:	2300      	movs	r3, #0
 8009366:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009368:	f107 0314 	add.w	r3, r7, #20
 800936c:	4618      	mov	r0, r3
 800936e:	f7fb fb6b 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8009378:	f7f7 fbb0 	bl	8000adc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800937c:	2300      	movs	r3, #0
 800937e:	613b      	str	r3, [r7, #16]
 8009380:	4b24      	ldr	r3, [pc, #144]	@ (8009414 <HAL_PCD_MspInit+0xe4>)
 8009382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009384:	4a23      	ldr	r2, [pc, #140]	@ (8009414 <HAL_PCD_MspInit+0xe4>)
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	6313      	str	r3, [r2, #48]	@ 0x30
 800938c:	4b21      	ldr	r3, [pc, #132]	@ (8009414 <HAL_PCD_MspInit+0xe4>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	613b      	str	r3, [r7, #16]
 8009396:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009398:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800939c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800939e:	2302      	movs	r3, #2
 80093a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093a6:	2303      	movs	r3, #3
 80093a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80093aa:	230a      	movs	r3, #10
 80093ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80093b2:	4619      	mov	r1, r3
 80093b4:	4818      	ldr	r0, [pc, #96]	@ (8009418 <HAL_PCD_MspInit+0xe8>)
 80093b6:	f7f8 fb23 	bl	8001a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80093ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093c0:	2300      	movs	r3, #0
 80093c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80093c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80093cc:	4619      	mov	r1, r3
 80093ce:	4812      	ldr	r0, [pc, #72]	@ (8009418 <HAL_PCD_MspInit+0xe8>)
 80093d0:	f7f8 fb16 	bl	8001a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009414 <HAL_PCD_MspInit+0xe4>)
 80093d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009414 <HAL_PCD_MspInit+0xe4>)
 80093da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093de:	6353      	str	r3, [r2, #52]	@ 0x34
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009414 <HAL_PCD_MspInit+0xe4>)
 80093e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e8:	4a0a      	ldr	r2, [pc, #40]	@ (8009414 <HAL_PCD_MspInit+0xe4>)
 80093ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80093f0:	4b08      	ldr	r3, [pc, #32]	@ (8009414 <HAL_PCD_MspInit+0xe4>)
 80093f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093f8:	60fb      	str	r3, [r7, #12]
 80093fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093fc:	2200      	movs	r2, #0
 80093fe:	2100      	movs	r1, #0
 8009400:	2043      	movs	r0, #67	@ 0x43
 8009402:	f7f8 fac6 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009406:	2043      	movs	r0, #67	@ 0x43
 8009408:	f7f8 fadf 	bl	80019ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800940c:	bf00      	nop
 800940e:	3780      	adds	r7, #128	@ 0x80
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	40023800 	.word	0x40023800
 8009418:	40020000 	.word	0x40020000

0800941c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8009430:	4619      	mov	r1, r3
 8009432:	4610      	mov	r0, r2
 8009434:	f7fe fd1b 	bl	8007e6e <USBD_LL_SetupStage>
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009452:	78fa      	ldrb	r2, [r7, #3]
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	4613      	mov	r3, r2
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	4619      	mov	r1, r3
 800946a:	f7fe fd55 	bl	8007f18 <USBD_LL_DataOutStage>
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009488:	78fa      	ldrb	r2, [r7, #3]
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	4613      	mov	r3, r2
 800948e:	00db      	lsls	r3, r3, #3
 8009490:	1a9b      	subs	r3, r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	440b      	add	r3, r1
 8009496:	3348      	adds	r3, #72	@ 0x48
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	4619      	mov	r1, r3
 800949e:	f7fe fd9e 	bl	8007fde <USBD_LL_DataInStage>
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe feb2 	bl	8008222 <USBD_LL_SOF>
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80094ce:	2301      	movs	r3, #1
 80094d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d001      	beq.n	80094de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094da:	f7f7 faff 	bl	8000adc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80094e4:	7bfa      	ldrb	r2, [r7, #15]
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fe5c 	bl	80081a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fe08 	bl	800810a <USBD_LL_Reset>
}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fe57 	bl	80081c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6812      	ldr	r2, [r2, #0]
 8009526:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800952a:	f043 0301 	orr.w	r3, r3, #1
 800952e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d005      	beq.n	8009544 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009538:	4b04      	ldr	r3, [pc, #16]	@ (800954c <HAL_PCD_SuspendCallback+0x48>)
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	4a03      	ldr	r2, [pc, #12]	@ (800954c <HAL_PCD_SuspendCallback+0x48>)
 800953e:	f043 0306 	orr.w	r3, r3, #6
 8009542:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	e000ed00 	.word	0xe000ed00

08009550 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe fe47 	bl	80081f2 <USBD_LL_Resume>
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800957e:	78fa      	ldrb	r2, [r7, #3]
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe fe95 	bl	80082b2 <USBD_LL_IsoOUTIncomplete>
}
 8009588:	bf00      	nop
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80095a2:	78fa      	ldrb	r2, [r7, #3]
 80095a4:	4611      	mov	r1, r2
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fe5d 	bl	8008266 <USBD_LL_IsoINIncomplete>
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fe9b 	bl	80082fe <USBD_LL_DevConnected>
}
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe fe98 	bl	8008314 <USBD_LL_DevDisconnected>
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d13f      	bne.n	800967c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095fc:	4a22      	ldr	r2, [pc, #136]	@ (8009688 <USBD_LL_Init+0x9c>)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a20      	ldr	r2, [pc, #128]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009608:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800960c:	4b1e      	ldr	r3, [pc, #120]	@ (8009688 <USBD_LL_Init+0x9c>)
 800960e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009612:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009614:	4b1c      	ldr	r3, [pc, #112]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009616:	2206      	movs	r2, #6
 8009618:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800961a:	4b1b      	ldr	r3, [pc, #108]	@ (8009688 <USBD_LL_Init+0x9c>)
 800961c:	2202      	movs	r2, #2
 800961e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009620:	4b19      	ldr	r3, [pc, #100]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009622:	2200      	movs	r2, #0
 8009624:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009626:	4b18      	ldr	r3, [pc, #96]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009628:	2202      	movs	r2, #2
 800962a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800962c:	4b16      	ldr	r3, [pc, #88]	@ (8009688 <USBD_LL_Init+0x9c>)
 800962e:	2201      	movs	r2, #1
 8009630:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009632:	4b15      	ldr	r3, [pc, #84]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009634:	2200      	movs	r2, #0
 8009636:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009638:	4b13      	ldr	r3, [pc, #76]	@ (8009688 <USBD_LL_Init+0x9c>)
 800963a:	2200      	movs	r2, #0
 800963c:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800963e:	4b12      	ldr	r3, [pc, #72]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009640:	2201      	movs	r2, #1
 8009642:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009644:	4b10      	ldr	r3, [pc, #64]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009646:	2201      	movs	r2, #1
 8009648:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800964a:	4b0f      	ldr	r3, [pc, #60]	@ (8009688 <USBD_LL_Init+0x9c>)
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009650:	480d      	ldr	r0, [pc, #52]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009652:	f7f9 fe26 	bl	80032a2 <HAL_PCD_Init>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800965c:	f7f7 fa3e 	bl	8000adc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009660:	2180      	movs	r1, #128	@ 0x80
 8009662:	4809      	ldr	r0, [pc, #36]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009664:	f7fa ff8f 	bl	8004586 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009668:	2240      	movs	r2, #64	@ 0x40
 800966a:	2100      	movs	r1, #0
 800966c:	4806      	ldr	r0, [pc, #24]	@ (8009688 <USBD_LL_Init+0x9c>)
 800966e:	f7fa ff43 	bl	80044f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009672:	2280      	movs	r2, #128	@ 0x80
 8009674:	2101      	movs	r1, #1
 8009676:	4804      	ldr	r0, [pc, #16]	@ (8009688 <USBD_LL_Init+0x9c>)
 8009678:	f7fa ff3e 	bl	80044f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20000884 	.word	0x20000884

0800968c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f9 ff21 	bl	80034ea <HAL_PCD_Start>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f000 f92c 	bl	800990c <USBD_Get_USB_Status>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f9 ff39 	bl	8003550 <HAL_PCD_Stop>
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f911 	bl	800990c <USBD_Get_USB_Status>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	461a      	mov	r2, r3
 8009706:	4603      	mov	r3, r0
 8009708:	70fb      	strb	r3, [r7, #3]
 800970a:	460b      	mov	r3, r1
 800970c:	70bb      	strb	r3, [r7, #2]
 800970e:	4613      	mov	r3, r2
 8009710:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009720:	78bb      	ldrb	r3, [r7, #2]
 8009722:	883a      	ldrh	r2, [r7, #0]
 8009724:	78f9      	ldrb	r1, [r7, #3]
 8009726:	f7fa fb50 	bl	8003dca <HAL_PCD_EP_Open>
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f8eb 	bl	800990c <USBD_Get_USB_Status>
 8009736:	4603      	mov	r3, r0
 8009738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973a:	7bbb      	ldrb	r3, [r7, #14]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800975e:	78fa      	ldrb	r2, [r7, #3]
 8009760:	4611      	mov	r1, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f7fa fc2e 	bl	8003fc4 <HAL_PCD_EP_SetStall>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f8cc 	bl	800990c <USBD_Get_USB_Status>
 8009774:	4603      	mov	r3, r0
 8009776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009778:	7bbb      	ldrb	r3, [r7, #14]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800979c:	78fa      	ldrb	r2, [r7, #3]
 800979e:	4611      	mov	r1, r2
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fa fc73 	bl	800408c <HAL_PCD_EP_ClrStall>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 f8ad 	bl	800990c <USBD_Get_USB_Status>
 80097b2:	4603      	mov	r3, r0
 80097b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80097d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	da0b      	bge.n	80097f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	4613      	mov	r3, r2
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	1a9b      	subs	r3, r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	333e      	adds	r3, #62	@ 0x3e
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	e00b      	b.n	800980c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	4613      	mov	r3, r2
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	440b      	add	r3, r1
 8009806:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800980a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009832:	78fa      	ldrb	r2, [r7, #3]
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f7fa faa2 	bl	8003d80 <HAL_PCD_SetAddress>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f862 	bl	800990c <USBD_Get_USB_Status>
 8009848:	4603      	mov	r3, r0
 800984a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984c:	7bbb      	ldrb	r3, [r7, #14]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b086      	sub	sp, #24
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
 8009862:	460b      	mov	r3, r1
 8009864:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009874:	7af9      	ldrb	r1, [r7, #11]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	f7fa fb59 	bl	8003f30 <HAL_PCD_EP_Transmit>
 800987e:	4603      	mov	r3, r0
 8009880:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f841 	bl	800990c <USBD_Get_USB_Status>
 800988a:	4603      	mov	r3, r0
 800988c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800988e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	460b      	mov	r3, r1
 80098a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80098b6:	7af9      	ldrb	r1, [r7, #11]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	f7fa faed 	bl	8003e9a <HAL_PCD_EP_Receive>
 80098c0:	4603      	mov	r3, r0
 80098c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f820 	bl	800990c <USBD_Get_USB_Status>
 80098cc:	4603      	mov	r3, r0
 80098ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098e4:	4b03      	ldr	r3, [pc, #12]	@ (80098f4 <USBD_static_malloc+0x18>)
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000c8c 	.word	0x20000c8c

080098f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]

}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b03      	cmp	r3, #3
 800991e:	d817      	bhi.n	8009950 <USBD_Get_USB_Status+0x44>
 8009920:	a201      	add	r2, pc, #4	@ (adr r2, 8009928 <USBD_Get_USB_Status+0x1c>)
 8009922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009926:	bf00      	nop
 8009928:	08009939 	.word	0x08009939
 800992c:	0800993f 	.word	0x0800993f
 8009930:	08009945 	.word	0x08009945
 8009934:	0800994b 	.word	0x0800994b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	73fb      	strb	r3, [r7, #15]
    break;
 800993c:	e00b      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800993e:	2303      	movs	r3, #3
 8009940:	73fb      	strb	r3, [r7, #15]
    break;
 8009942:	e008      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009944:	2301      	movs	r3, #1
 8009946:	73fb      	strb	r3, [r7, #15]
    break;
 8009948:	e005      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800994a:	2303      	movs	r3, #3
 800994c:	73fb      	strb	r3, [r7, #15]
    break;
 800994e:	e002      	b.n	8009956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009950:	2303      	movs	r3, #3
 8009952:	73fb      	strb	r3, [r7, #15]
    break;
 8009954:	bf00      	nop
  }
  return usb_status;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <memset>:
 8009964:	4402      	add	r2, r0
 8009966:	4603      	mov	r3, r0
 8009968:	4293      	cmp	r3, r2
 800996a:	d100      	bne.n	800996e <memset+0xa>
 800996c:	4770      	bx	lr
 800996e:	f803 1b01 	strb.w	r1, [r3], #1
 8009972:	e7f9      	b.n	8009968 <memset+0x4>

08009974 <__libc_init_array>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	4d0d      	ldr	r5, [pc, #52]	@ (80099ac <__libc_init_array+0x38>)
 8009978:	4c0d      	ldr	r4, [pc, #52]	@ (80099b0 <__libc_init_array+0x3c>)
 800997a:	1b64      	subs	r4, r4, r5
 800997c:	10a4      	asrs	r4, r4, #2
 800997e:	2600      	movs	r6, #0
 8009980:	42a6      	cmp	r6, r4
 8009982:	d109      	bne.n	8009998 <__libc_init_array+0x24>
 8009984:	4d0b      	ldr	r5, [pc, #44]	@ (80099b4 <__libc_init_array+0x40>)
 8009986:	4c0c      	ldr	r4, [pc, #48]	@ (80099b8 <__libc_init_array+0x44>)
 8009988:	f000 f818 	bl	80099bc <_init>
 800998c:	1b64      	subs	r4, r4, r5
 800998e:	10a4      	asrs	r4, r4, #2
 8009990:	2600      	movs	r6, #0
 8009992:	42a6      	cmp	r6, r4
 8009994:	d105      	bne.n	80099a2 <__libc_init_array+0x2e>
 8009996:	bd70      	pop	{r4, r5, r6, pc}
 8009998:	f855 3b04 	ldr.w	r3, [r5], #4
 800999c:	4798      	blx	r3
 800999e:	3601      	adds	r6, #1
 80099a0:	e7ee      	b.n	8009980 <__libc_init_array+0xc>
 80099a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a6:	4798      	blx	r3
 80099a8:	3601      	adds	r6, #1
 80099aa:	e7f2      	b.n	8009992 <__libc_init_array+0x1e>
 80099ac:	08009aa4 	.word	0x08009aa4
 80099b0:	08009aa4 	.word	0x08009aa4
 80099b4:	08009aa4 	.word	0x08009aa4
 80099b8:	08009aa8 	.word	0x08009aa8

080099bc <_init>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	bf00      	nop
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr

080099c8 <_fini>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	bf00      	nop
 80099cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ce:	bc08      	pop	{r3}
 80099d0:	469e      	mov	lr, r3
 80099d2:	4770      	bx	lr


Comento_I2C_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009198  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08009370  08009370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009438  08009438  0000b0dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009438  08009438  0000a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009440  08009440  0000b0dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009440  08009440  0000a440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009444  08009444  0000a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08009448  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd0  200000dc  08009524  0000b0dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  08009524  0000c0ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180cc  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d9  00000000  00000000  000231d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00026bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100e  00000000  00000000  00028070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002592c  00000000  00000000  0002907e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1d4  00000000  00000000  0004e9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbcfa  00000000  00000000  0006ab7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005788  00000000  00000000  001468bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000dc 	.word	0x200000dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009358 	.word	0x08009358

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000e0 	.word	0x200000e0
 8000214:	08009358 	.word	0x08009358

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fd1f 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f83d 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f9f1 	bl	8000938 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f9c5 	bl	80008e4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800055a:	f000 f8f5 	bl	8000748 <MX_CAN1_Init>
  MX_I2C1_Init();
 800055e:	f000 f927 	bl	80007b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000562:	f000 f953 	bl	800080c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000566:	f000 f987 	bl	8000878 <MX_SPI3_Init>
  MX_ADC1_Init();
 800056a:	f000 f89b 	bl	80006a4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800056e:	f008 fa27 	bl	80089c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t i2c_tx_data = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
  uint8_t i2c_tx_addr = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	73bb      	strb	r3, [r7, #14]
  uint8_t i2c_rx_data = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	737b      	strb	r3, [r7, #13]
  uint8_t i2c_rx_addr = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	733b      	strb	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      test1.field.a = 1;
 8000582:	7a3b      	ldrb	r3, [r7, #8]
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	723b      	strb	r3, [r7, #8]
      i2c_tx_data = test1.Pmic_data;
 800058a:	7a3b      	ldrb	r3, [r7, #8]
 800058c:	73fb      	strb	r3, [r7, #15]

      uint8_t i2c_tx_data = 0x55;
 800058e:	2355      	movs	r3, #85	@ 0x55
 8000590:	71fb      	strb	r3, [r7, #7]
      uint8_t i2c_rx_data = 0x00;
 8000592:	2300      	movs	r3, #0
 8000594:	71bb      	strb	r3, [r7, #6]

      HAL_I2C_Master_Transmit(&hi2c1, 0xA0, &i2c_tx_data, 1, 1000);
 8000596:	1dfa      	adds	r2, r7, #7
 8000598:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	21a0      	movs	r1, #160	@ 0xa0
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <main+0x84>)
 80005a4:	f001 fcfa 	bl	8001f9c <HAL_I2C_Master_Transmit>
      HAL_I2C_Master_Receive(&hi2c1, 0xA0, &i2c_rx_data, 1, 1000);
 80005a8:	1dba      	adds	r2, r7, #6
 80005aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	21a0      	movs	r1, #160	@ 0xa0
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <main+0x84>)
 80005b6:	f001 fdef 	bl	8002198 <HAL_I2C_Master_Receive>

      HAL_Delay(1000);  // 반복 방지용 딜레이
 80005ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005be:	f000 fd57 	bl	8001070 <HAL_Delay>
  {
 80005c2:	bf00      	nop
 80005c4:	e7dd      	b.n	8000582 <main+0x3e>
 80005c6:	bf00      	nop
 80005c8:	20000168 	.word	0x20000168

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2234      	movs	r2, #52	@ 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f008 fe90 	bl	8009300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b29      	ldr	r3, [pc, #164]	@ (800069c <SystemClock_Config+0xd0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a28      	ldr	r2, [pc, #160]	@ (800069c <SystemClock_Config+0xd0>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <SystemClock_Config+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a22      	ldr	r2, [pc, #136]	@ (80006a0 <SystemClock_Config+0xd4>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000640:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000644:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000646:	2304      	movs	r3, #4
 8000648:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800064a:	2308      	movs	r3, #8
 800064c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	4618      	mov	r0, r3
 8000658:	f004 f950 	bl	80048fc <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000662:	f000 fa17 	bl	8000a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2103      	movs	r1, #3
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fc8e 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068e:	f000 fa01 	bl	8000a94 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b6:	4b21      	ldr	r3, [pc, #132]	@ (800073c <MX_ADC1_Init+0x98>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	@ (8000740 <MX_ADC1_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_ADC1_Init+0x98>)
 80006be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_ADC1_Init+0x98>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	@ (8000744 <MX_ADC1_Init+0xa0>)
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_ADC1_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <MX_ADC1_Init+0x98>)
 8000706:	f000 fcd7 	bl	80010b8 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 f9c0 	bl	8000a94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000714:	2301      	movs	r3, #1
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_ADC1_Init+0x98>)
 8000726:	f000 fd0b 	bl	8001140 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 f9b0 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000f8 	.word	0x200000f8
 8000740:	40012000 	.word	0x40012000
 8000744:	0f000001 	.word	0x0f000001

08000748 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800074c:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800074e:	4a17      	ldr	r2, [pc, #92]	@ (80007ac <MX_CAN1_Init+0x64>)
 8000750:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000754:	2210      	movs	r2, #16
 8000756:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000764:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000770:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000772:	2200      	movs	r2, #0
 8000774:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000778:	2200      	movs	r2, #0
 800077a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800077e:	2200      	movs	r2, #0
 8000780:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000784:	2200      	movs	r2, #0
 8000786:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_CAN1_Init+0x60>)
 800078a:	2200      	movs	r2, #0
 800078c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000790:	2200      	movs	r2, #0
 8000792:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_CAN1_Init+0x60>)
 8000796:	f000 ff01 	bl	800159c <HAL_CAN_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 f978 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000140 	.word	0x20000140
 80007ac:	40006400 	.word	0x40006400

080007b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <MX_I2C1_Init+0x54>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007bc:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <MX_I2C1_Init+0x58>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007ee:	f001 fa91 	bl	8001d14 <HAL_I2C_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f8:	f000 f94c 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000168 	.word	0x20000168
 8000804:	40005400 	.word	0x40005400
 8000808:	000186a0 	.word	0x000186a0

0800080c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000810:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	@ (8000874 <MX_SPI2_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000818:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_SPI2_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_SPI2_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_SPI2_Init+0x64>)
 8000858:	220a      	movs	r2, #10
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_SPI2_Init+0x64>)
 800085e:	f004 fad1 	bl	8004e04 <HAL_SPI_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f914 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200001bc 	.word	0x200001bc
 8000874:	40003800 	.word	0x40003800

08000878 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_SPI3_Init+0x64>)
 800087e:	4a18      	ldr	r2, [pc, #96]	@ (80008e0 <MX_SPI3_Init+0x68>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_SPI3_Init+0x64>)
 8000884:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_SPI3_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_SPI3_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_SPI3_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_SPI3_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008c4:	220a      	movs	r2, #10
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_SPI3_Init+0x64>)
 80008ca:	f004 fa9b 	bl	8004e04 <HAL_SPI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008d4:	f000 f8de 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000214 	.word	0x20000214
 80008e0:	40003c00 	.word	0x40003c00

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_USART3_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USART3_UART_Init+0x4c>)
 800091c:	f004 fafb 	bl	8004f16 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f8b5 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000026c 	.word	0x2000026c
 8000934:	40004800 	.word	0x40004800

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	@ 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b4c      	ldr	r3, [pc, #304]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a4b      	ldr	r2, [pc, #300]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b49      	ldr	r3, [pc, #292]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b45      	ldr	r3, [pc, #276]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a44      	ldr	r2, [pc, #272]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b42      	ldr	r3, [pc, #264]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b3b      	ldr	r3, [pc, #236]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b37      	ldr	r3, [pc, #220]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a36      	ldr	r2, [pc, #216]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b34      	ldr	r3, [pc, #208]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b30      	ldr	r3, [pc, #192]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b29      	ldr	r3, [pc, #164]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a28      	ldr	r2, [pc, #160]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009fc:	4822      	ldr	r0, [pc, #136]	@ (8000a88 <MX_GPIO_Init+0x150>)
 80009fe:	f001 f96f 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2140      	movs	r1, #64	@ 0x40
 8000a06:	4821      	ldr	r0, [pc, #132]	@ (8000a8c <MX_GPIO_Init+0x154>)
 8000a08:	f001 f96a 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	481b      	ldr	r0, [pc, #108]	@ (8000a90 <MX_GPIO_Init+0x158>)
 8000a24:	f000 ffc8 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a28:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4811      	ldr	r0, [pc, #68]	@ (8000a88 <MX_GPIO_Init+0x150>)
 8000a42:	f000 ffb9 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a46:	2340      	movs	r3, #64	@ 0x40
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480b      	ldr	r0, [pc, #44]	@ (8000a8c <MX_GPIO_Init+0x154>)
 8000a5e:	f000 ffab 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a62:	2380      	movs	r3, #128	@ 0x80
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_GPIO_Init+0x154>)
 8000a76:	f000 ff9f 	bl	80019b8 <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	@ 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	40020800 	.word	0x40020800

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a0f      	ldr	r2, [pc, #60]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a17      	ldr	r2, [pc, #92]	@ (8000b6c <HAL_ADC_MspInit+0x7c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d127      	bne.n	8000b62 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <HAL_ADC_MspInit+0x80>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <HAL_ADC_MspInit+0x80>)
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <HAL_ADC_MspInit+0x80>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_ADC_MspInit+0x80>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <HAL_ADC_MspInit+0x80>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_ADC_MspInit+0x80>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <HAL_ADC_MspInit+0x84>)
 8000b5e:	f000 ff2b 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40012000 	.word	0x40012000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a19      	ldr	r2, [pc, #100]	@ (8000bfc <HAL_CAN_MspInit+0x84>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d12b      	bne.n	8000bf2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <HAL_CAN_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a17      	ldr	r2, [pc, #92]	@ (8000c00 <HAL_CAN_MspInit+0x88>)
 8000ba4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_CAN_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <HAL_CAN_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	4a10      	ldr	r2, [pc, #64]	@ (8000c00 <HAL_CAN_MspInit+0x88>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_CAN_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000be2:	2309      	movs	r3, #9
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <HAL_CAN_MspInit+0x8c>)
 8000bee:	f000 fee3 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	@ 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40006400 	.word	0x40006400
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40021800 	.word	0x40021800

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12c      	bne.n	8000c84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a17      	ldr	r2, [pc, #92]	@ (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c46:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <HAL_I2C_MspInit+0x8c>)
 8000c64:	f000 fea8 	bl	80019b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	@ 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	@ 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a51      	ldr	r2, [pc, #324]	@ (8000dfc <HAL_SPI_MspInit+0x164>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d14b      	bne.n	8000d52 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	4b50      	ldr	r3, [pc, #320]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b4d      	ldr	r3, [pc, #308]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	4b49      	ldr	r3, [pc, #292]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a48      	ldr	r2, [pc, #288]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b46      	ldr	r3, [pc, #280]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b42      	ldr	r3, [pc, #264]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a41      	ldr	r2, [pc, #260]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b3f      	ldr	r3, [pc, #252]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4836      	ldr	r0, [pc, #216]	@ (8000e04 <HAL_SPI_MspInit+0x16c>)
 8000d2a:	f000 fe45 	bl	80019b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d40:	2305      	movs	r3, #5
 8000d42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	482f      	ldr	r0, [pc, #188]	@ (8000e08 <HAL_SPI_MspInit+0x170>)
 8000d4c:	f000 fe34 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d50:	e050      	b.n	8000df4 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a2d      	ldr	r2, [pc, #180]	@ (8000e0c <HAL_SPI_MspInit+0x174>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d14b      	bne.n	8000df4 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	4a26      	ldr	r2, [pc, #152]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d80:	4a1f      	ldr	r2, [pc, #124]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	4a18      	ldr	r2, [pc, #96]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <HAL_SPI_MspInit+0x168>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480e      	ldr	r0, [pc, #56]	@ (8000e08 <HAL_SPI_MspInit+0x170>)
 8000dce:	f000 fdf3 	bl	80019b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dd2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de4:	2306      	movs	r3, #6
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <HAL_SPI_MspInit+0x16c>)
 8000df0:	f000 fde2 	bl	80019b8 <HAL_GPIO_Init>
}
 8000df4:	bf00      	nop
 8000df6:	3738      	adds	r7, #56	@ 0x38
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40003800 	.word	0x40003800
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40003c00 	.word	0x40003c00

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a19      	ldr	r2, [pc, #100]	@ (8000e94 <HAL_UART_MspInit+0x84>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12c      	bne.n	8000e8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a17      	ldr	r2, [pc, #92]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a10      	ldr	r2, [pc, #64]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_UART_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <HAL_UART_MspInit+0x8c>)
 8000e88:	f000 fd96 	bl	80019b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	@ 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40004800 	.word	0x40004800
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef6:	f000 f89b 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <OTG_FS_IRQHandler+0x10>)
 8000f06:	f002 f82a 	bl	8002f5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000884 	.word	0x20000884

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3e:	490e      	ldr	r1, [pc, #56]	@ (8000f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f40:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f54:	4c0b      	ldr	r4, [pc, #44]	@ (8000f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd7 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f008 f9d3 	bl	8009310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff faeb 	bl	8000544 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000f7c:	08009448 	.word	0x08009448
  ldr r2, =_sbss
 8000f80:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000f84:	200010ac 	.word	0x200010ac

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 fcbd 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fd6e 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fcd5 	bl	800199e <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 fc9d 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	@ (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	200002b0 	.word	0x200002b0

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	@ (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200002b0 	.word	0x200002b0

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e033      	b.n	8001136 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fd0a 	bl	8000af0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d118      	bne.n	8001128 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010fe:	f023 0302 	bic.w	r3, r3, #2
 8001102:	f043 0202 	orr.w	r2, r3, #2
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f94a 	bl	80013a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40
 8001126:	e001      	b.n	800112c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_ADC_ConfigChannel+0x1c>
 8001158:	2302      	movs	r3, #2
 800115a:	e113      	b.n	8001384 <HAL_ADC_ConfigChannel+0x244>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d925      	bls.n	80011b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68d9      	ldr	r1, [r3, #12]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	3b1e      	subs	r3, #30
 8001182:	2207      	movs	r2, #7
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43da      	mvns	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	400a      	ands	r2, r1
 8001190:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68d9      	ldr	r1, [r3, #12]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	4603      	mov	r3, r0
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4403      	add	r3, r0
 80011aa:	3b1e      	subs	r3, #30
 80011ac:	409a      	lsls	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	e022      	b.n	80011fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6919      	ldr	r1, [r3, #16]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	2207      	movs	r2, #7
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	400a      	ands	r2, r1
 80011da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6919      	ldr	r1, [r3, #16]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4403      	add	r3, r0
 80011f4:	409a      	lsls	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b06      	cmp	r3, #6
 8001204:	d824      	bhi.n	8001250 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b05      	subs	r3, #5
 8001218:	221f      	movs	r2, #31
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	400a      	ands	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b05      	subs	r3, #5
 8001242:	fa00 f203 	lsl.w	r2, r0, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	635a      	str	r2, [r3, #52]	@ 0x34
 800124e:	e04c      	b.n	80012ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b0c      	cmp	r3, #12
 8001256:	d824      	bhi.n	80012a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	3b23      	subs	r3, #35	@ 0x23
 800126a:	221f      	movs	r2, #31
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43da      	mvns	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	400a      	ands	r2, r1
 8001278:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	3b23      	subs	r3, #35	@ 0x23
 8001294:	fa00 f203 	lsl.w	r2, r0, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	631a      	str	r2, [r3, #48]	@ 0x30
 80012a0:	e023      	b.n	80012ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	3b41      	subs	r3, #65	@ 0x41
 80012b4:	221f      	movs	r2, #31
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	400a      	ands	r2, r1
 80012c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b41      	subs	r3, #65	@ 0x41
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <HAL_ADC_ConfigChannel+0x250>)
 80012ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <HAL_ADC_ConfigChannel+0x254>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d10f      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d8>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b12      	cmp	r3, #18
 80012fe:	d10b      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <HAL_ADC_ConfigChannel+0x254>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12b      	bne.n	800137a <HAL_ADC_ConfigChannel+0x23a>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <HAL_ADC_ConfigChannel+0x258>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d003      	beq.n	8001334 <HAL_ADC_ConfigChannel+0x1f4>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b11      	cmp	r3, #17
 8001332:	d122      	bne.n	800137a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a11      	ldr	r2, [pc, #68]	@ (8001398 <HAL_ADC_ConfigChannel+0x258>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d111      	bne.n	800137a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <HAL_ADC_ConfigChannel+0x25c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <HAL_ADC_ConfigChannel+0x260>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	0c9a      	lsrs	r2, r3, #18
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800136c:	e002      	b.n	8001374 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3b01      	subs	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f9      	bne.n	800136e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40012300 	.word	0x40012300
 8001394:	40012000 	.word	0x40012000
 8001398:	10000012 	.word	0x10000012
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ac:	4b79      	ldr	r3, [pc, #484]	@ (8001594 <ADC_Init+0x1f0>)
 80013ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	021a      	lsls	r2, r3, #8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6859      	ldr	r1, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800141e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6899      	ldr	r1, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001436:	4a58      	ldr	r2, [pc, #352]	@ (8001598 <ADC_Init+0x1f4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d022      	beq.n	8001482 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800144a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6899      	ldr	r1, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800146c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	e00f      	b.n	80014a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001490:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0202 	bic.w	r2, r2, #2
 80014b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6899      	ldr	r1, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7e1b      	ldrb	r3, [r3, #24]
 80014bc:	005a      	lsls	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01b      	beq.n	8001508 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6859      	ldr	r1, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	3b01      	subs	r3, #1
 80014fc:	035a      	lsls	r2, r3, #13
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	e007      	b.n	8001518 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001516:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	3b01      	subs	r3, #1
 8001534:	051a      	lsls	r2, r3, #20
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800154c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800155a:	025a      	lsls	r2, r3, #9
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	029a      	lsls	r2, r3, #10
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	609a      	str	r2, [r3, #8]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40012300 	.word	0x40012300
 8001598:	0f000001 	.word	0x0f000001

0800159c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0ed      	b.n	800178a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fadc 	bl	8000b78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d0:	f7ff fd42 	bl	8001058 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015d6:	e012      	b.n	80015fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d8:	f7ff fd3e 	bl	8001058 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b0a      	cmp	r3, #10
 80015e4:	d90b      	bls.n	80015fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2205      	movs	r2, #5
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0c5      	b.n	800178a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0e5      	beq.n	80015d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0202 	bic.w	r2, r2, #2
 800161a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161c:	f7ff fd1c 	bl	8001058 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001622:	e012      	b.n	800164a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001624:	f7ff fd18 	bl	8001058 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d90b      	bls.n	800164a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2205      	movs	r2, #5
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e09f      	b.n	800178a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e5      	bne.n	8001624 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7e1b      	ldrb	r3, [r3, #24]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d108      	bne.n	8001672 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e007      	b.n	8001682 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7e5b      	ldrb	r3, [r3, #25]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d108      	bne.n	800169c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e007      	b.n	80016ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7e9b      	ldrb	r3, [r3, #26]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d108      	bne.n	80016c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0220 	orr.w	r2, r2, #32
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e007      	b.n	80016d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0220 	bic.w	r2, r2, #32
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7edb      	ldrb	r3, [r3, #27]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0210 	bic.w	r2, r2, #16
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e007      	b.n	8001700 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0210 	orr.w	r2, r2, #16
 80016fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7f1b      	ldrb	r3, [r3, #28]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d108      	bne.n	800171a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0208 	orr.w	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e007      	b.n	800172a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0208 	bic.w	r2, r2, #8
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	7f5b      	ldrb	r3, [r3, #29]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d108      	bne.n	8001744 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0204 	orr.w	r2, r2, #4
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e007      	b.n	8001754 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0204 	bic.w	r2, r2, #4
 8001752:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	ea42 0103 	orr.w	r1, r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	1e5a      	subs	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e165      	b.n	8001ca0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8154 	bne.w	8001c9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80ae 	beq.w	8001c9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb8 <HAL_GPIO_Init+0x300>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb8 <HAL_GPIO_Init+0x300>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <HAL_GPIO_Init+0x300>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5a:	4a58      	ldr	r2, [pc, #352]	@ (8001cbc <HAL_GPIO_Init+0x304>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc0 <HAL_GPIO_Init+0x308>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x21a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4e      	ldr	r2, [pc, #312]	@ (8001cc4 <HAL_GPIO_Init+0x30c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x216>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4d      	ldr	r2, [pc, #308]	@ (8001cc8 <HAL_GPIO_Init+0x310>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x212>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4c      	ldr	r2, [pc, #304]	@ (8001ccc <HAL_GPIO_Init+0x314>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x20e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd0 <HAL_GPIO_Init+0x318>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x20a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd4 <HAL_GPIO_Init+0x31c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x206>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	@ (8001cd8 <HAL_GPIO_Init+0x320>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x202>
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	e00c      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e00a      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	e008      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e004      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e002      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x21c>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	f002 0203 	and.w	r2, r2, #3
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	4093      	lsls	r3, r2
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be4:	4935      	ldr	r1, [pc, #212]	@ (8001cbc <HAL_GPIO_Init+0x304>)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c16:	4a31      	ldr	r2, [pc, #196]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c40:	4a26      	ldr	r2, [pc, #152]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c46:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c94:	4a11      	ldr	r2, [pc, #68]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	f67f ae96 	bls.w	80019d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3724      	adds	r7, #36	@ 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40021400 	.word	0x40021400
 8001cd8:	40021800 	.word	0x40021800
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e12b      	b.n	8001f7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe ff64 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2224      	movs	r2, #36	@ 0x24
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d78:	f002 fb0c 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 8001d7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a81      	ldr	r2, [pc, #516]	@ (8001f88 <HAL_I2C_Init+0x274>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d807      	bhi.n	8001d98 <HAL_I2C_Init+0x84>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a80      	ldr	r2, [pc, #512]	@ (8001f8c <HAL_I2C_Init+0x278>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	bf94      	ite	ls
 8001d90:	2301      	movls	r3, #1
 8001d92:	2300      	movhi	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	e006      	b.n	8001da6 <HAL_I2C_Init+0x92>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f90 <HAL_I2C_Init+0x27c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	bf94      	ite	ls
 8001da0:	2301      	movls	r3, #1
 8001da2:	2300      	movhi	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0e7      	b.n	8001f7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a78      	ldr	r2, [pc, #480]	@ (8001f94 <HAL_I2C_Init+0x280>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9b      	lsrs	r3, r3, #18
 8001db8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a6a      	ldr	r2, [pc, #424]	@ (8001f88 <HAL_I2C_Init+0x274>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d802      	bhi.n	8001de8 <HAL_I2C_Init+0xd4>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	e009      	b.n	8001dfc <HAL_I2C_Init+0xe8>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	4a69      	ldr	r2, [pc, #420]	@ (8001f98 <HAL_I2C_Init+0x284>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	495c      	ldr	r1, [pc, #368]	@ (8001f88 <HAL_I2C_Init+0x274>)
 8001e18:	428b      	cmp	r3, r1
 8001e1a:	d819      	bhi.n	8001e50 <HAL_I2C_Init+0x13c>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1e59      	subs	r1, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2a:	1c59      	adds	r1, r3, #1
 8001e2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e30:	400b      	ands	r3, r1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_I2C_Init+0x138>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1e59      	subs	r1, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e44:	3301      	adds	r3, #1
 8001e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4a:	e051      	b.n	8001ef0 <HAL_I2C_Init+0x1dc>
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	e04f      	b.n	8001ef0 <HAL_I2C_Init+0x1dc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d111      	bne.n	8001e7c <HAL_I2C_Init+0x168>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e58      	subs	r0, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	e012      	b.n	8001ea2 <HAL_I2C_Init+0x18e>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	0099      	lsls	r1, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Init+0x196>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e022      	b.n	8001ef0 <HAL_I2C_Init+0x1dc>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_I2C_Init+0x1bc>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1e58      	subs	r0, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	440b      	add	r3, r1
 8001ec0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ece:	e00f      	b.n	8001ef0 <HAL_I2C_Init+0x1dc>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1e58      	subs	r0, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	0099      	lsls	r1, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	6809      	ldr	r1, [r1, #0]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6911      	ldr	r1, [r2, #16]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68d2      	ldr	r2, [r2, #12]
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	000186a0 	.word	0x000186a0
 8001f8c:	001e847f 	.word	0x001e847f
 8001f90:	003d08ff 	.word	0x003d08ff
 8001f94:	431bde83 	.word	0x431bde83
 8001f98:	10624dd3 	.word	0x10624dd3

08001f9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	817b      	strh	r3, [r7, #10]
 8001fac:	4613      	mov	r3, r2
 8001fae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff f852 	bl	8001058 <HAL_GetTick>
 8001fb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	f040 80e0 	bne.w	8002184 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2319      	movs	r3, #25
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4970      	ldr	r1, [pc, #448]	@ (8002190 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fc58 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0d3      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_I2C_Master_Transmit+0x50>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0cc      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d007      	beq.n	8002012 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002020:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2221      	movs	r2, #33	@ 0x21
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2210      	movs	r2, #16
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	893a      	ldrh	r2, [r7, #8]
 8002042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a50      	ldr	r2, [pc, #320]	@ (8002194 <HAL_I2C_Master_Transmit+0x1f8>)
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002054:	8979      	ldrh	r1, [r7, #10]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	6a3a      	ldr	r2, [r7, #32]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fac2 	bl	80025e4 <I2C_MasterRequestWrite>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e08d      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002080:	e066      	b.n	8002150 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	6a39      	ldr	r1, [r7, #32]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fcd2 	bl	8002a30 <I2C_WaitOnTXEFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	2b04      	cmp	r3, #4
 8002098:	d107      	bne.n	80020aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06b      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d11b      	bne.n	8002124 <HAL_I2C_Master_Transmit+0x188>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d017      	beq.n	8002124 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f8:	781a      	ldrb	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	6a39      	ldr	r1, [r7, #32]
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fcc2 	bl	8002ab2 <I2C_WaitOnBTFFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00d      	beq.n	8002150 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	2b04      	cmp	r3, #4
 800213a:	d107      	bne.n	800214c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e01a      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002154:	2b00      	cmp	r3, #0
 8002156:	d194      	bne.n	8002082 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	e000      	b.n	8002186 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002184:	2302      	movs	r3, #2
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	00100002 	.word	0x00100002
 8002194:	ffff0000 	.word	0xffff0000

08002198 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	@ 0x30
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	817b      	strh	r3, [r7, #10]
 80021a8:	4613      	mov	r3, r2
 80021aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7fe ff54 	bl	8001058 <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	f040 820b 	bne.w	80025d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2319      	movs	r3, #25
 80021c6:	2201      	movs	r2, #1
 80021c8:	497c      	ldr	r1, [pc, #496]	@ (80023bc <HAL_I2C_Master_Receive+0x224>)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fb5a 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021d6:	2302      	movs	r3, #2
 80021d8:	e1fe      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_I2C_Master_Receive+0x50>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e1f7      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d007      	beq.n	800220e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800221c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2222      	movs	r2, #34	@ 0x22
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2210      	movs	r2, #16
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	893a      	ldrh	r2, [r7, #8]
 800223e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a5c      	ldr	r2, [pc, #368]	@ (80023c0 <HAL_I2C_Master_Receive+0x228>)
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002250:	8979      	ldrh	r1, [r7, #10]
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 fa46 	bl	80026e8 <I2C_MasterRequestRead>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e1b8      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	d113      	bne.n	8002296 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	623b      	str	r3, [r7, #32]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	623b      	str	r3, [r7, #32]
 8002282:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e18c      	b.n	80025b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800229a:	2b01      	cmp	r3, #1
 800229c:	d11b      	bne.n	80022d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e16c      	b.n	80025b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d11b      	bne.n	8002316 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	e14c      	b.n	80025b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800233c:	e138      	b.n	80025b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002342:	2b03      	cmp	r3, #3
 8002344:	f200 80f1 	bhi.w	800252a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b01      	cmp	r3, #1
 800234e:	d123      	bne.n	8002398 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002352:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 fbed 	bl	8002b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e139      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002396:	e10b      	b.n	80025b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239c:	2b02      	cmp	r3, #2
 800239e:	d14e      	bne.n	800243e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a6:	2200      	movs	r2, #0
 80023a8:	4906      	ldr	r1, [pc, #24]	@ (80023c4 <HAL_I2C_Master_Receive+0x22c>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fa6a 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e10e      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
 80023ba:	bf00      	nop
 80023bc:	00100002 	.word	0x00100002
 80023c0:	ffff0000 	.word	0xffff0000
 80023c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800243c:	e0b8      	b.n	80025b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002444:	2200      	movs	r2, #0
 8002446:	4966      	ldr	r1, [pc, #408]	@ (80025e0 <HAL_I2C_Master_Receive+0x448>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fa1b 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0bf      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a0:	2200      	movs	r2, #0
 80024a2:	494f      	ldr	r1, [pc, #316]	@ (80025e0 <HAL_I2C_Master_Receive+0x448>)
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f9ed 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e091      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002528:	e042      	b.n	80025b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fb00 	bl	8002b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e04c      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b04      	cmp	r3, #4
 800257c:	d118      	bne.n	80025b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f aec2 	bne.w	800233e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025d6:	2302      	movs	r3, #2
  }
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3728      	adds	r7, #40	@ 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	00010004 	.word	0x00010004

080025e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	460b      	mov	r3, r1
 80025f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d006      	beq.n	800260e <I2C_MasterRequestWrite+0x2a>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d003      	beq.n	800260e <I2C_MasterRequestWrite+0x2a>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800260c:	d108      	bne.n	8002620 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e00b      	b.n	8002638 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	2b12      	cmp	r3, #18
 8002626:	d107      	bne.n	8002638 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002636:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f91d 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800265e:	d103      	bne.n	8002668 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002666:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e035      	b.n	80026d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002674:	d108      	bne.n	8002688 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	e01b      	b.n	80026c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002688:	897b      	ldrh	r3, [r7, #10]
 800268a:	11db      	asrs	r3, r3, #7
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0306 	and.w	r3, r3, #6
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f063 030f 	orn	r3, r3, #15
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	490e      	ldr	r1, [pc, #56]	@ (80026e0 <I2C_MasterRequestWrite+0xfc>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f943 	bl	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e010      	b.n	80026d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4907      	ldr	r1, [pc, #28]	@ (80026e4 <I2C_MasterRequestWrite+0x100>)
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f933 	bl	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	00010008 	.word	0x00010008
 80026e4:	00010002 	.word	0x00010002

080026e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800270c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d006      	beq.n	8002722 <I2C_MasterRequestRead+0x3a>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d003      	beq.n	8002722 <I2C_MasterRequestRead+0x3a>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002720:	d108      	bne.n	8002734 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e00b      	b.n	800274c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	2b11      	cmp	r3, #17
 800273a:	d107      	bne.n	800274c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800274a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f893 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00d      	beq.n	8002780 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002772:	d103      	bne.n	800277c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800277a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e079      	b.n	8002874 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002788:	d108      	bne.n	800279c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	e05f      	b.n	800285c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800279c:	897b      	ldrh	r3, [r7, #10]
 800279e:	11db      	asrs	r3, r3, #7
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 0306 	and.w	r3, r3, #6
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f063 030f 	orn	r3, r3, #15
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4930      	ldr	r1, [pc, #192]	@ (800287c <I2C_MasterRequestRead+0x194>)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f8b9 	bl	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e054      	b.n	8002874 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ca:	897b      	ldrh	r3, [r7, #10]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4929      	ldr	r1, [pc, #164]	@ (8002880 <I2C_MasterRequestRead+0x198>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f8a9 	bl	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e044      	b.n	8002874 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800280e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f831 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00d      	beq.n	8002844 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002836:	d103      	bne.n	8002840 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e017      	b.n	8002874 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002844:	897b      	ldrh	r3, [r7, #10]
 8002846:	11db      	asrs	r3, r3, #7
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0306 	and.w	r3, r3, #6
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f063 030e 	orn	r3, r3, #14
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4907      	ldr	r1, [pc, #28]	@ (8002880 <I2C_MasterRequestRead+0x198>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f865 	bl	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	00010008 	.word	0x00010008
 8002880:	00010002 	.word	0x00010002

08002884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002894:	e025      	b.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d021      	beq.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7fe fbdb 	bl	8001058 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d116      	bne.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f043 0220 	orr.w	r2, r3, #32
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e023      	b.n	800292a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10d      	bne.n	8002908 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	e00c      	b.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	43da      	mvns	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4013      	ands	r3, r2
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	429a      	cmp	r2, r3
 8002926:	d0b6      	beq.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002940:	e051      	b.n	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002950:	d123      	bne.n	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002960:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800296a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f043 0204 	orr.w	r2, r3, #4
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e046      	b.n	8002a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d021      	beq.n	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7fe fb59 	bl	8001058 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d116      	bne.n	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e020      	b.n	8002a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d10c      	bne.n	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e00b      	b.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	43da      	mvns	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d18d      	bne.n	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a3c:	e02d      	b.n	8002a9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f8ce 	bl	8002be0 <I2C_IsAcknowledgeFailed>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e02d      	b.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d021      	beq.n	8002a9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a56:	f7fe faff 	bl	8001058 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d302      	bcc.n	8002a6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d116      	bne.n	8002a9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	f043 0220 	orr.w	r2, r3, #32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e007      	b.n	8002aaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa4:	2b80      	cmp	r3, #128	@ 0x80
 8002aa6:	d1ca      	bne.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002abe:	e02d      	b.n	8002b1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f88d 	bl	8002be0 <I2C_IsAcknowledgeFailed>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e02d      	b.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d021      	beq.n	8002b1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad8:	f7fe fabe 	bl	8001058 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d302      	bcc.n	8002aee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d116      	bne.n	8002b1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e007      	b.n	8002b2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d1ca      	bne.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b40:	e042      	b.n	8002bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d119      	bne.n	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0210 	mvn.w	r2, #16
 8002b58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e029      	b.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b84:	f7fe fa68 	bl	8001058 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d302      	bcc.n	8002b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d116      	bne.n	8002bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e007      	b.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd2:	2b40      	cmp	r3, #64	@ 0x40
 8002bd4:	d1b5      	bne.n	8002b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf6:	d11b      	bne.n	8002c30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c40:	b08f      	sub	sp, #60	@ 0x3c
 8002c42:	af0a      	add	r7, sp, #40	@ 0x28
 8002c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e116      	b.n	8002e7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f006 f82e 	bl	8008ccc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2203      	movs	r2, #3
 8002c74:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 fd27 	bl	80056e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	603b      	str	r3, [r7, #0]
 8002c9a:	687e      	ldr	r6, [r7, #4]
 8002c9c:	466d      	mov	r5, sp
 8002c9e:	f106 0410 	add.w	r4, r6, #16
 8002ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002caa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cb2:	1d33      	adds	r3, r6, #4
 8002cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb6:	6838      	ldr	r0, [r7, #0]
 8002cb8:	f002 fbfe 	bl	80054b8 <USB_CoreInit>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0d7      	b.n	8002e7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f002 fd15 	bl	8005704 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e04a      	b.n	8002d76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	333d      	adds	r3, #61	@ 0x3d
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	333c      	adds	r3, #60	@ 0x3c
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	b298      	uxth	r0, r3
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3342      	adds	r3, #66	@ 0x42
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	333f      	adds	r3, #63	@ 0x3f
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3344      	adds	r3, #68	@ 0x44
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3348      	adds	r3, #72	@ 0x48
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3350      	adds	r3, #80	@ 0x50
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	3301      	adds	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3af      	bcc.n	8002ce0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e044      	b.n	8002e10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d3b5      	bcc.n	8002d86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	687e      	ldr	r6, [r7, #4]
 8002e22:	466d      	mov	r5, sp
 8002e24:	f106 0410 	add.w	r4, r6, #16
 8002e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e34:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e38:	1d33      	adds	r3, r6, #4
 8002e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3c:	6838      	ldr	r0, [r7, #0]
 8002e3e:	f002 fcad 	bl	800579c <USB_DevInit>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e014      	b.n	8002e7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d102      	bne.n	8002e72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f001 f869 	bl	8003f44 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fc40 	bl	80066fc <USB_DevDisconnect>

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d101      	bne.n	8002ea2 <HAL_PCD_Start+0x1c>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e020      	b.n	8002ee4 <HAL_PCD_Start+0x5e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d109      	bne.n	8002ec6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d005      	beq.n	8002ec6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f002 fbf8 	bl	80056c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fbf0 	bl	80066ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_Stop+0x1c>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e026      	b.n	8002f56 <HAL_PCD_Stop+0x6a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 fbe4 	bl	80056e2 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f003 fbec 	bl	80066fc <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2110      	movs	r1, #16
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fd94 	bl	8005a58 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d109      	bne.n	8002f4c <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d005      	beq.n	8002f4c <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f5e:	b590      	push	{r4, r7, lr}
 8002f60:	b08d      	sub	sp, #52	@ 0x34
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fc75 	bl	8006864 <USB_GetMode>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 83ca 	bne.w	8003716 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 fbd9 	bl	800673e <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 83c0 	beq.w	8003714 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fbd0 	bl	800673e <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d107      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f002 0202 	and.w	r2, r2, #2
 8002fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fbbe 	bl	800673e <USB_ReadInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d161      	bne.n	8003090 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0210 	bic.w	r2, r2, #16
 8002fda:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003002:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003006:	d124      	bne.n	8003052 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d035      	beq.n	8003080 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800301e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6a38      	ldr	r0, [r7, #32]
 8003028:	f003 f9f5 	bl	8006416 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003038:	441a      	add	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800304a:	441a      	add	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	619a      	str	r2, [r3, #24]
 8003050:	e016      	b.n	8003080 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003058:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800305c:	d110      	bne.n	8003080 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003064:	2208      	movs	r2, #8
 8003066:	4619      	mov	r1, r3
 8003068:	6a38      	ldr	r0, [r7, #32]
 800306a:	f003 f9d4 	bl	8006416 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800307a:	441a      	add	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0210 	orr.w	r2, r2, #16
 800308e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f003 fb52 	bl	800673e <USB_ReadInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030a4:	d16e      	bne.n	8003184 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fb58 	bl	8006764 <USB_ReadDevAllOutEpInterrupt>
 80030b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80030b6:	e062      	b.n	800317e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d057      	beq.n	8003172 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 fb7d 	bl	80067cc <USB_ReadDevOutEPInterrupt>
 80030d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ea:	461a      	mov	r2, r3
 80030ec:	2301      	movs	r3, #1
 80030ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fd7c 	bl	8003bf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00c      	beq.n	800311c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800310e:	461a      	mov	r2, r3
 8003110:	2308      	movs	r3, #8
 8003112:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fe76 	bl	8003e08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003132:	461a      	mov	r2, r3
 8003134:	2310      	movs	r3, #16
 8003136:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800314e:	461a      	mov	r2, r3
 8003150:	2320      	movs	r3, #32
 8003152:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d009      	beq.n	8003172 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800316a:	461a      	mov	r2, r3
 800316c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003170:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	3301      	adds	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d199      	bne.n	80030b8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f003 fad8 	bl	800673e <USB_ReadInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003194:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003198:	f040 80c0 	bne.w	800331c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 faf9 	bl	8006798 <USB_ReadDevAllInEpInterrupt>
 80031a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80031ac:	e0b2      	b.n	8003314 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a7 	beq.w	8003308 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fb1f 	bl	8006808 <USB_ReadDevInEPInterrupt>
 80031ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d057      	beq.n	8003286 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2201      	movs	r2, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69f9      	ldr	r1, [r7, #28]
 80031f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031f6:	4013      	ands	r3, r2
 80031f8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003206:	461a      	mov	r2, r3
 8003208:	2301      	movs	r3, #1
 800320a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d132      	bne.n	800327a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3348      	adds	r3, #72	@ 0x48
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4403      	add	r3, r0
 8003234:	3344      	adds	r3, #68	@ 0x44
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4419      	add	r1, r3
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4403      	add	r3, r0
 8003248:	3348      	adds	r3, #72	@ 0x48
 800324a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d113      	bne.n	800327a <HAL_PCD_IRQHandler+0x31c>
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	3350      	adds	r3, #80	@ 0x50
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d108      	bne.n	800327a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003272:	461a      	mov	r2, r3
 8003274:	2101      	movs	r1, #1
 8003276:	f003 fb27 	bl	80068c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	b2db      	uxtb	r3, r3
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f005 fdc6 	bl	8008e12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800329c:	461a      	mov	r2, r3
 800329e:	2308      	movs	r3, #8
 80032a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032b8:	461a      	mov	r2, r3
 80032ba:	2310      	movs	r3, #16
 80032bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032d4:	461a      	mov	r2, r3
 80032d6:	2340      	movs	r3, #64	@ 0x40
 80032d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f0:	461a      	mov	r2, r3
 80032f2:	2302      	movs	r3, #2
 80032f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fbe6 	bl	8003ad4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	3301      	adds	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	f47f af49 	bne.w	80031ae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fa0c 	bl	800673e <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800332c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003330:	d122      	bne.n	8003378 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800334c:	2b01      	cmp	r3, #1
 800334e:	d108      	bne.n	8003362 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003358:	2100      	movs	r1, #0
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fe16 	bl	8003f8c <HAL_PCDEx_LPM_Callback>
 8003360:	e002      	b.n	8003368 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f005 fdc2 	bl	8008eec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003376:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f003 f9de 	bl	800673e <USB_ReadInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338c:	d112      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d102      	bne.n	80033a4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f005 fd7e 	bl	8008ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695a      	ldr	r2, [r3, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80033b2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 f9c0 	bl	800673e <USB_ReadInterrupts>
 80033be:	4603      	mov	r3, r0
 80033c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033c8:	d121      	bne.n	800340e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80033d8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d111      	bne.n	8003408 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033fe:	2101      	movs	r1, #1
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fdc3 	bl	8003f8c <HAL_PCDEx_LPM_Callback>
 8003406:	e002      	b.n	800340e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f005 fd49 	bl	8008ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f003 f993 	bl	800673e <USB_ReadInterrupts>
 8003418:	4603      	mov	r3, r0
 800341a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003422:	f040 80c7 	bne.w	80035b4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2110      	movs	r1, #16
 8003440:	4618      	mov	r0, r3
 8003442:	f002 fb09 	bl	8005a58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003446:	2300      	movs	r3, #0
 8003448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800344a:	e056      	b.n	80034fa <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800344c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003458:	461a      	mov	r2, r3
 800345a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800345e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003470:	0151      	lsls	r1, r2, #5
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	440a      	add	r2, r1
 8003476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800347a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800347e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003490:	0151      	lsls	r1, r2, #5
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	440a      	add	r2, r1
 8003496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800349a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800349e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ac:	461a      	mov	r2, r3
 80034ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80034b2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c4:	0151      	lsls	r1, r2, #5
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	440a      	add	r2, r1
 80034ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80034d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f6:	3301      	adds	r3, #1
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d3a3      	bcc.n	800344c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003512:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003516:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	2b00      	cmp	r3, #0
 800351e:	d016      	beq.n	800354e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003530:	f043 030b 	orr.w	r3, r3, #11
 8003534:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003546:	f043 030b 	orr.w	r3, r3, #11
 800354a:	6453      	str	r3, [r2, #68]	@ 0x44
 800354c:	e015      	b.n	800357a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800355c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003560:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003564:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003574:	f043 030b 	orr.w	r3, r3, #11
 8003578:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003588:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800358c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800359e:	461a      	mov	r2, r3
 80035a0:	f003 f992 	bl	80068c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80035b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 f8c0 	bl	800673e <USB_ReadInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035c8:	d124      	bne.n	8003614 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 f956 	bl	8006880 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f002 fa9a 	bl	8005b12 <USB_GetDevSpeed>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681c      	ldr	r4, [r3, #0]
 80035ea:	f000 fec7 	bl	800437c <HAL_RCC_GetHCLKFreq>
 80035ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	4620      	mov	r0, r4
 80035fa:	f001 ffbf 	bl	800557c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f005 fc2f 	bl	8008e62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003612:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f003 f890 	bl	800673e <USB_ReadInterrupts>
 800361e:	4603      	mov	r3, r0
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d10a      	bne.n	800363e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f005 fc0c 	bl	8008e46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f002 0208 	and.w	r2, r2, #8
 800363c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f003 f87b 	bl	800673e <USB_ReadInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003652:	d10f      	bne.n	8003674 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	b2db      	uxtb	r3, r3
 800365c:	4619      	mov	r1, r3
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f005 fc64 	bl	8008f2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f003 f860 	bl	800673e <USB_ReadInterrupts>
 800367e:	4603      	mov	r3, r0
 8003680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003684:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003688:	d10f      	bne.n	80036aa <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	b2db      	uxtb	r3, r3
 8003692:	4619      	mov	r1, r3
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f005 fc37 	bl	8008f08 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f003 f845 	bl	800673e <USB_ReadInterrupts>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036be:	d10a      	bne.n	80036d6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f005 fc45 	bl	8008f50 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80036d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 f82f 	bl	800673e <USB_ReadInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d115      	bne.n	8003716 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f005 fc35 	bl	8008f6c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	e000      	b.n	8003716 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003714:	bf00      	nop
    }
  }
}
 8003716:	3734      	adds	r7, #52	@ 0x34
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}

0800371c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_PCD_SetAddress+0x1a>
 8003732:	2302      	movs	r3, #2
 8003734:	e013      	b.n	800375e <HAL_PCD_SetAddress+0x42>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f002 ff8d 	bl	800666e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	4608      	mov	r0, r1
 8003770:	4611      	mov	r1, r2
 8003772:	461a      	mov	r2, r3
 8003774:	4603      	mov	r3, r0
 8003776:	70fb      	strb	r3, [r7, #3]
 8003778:	460b      	mov	r3, r1
 800377a:	803b      	strh	r3, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003784:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003788:	2b00      	cmp	r3, #0
 800378a:	da0f      	bge.n	80037ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	f003 020f 	and.w	r2, r3, #15
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	3338      	adds	r3, #56	@ 0x38
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	3304      	adds	r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	705a      	strb	r2, [r3, #1]
 80037aa:	e00f      	b.n	80037cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037d8:	883a      	ldrh	r2, [r7, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	78ba      	ldrb	r2, [r7, #2]
 80037e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037f6:	78bb      	ldrb	r3, [r7, #2]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d102      	bne.n	8003802 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_PCD_EP_Open+0xaa>
 800380c:	2302      	movs	r3, #2
 800380e:	e00e      	b.n	800382e <HAL_PCD_EP_Open+0xc8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68f9      	ldr	r1, [r7, #12]
 800381e:	4618      	mov	r0, r3
 8003820:	f002 f99c 	bl	8005b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 800382c:	7afb      	ldrb	r3, [r7, #11]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	460b      	mov	r3, r1
 8003844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	3304      	adds	r3, #4
 800385e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2200      	movs	r2, #0
 8003870:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003878:	7afb      	ldrb	r3, [r7, #11]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	b2da      	uxtb	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d102      	bne.n	8003892 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	6979      	ldr	r1, [r7, #20]
 80038aa:	f002 fc23 	bl	80060f4 <USB_EP0StartXfer>
 80038ae:	e008      	b.n	80038c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	f002 f9d5 	bl	8005c6c <USB_EPStartXfer>
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	460b      	mov	r3, r1
 80038da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	f003 020f 	and.w	r2, r3, #15
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	3338      	adds	r3, #56	@ 0x38
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	3304      	adds	r3, #4
 80038f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2201      	movs	r2, #1
 800390a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800390c:	7afb      	ldrb	r3, [r7, #11]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	b2da      	uxtb	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d102      	bne.n	8003926 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003926:	7afb      	ldrb	r3, [r7, #11]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	f002 fbd9 	bl	80060f4 <USB_EP0StartXfer>
 8003942:	e008      	b.n	8003956 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	f002 f98b 	bl	8005c6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	f003 020f 	and.w	r2, r3, #15
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d901      	bls.n	800397e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e050      	b.n	8003a20 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800397e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003982:	2b00      	cmp	r3, #0
 8003984:	da0f      	bge.n	80039a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	3338      	adds	r3, #56	@ 0x38
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	3304      	adds	r3, #4
 800399c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	705a      	strb	r2, [r3, #1]
 80039a4:	e00d      	b.n	80039c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	3304      	adds	r3, #4
 80039ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_PCD_EP_SetStall+0x82>
 80039de:	2302      	movs	r3, #2
 80039e0:	e01e      	b.n	8003a20 <HAL_PCD_EP_SetStall+0xc0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68f9      	ldr	r1, [r7, #12]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 fd68 	bl	80064c6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	b2d9      	uxtb	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003a10:	461a      	mov	r2, r3
 8003a12:	f002 ff59 	bl	80068c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d901      	bls.n	8003a46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e042      	b.n	8003acc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da0f      	bge.n	8003a6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	3338      	adds	r3, #56	@ 0x38
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	3304      	adds	r3, #4
 8003a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	705a      	strb	r2, [r3, #1]
 8003a6c:	e00f      	b.n	8003a8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_PCD_EP_ClrStall+0x86>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e00e      	b.n	8003acc <HAL_PCD_EP_ClrStall+0xa4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f002 fd70 	bl	80065a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	@ 0x28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	3338      	adds	r3, #56	@ 0x38
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d901      	bls.n	8003b0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e06c      	b.n	8003be6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d902      	bls.n	8003b28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	3303      	adds	r3, #3
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b30:	e02b      	b.n	8003b8a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d902      	bls.n	8003b4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3303      	adds	r3, #3
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68d9      	ldr	r1, [r3, #12]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f002 fc14 	bl	800639a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d809      	bhi.n	8003bb4 <PCD_WriteEmptyTxFifo+0xe0>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d203      	bcs.n	8003bb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1be      	bne.n	8003b32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d811      	bhi.n	8003be4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003be0:	4013      	ands	r3, r2
 8003be2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	333c      	adds	r3, #60	@ 0x3c
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	f040 80a0 	bne.w	8003d68 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a72      	ldr	r2, [pc, #456]	@ (8003e00 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	f240 80dd 	bls.w	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80d7 	beq.w	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c54:	461a      	mov	r2, r3
 8003c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c5a:	6093      	str	r3, [r2, #8]
 8003c5c:	e0cb      	b.n	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c74:	461a      	mov	r2, r3
 8003c76:	2320      	movs	r3, #32
 8003c78:	6093      	str	r3, [r2, #8]
 8003c7a:	e0bc      	b.n	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f040 80b7 	bne.w	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a5d      	ldr	r2, [pc, #372]	@ (8003e00 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d90f      	bls.n	8003cb0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cac:	6093      	str	r3, [r2, #8]
 8003cae:	e0a2      	b.n	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003cc2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	0159      	lsls	r1, r3, #5
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	440b      	add	r3, r1
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003cd6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4403      	add	r3, r0
 8003ce6:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003cea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4419      	add	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4403      	add	r3, r0
 8003d24:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003d28:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d114      	bne.n	8003d5a <PCD_EP_OutXfrComplete_int+0x16a>
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d108      	bne.n	8003d5a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003d52:	461a      	mov	r2, r3
 8003d54:	2101      	movs	r1, #1
 8003d56:	f002 fdb7 	bl	80068c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f005 f83b 	bl	8008ddc <HAL_PCD_DataOutStageCallback>
 8003d66:	e046      	b.n	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <PCD_EP_OutXfrComplete_int+0x214>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d124      	bne.n	8003dba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8c:	6093      	str	r3, [r2, #8]
 8003d8e:	e032      	b.n	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da6:	461a      	mov	r2, r3
 8003da8:	2320      	movs	r3, #32
 8003daa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f005 f812 	bl	8008ddc <HAL_PCD_DataOutStageCallback>
 8003db8:	e01d      	b.n	8003df6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d114      	bne.n	8003dea <PCD_EP_OutXfrComplete_int+0x1fa>
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003de2:	461a      	mov	r2, r3
 8003de4:	2100      	movs	r1, #0
 8003de6:	f002 fd6f 	bl	80068c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	4619      	mov	r1, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f004 fff3 	bl	8008ddc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	4f54300a 	.word	0x4f54300a
 8003e04:	4f54310a 	.word	0x4f54310a

08003e08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	333c      	adds	r3, #60	@ 0x3c
 8003e20:	3304      	adds	r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a15      	ldr	r2, [pc, #84]	@ (8003e90 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d90e      	bls.n	8003e5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d009      	beq.n	8003e5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e54:	461a      	mov	r2, r3
 8003e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f004 ffab 	bl	8008db8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d90c      	bls.n	8003e84 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d108      	bne.n	8003e84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2101      	movs	r1, #1
 8003e80:	f002 fd22 	bl	80068c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	4f54300a 	.word	0x4f54300a

08003e94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eb2:	883b      	ldrh	r3, [r7, #0]
 8003eb4:	0419      	lsls	r1, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ec0:	e028      	b.n	8003f14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4413      	add	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e00d      	b.n	8003ef2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	3340      	adds	r3, #64	@ 0x40
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	4413      	add	r3, r2
 8003eea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d3ec      	bcc.n	8003ed6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003efc:	883b      	ldrh	r3, [r7, #0]
 8003efe:	0418      	lsls	r0, r3, #16
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	4302      	orrs	r2, r0
 8003f0c:	3340      	adds	r3, #64	@ 0x40
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	f043 0303 	orr.w	r3, r3, #3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0cc      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b68      	ldr	r3, [pc, #416]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d90c      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b65      	ldr	r3, [pc, #404]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b63      	ldr	r3, [pc, #396]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b59      	ldr	r3, [pc, #356]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a58      	ldr	r2, [pc, #352]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4b53      	ldr	r3, [pc, #332]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a52      	ldr	r2, [pc, #328]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800401a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401c:	4b50      	ldr	r3, [pc, #320]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	494d      	ldr	r1, [pc, #308]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d044      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b47      	ldr	r3, [pc, #284]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d119      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d003      	beq.n	8004062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405e:	2b03      	cmp	r3, #3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b3f      	ldr	r3, [pc, #252]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e067      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4934      	ldr	r1, [pc, #208]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fc ffe0 	bl	8001058 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fc ffdc 	bl	8001058 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e04f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20c      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b22      	ldr	r3, [pc, #136]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e032      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4916      	ldr	r1, [pc, #88]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f821 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc ff40 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023c00 	.word	0x40023c00
 8004160:	40023800 	.word	0x40023800
 8004164:	08009420 	.word	0x08009420
 8004168:	20000000 	.word	0x20000000
 800416c:	20000004 	.word	0x20000004

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b094      	sub	sp, #80	@ 0x50
 8004176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	647b      	str	r3, [r7, #68]	@ 0x44
 800417c:	2300      	movs	r3, #0
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	2300      	movs	r3, #0
 8004182:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004188:	4b79      	ldr	r3, [pc, #484]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d00d      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004194:	2b08      	cmp	r3, #8
 8004196:	f200 80e1 	bhi.w	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x34>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x3a>
 80041a2:	e0db      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b73      	ldr	r3, [pc, #460]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80041a8:	e0db      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b73      	ldr	r3, [pc, #460]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x208>)
 80041ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ae:	e0d8      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d063      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041da:	2300      	movs	r3, #0
 80041dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4621      	mov	r1, r4
 80041fc:	1a51      	subs	r1, r2, r1
 80041fe:	6139      	str	r1, [r7, #16]
 8004200:	4629      	mov	r1, r5
 8004202:	eb63 0301 	sbc.w	r3, r3, r1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004214:	4659      	mov	r1, fp
 8004216:	018b      	lsls	r3, r1, #6
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800421e:	4651      	mov	r1, sl
 8004220:	018a      	lsls	r2, r1, #6
 8004222:	4651      	mov	r1, sl
 8004224:	ebb2 0801 	subs.w	r8, r2, r1
 8004228:	4659      	mov	r1, fp
 800422a:	eb63 0901 	sbc.w	r9, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb18 0303 	adds.w	r3, r8, r3
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	462b      	mov	r3, r5
 8004250:	eb49 0303 	adc.w	r3, r9, r3
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004262:	4629      	mov	r1, r5
 8004264:	024b      	lsls	r3, r1, #9
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800426c:	4621      	mov	r1, r4
 800426e:	024a      	lsls	r2, r1, #9
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004276:	2200      	movs	r2, #0
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800427c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004280:	f7fb ffca 	bl	8000218 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428c:	e058      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b38      	ldr	r3, [pc, #224]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	4618      	mov	r0, r3
 8004298:	4611      	mov	r1, r2
 800429a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	0159      	lsls	r1, r3, #5
 80042b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ba:	0150      	lsls	r0, r2, #5
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4641      	mov	r1, r8
 80042c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042c6:	4649      	mov	r1, r9
 80042c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042e0:	ebb2 040a 	subs.w	r4, r2, sl
 80042e4:	eb63 050b 	sbc.w	r5, r3, fp
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	464b      	mov	r3, r9
 8004304:	eb45 0303 	adc.w	r3, r5, r3
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004316:	4629      	mov	r1, r5
 8004318:	028b      	lsls	r3, r1, #10
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004320:	4621      	mov	r1, r4
 8004322:	028a      	lsls	r2, r1, #10
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432a:	2200      	movs	r2, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	61fa      	str	r2, [r7, #28]
 8004330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004334:	f7fb ff70 	bl	8000218 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	3301      	adds	r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004350:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800435a:	e002      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004364:	4618      	mov	r0, r3
 8004366:	3750      	adds	r7, #80	@ 0x50
 8004368:	46bd      	mov	sp, r7
 800436a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200

0800437c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004380:	4b03      	ldr	r3, [pc, #12]	@ (8004390 <HAL_RCC_GetHCLKFreq+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000000 	.word	0x20000000

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004398:	f7ff fff0 	bl	800437c <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4903      	ldr	r1, [pc, #12]	@ (80043b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08009430 	.word	0x08009430

080043bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043c0:	f7ff ffdc 	bl	800437c <HAL_RCC_GetHCLKFreq>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	0b5b      	lsrs	r3, r3, #13
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	4903      	ldr	r1, [pc, #12]	@ (80043e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d2:	5ccb      	ldrb	r3, [r1, r3]
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d8:	4618      	mov	r0, r3
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40023800 	.word	0x40023800
 80043e0:	08009430 	.word	0x08009430

080043e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d010      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004408:	4b7a      	ldr	r3, [pc, #488]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800440a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800440e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4977      	ldr	r1, [pc, #476]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8004426:	2301      	movs	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d010      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004436:	4b6f      	ldr	r3, [pc, #444]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800443c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	496b      	ldr	r1, [pc, #428]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8004454:	2301      	movs	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d022      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004464:	4b63      	ldr	r3, [pc, #396]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800446a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004472:	4960      	ldr	r1, [pc, #384]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800448e:	d10c      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004490:	4b58      	ldr	r3, [pc, #352]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004492:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004496:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	3b01      	subs	r3, #1
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	4954      	ldr	r1, [pc, #336]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d022      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80044b6:	4b4f      	ldr	r3, [pc, #316]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c4:	494b      	ldr	r1, [pc, #300]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80044d4:	2301      	movs	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044e0:	d10c      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80044e2:	4b44      	ldr	r3, [pc, #272]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	493f      	ldr	r1, [pc, #252]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 808a 	beq.w	800461e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	4b39      	ldr	r3, [pc, #228]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	4a38      	ldr	r2, [pc, #224]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004518:	6413      	str	r3, [r2, #64]	@ 0x40
 800451a:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004526:	4b34      	ldr	r3, [pc, #208]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a33      	ldr	r2, [pc, #204]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004530:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004532:	f7fc fd91 	bl	8001058 <HAL_GetTick>
 8004536:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004538:	e008      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fc fd8d 	bl	8001058 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e1d1      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800454c:	4b2a      	ldr	r3, [pc, #168]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004558:	4b26      	ldr	r3, [pc, #152]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004560:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	429a      	cmp	r2, r3
 8004574:	d028      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004576:	4b1f      	ldr	r3, [pc, #124]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004580:	4b1e      	ldr	r3, [pc, #120]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004586:	4b1d      	ldr	r3, [pc, #116]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004592:	4b18      	ldr	r3, [pc, #96]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d114      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800459e:	f7fc fd5b 	bl	8001058 <HAL_GetTick>
 80045a2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a4:	e00a      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fc fd57 	bl	8001058 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e199      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ee      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045d4:	d114      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80045d6:	4b07      	ldr	r3, [pc, #28]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80045e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ea:	4902      	ldr	r1, [pc, #8]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	608b      	str	r3, [r1, #8]
 80045f0:	e00c      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x228>
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42470e40 	.word	0x42470e40
 8004600:	4b89      	ldr	r3, [pc, #548]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4a88      	ldr	r2, [pc, #544]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004606:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	4b86      	ldr	r3, [pc, #536]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800460e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	4983      	ldr	r1, [pc, #524]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800461a:	4313      	orrs	r3, r2
 800461c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8004630:	4b7e      	ldr	r3, [pc, #504]	@ (800482c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004632:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004640:	4b79      	ldr	r3, [pc, #484]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004646:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	4976      	ldr	r1, [pc, #472]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d011      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004662:	4b71      	ldr	r3, [pc, #452]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004668:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	496d      	ldr	r1, [pc, #436]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004680:	d101      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004682:	2301      	movs	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004692:	4b65      	ldr	r3, [pc, #404]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004698:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a0:	4961      	ldr	r1, [pc, #388]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d004      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b80      	cmp	r3, #128	@ 0x80
 80046b4:	f040 80c6 	bne.w	8004844 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046b8:	4b5d      	ldr	r3, [pc, #372]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046be:	f7fc fccb 	bl	8001058 <HAL_GetTick>
 80046c2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fc fcc7 	bl	8001058 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e10b      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046d8:	4b53      	ldr	r3, [pc, #332]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80046e4:	4a53      	ldr	r2, [pc, #332]	@ (8004834 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ea:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d023      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d019      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004728:	d00e      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004732:	2b00      	cmp	r3, #0
 8004734:	d019      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	d115      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x386>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004746:	d110      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	019b      	lsls	r3, r3, #6
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	061b      	lsls	r3, r3, #24
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	071b      	lsls	r3, r3, #28
 8004762:	4931      	ldr	r1, [pc, #196]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004786:	2b00      	cmp	r3, #0
 8004788:	d026      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d122      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004792:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004798:	0e1b      	lsrs	r3, r3, #24
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	019b      	lsls	r3, r3, #6
 80047aa:	431a      	orrs	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	071b      	lsls	r3, r3, #28
 80047b8:	491b      	ldr	r1, [pc, #108]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80047c0:	4b19      	ldr	r3, [pc, #100]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c6:	f023 021f 	bic.w	r2, r3, #31
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4915      	ldr	r1, [pc, #84]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d010      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	071b      	lsls	r3, r3, #28
 80047fe:	490a      	ldr	r1, [pc, #40]	@ (8004828 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004806:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800480c:	f7fc fc24 	bl	8001058 <HAL_GetTick>
 8004810:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004812:	e011      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004814:	f7fc fc20 	bl	8001058 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d90a      	bls.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e064      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800
 800482c:	424711e0 	.word	0x424711e0
 8004830:	42470068 	.word	0x42470068
 8004834:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004838:	4b2f      	ldr	r3, [pc, #188]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0e7      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004850:	4b29      	ldr	r3, [pc, #164]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004856:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485e:	4926      	ldr	r1, [pc, #152]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004872:	4b21      	ldr	r3, [pc, #132]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004878:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	491d      	ldr	r1, [pc, #116]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004894:	4b18      	ldr	r3, [pc, #96]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800489a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	4915      	ldr	r1, [pc, #84]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80048b6:	4b10      	ldr	r3, [pc, #64]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80048b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048bc:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c4:	490c      	ldr	r1, [pc, #48]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048d8:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	4904      	ldr	r1, [pc, #16]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800

080048fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e273      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d075      	beq.n	8004a06 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800491a:	4b88      	ldr	r3, [pc, #544]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b04      	cmp	r3, #4
 8004924:	d00c      	beq.n	8004940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4b85      	ldr	r3, [pc, #532]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d112      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b82      	ldr	r3, [pc, #520]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800493a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4b7e      	ldr	r3, [pc, #504]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x108>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d157      	bne.n	8004a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e24e      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x74>
 8004962:	4b76      	ldr	r3, [pc, #472]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a75      	ldr	r2, [pc, #468]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e01d      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0x98>
 800497a:	4b70      	ldr	r3, [pc, #448]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a6f      	ldr	r2, [pc, #444]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	4b6d      	ldr	r3, [pc, #436]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6c      	ldr	r2, [pc, #432]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e00b      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004994:	4b69      	ldr	r3, [pc, #420]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a68      	ldr	r2, [pc, #416]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 800499a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b66      	ldr	r3, [pc, #408]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a65      	ldr	r2, [pc, #404]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fc fb50 	bl	8001058 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fc fb4c 	bl	8001058 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	@ 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e213      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b5b      	ldr	r3, [pc, #364]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0xc0>
 80049da:	e014      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fc fb3c 	bl	8001058 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fc fb38 	bl	8001058 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	@ 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1ff      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	4b51      	ldr	r3, [pc, #324]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0xe8>
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d063      	beq.n	8004ada <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a12:	4b4a      	ldr	r3, [pc, #296]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1e:	4b47      	ldr	r3, [pc, #284]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d11c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b44      	ldr	r3, [pc, #272]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	4b41      	ldr	r3, [pc, #260]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1d3      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4937      	ldr	r1, [pc, #220]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	e03a      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a6c:	4b34      	ldr	r3, [pc, #208]	@ (8004b40 <HAL_RCC_OscConfig+0x244>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fc faf1 	bl	8001058 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fc faed 	bl	8001058 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1b4      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b28      	ldr	r3, [pc, #160]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4925      	ldr	r1, [pc, #148]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
 8004aac:	e015      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aae:	4b24      	ldr	r3, [pc, #144]	@ (8004b40 <HAL_RCC_OscConfig+0x244>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc fad0 	bl	8001058 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abc:	f7fc facc 	bl	8001058 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e193      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	4b1b      	ldr	r3, [pc, #108]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d036      	beq.n	8004b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aee:	4b15      	ldr	r3, [pc, #84]	@ (8004b44 <HAL_RCC_OscConfig+0x248>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fc fab0 	bl	8001058 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fc faac 	bl	8001058 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e173      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_RCC_OscConfig+0x240>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x200>
 8004b1a:	e01b      	b.n	8004b54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1c:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <HAL_RCC_OscConfig+0x248>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fc fa99 	bl	8001058 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	e00e      	b.n	8004b48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2a:	f7fc fa95 	bl	8001058 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d907      	bls.n	8004b48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e15c      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	42470000 	.word	0x42470000
 8004b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b48:	4b8a      	ldr	r3, [pc, #552]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ea      	bne.n	8004b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8097 	beq.w	8004c90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b66:	4b83      	ldr	r3, [pc, #524]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	4b7f      	ldr	r3, [pc, #508]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b82:	4b7c      	ldr	r3, [pc, #496]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	4b79      	ldr	r3, [pc, #484]	@ (8004d78 <HAL_RCC_OscConfig+0x47c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d118      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9e:	4b76      	ldr	r3, [pc, #472]	@ (8004d78 <HAL_RCC_OscConfig+0x47c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a75      	ldr	r2, [pc, #468]	@ (8004d78 <HAL_RCC_OscConfig+0x47c>)
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004baa:	f7fc fa55 	bl	8001058 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb2:	f7fc fa51 	bl	8001058 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e118      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8004d78 <HAL_RCC_OscConfig+0x47c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d106      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2ea>
 8004bd8:	4b66      	ldr	r3, [pc, #408]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bdc:	4a65      	ldr	r2, [pc, #404]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be4:	e01c      	b.n	8004c20 <HAL_RCC_OscConfig+0x324>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0x30c>
 8004bee:	4b61      	ldr	r3, [pc, #388]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf2:	4a60      	ldr	r2, [pc, #384]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfa:	4b5e      	ldr	r3, [pc, #376]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfe:	4a5d      	ldr	r2, [pc, #372]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0x324>
 8004c08:	4b5a      	ldr	r3, [pc, #360]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0c:	4a59      	ldr	r2, [pc, #356]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c14:	4b57      	ldr	r3, [pc, #348]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c18:	4a56      	ldr	r2, [pc, #344]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c1a:	f023 0304 	bic.w	r3, r3, #4
 8004c1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fc fa16 	bl	8001058 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2e:	e00a      	b.n	8004c46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c30:	f7fc fa12 	bl	8001058 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e0d7      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c46:	4b4b      	ldr	r3, [pc, #300]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0ee      	beq.n	8004c30 <HAL_RCC_OscConfig+0x334>
 8004c52:	e014      	b.n	8004c7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c54:	f7fc fa00 	bl	8001058 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5a:	e00a      	b.n	8004c72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c5c:	f7fc f9fc 	bl	8001058 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0c1      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c72:	4b40      	ldr	r3, [pc, #256]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1ee      	bne.n	8004c5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d105      	bne.n	8004c90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c84:	4b3b      	ldr	r3, [pc, #236]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	4a3a      	ldr	r2, [pc, #232]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80ad 	beq.w	8004df4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c9a:	4b36      	ldr	r3, [pc, #216]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d060      	beq.n	8004d68 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d145      	bne.n	8004d3a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cae:	4b33      	ldr	r3, [pc, #204]	@ (8004d7c <HAL_RCC_OscConfig+0x480>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fc f9d0 	bl	8001058 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fc f9cc 	bl	8001058 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e093      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	4b29      	ldr	r3, [pc, #164]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	071b      	lsls	r3, r3, #28
 8004d06:	491b      	ldr	r1, [pc, #108]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d7c <HAL_RCC_OscConfig+0x480>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fc f9a1 	bl	8001058 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d1a:	f7fc f99d 	bl	8001058 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e064      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2c:	4b11      	ldr	r3, [pc, #68]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x41e>
 8004d38:	e05c      	b.n	8004df4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3a:	4b10      	ldr	r3, [pc, #64]	@ (8004d7c <HAL_RCC_OscConfig+0x480>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fc f98a 	bl	8001058 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fc f986 	bl	8001058 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e04d      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <HAL_RCC_OscConfig+0x478>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x44c>
 8004d66:	e045      	b.n	8004df4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e040      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d80:	4b1f      	ldr	r3, [pc, #124]	@ (8004e00 <HAL_RCC_OscConfig+0x504>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d030      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d129      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d122      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004db0:	4013      	ands	r3, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d119      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d10f      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800

08004e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e07b      	b.n	8004f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d108      	bne.n	8004e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e26:	d009      	beq.n	8004e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61da      	str	r2, [r3, #28]
 8004e2e:	e005      	b.n	8004e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fb ff1e 	bl	8000c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec0:	ea42 0103 	orr.w	r1, r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	f003 0104 	and.w	r1, r3, #4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee2:	f003 0210 	and.w	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e03f      	b.n	8004fa8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fb ff67 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2224      	movs	r2, #36	@ 0x24
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f828 	bl	8004fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb4:	b0c0      	sub	sp, #256	@ 0x100
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	68d9      	ldr	r1, [r3, #12]
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	ea40 0301 	orr.w	r3, r0, r1
 8004fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005008:	f021 010c 	bic.w	r1, r1, #12
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005016:	430b      	orrs	r3, r1
 8005018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800501a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502a:	6999      	ldr	r1, [r3, #24]
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	ea40 0301 	orr.w	r3, r0, r1
 8005036:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b95      	ldr	r3, [pc, #596]	@ (8005294 <UART_SetConfig+0x2e4>)
 8005040:	429a      	cmp	r2, r3
 8005042:	d011      	beq.n	8005068 <UART_SetConfig+0xb8>
 8005044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b93      	ldr	r3, [pc, #588]	@ (8005298 <UART_SetConfig+0x2e8>)
 800504c:	429a      	cmp	r2, r3
 800504e:	d00b      	beq.n	8005068 <UART_SetConfig+0xb8>
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b91      	ldr	r3, [pc, #580]	@ (800529c <UART_SetConfig+0x2ec>)
 8005058:	429a      	cmp	r2, r3
 800505a:	d005      	beq.n	8005068 <UART_SetConfig+0xb8>
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b8f      	ldr	r3, [pc, #572]	@ (80052a0 <UART_SetConfig+0x2f0>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d104      	bne.n	8005072 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005068:	f7ff f9a8 	bl	80043bc <HAL_RCC_GetPCLK2Freq>
 800506c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005070:	e003      	b.n	800507a <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005072:	f7ff f98f 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 8005076:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005084:	f040 8110 	bne.w	80052a8 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800508c:	2200      	movs	r2, #0
 800508e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005092:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005096:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800509a:	4622      	mov	r2, r4
 800509c:	462b      	mov	r3, r5
 800509e:	1891      	adds	r1, r2, r2
 80050a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050a2:	415b      	adcs	r3, r3
 80050a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050aa:	4621      	mov	r1, r4
 80050ac:	eb12 0801 	adds.w	r8, r2, r1
 80050b0:	4629      	mov	r1, r5
 80050b2:	eb43 0901 	adc.w	r9, r3, r1
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ca:	4690      	mov	r8, r2
 80050cc:	4699      	mov	r9, r3
 80050ce:	4623      	mov	r3, r4
 80050d0:	eb18 0303 	adds.w	r3, r8, r3
 80050d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050d8:	462b      	mov	r3, r5
 80050da:	eb49 0303 	adc.w	r3, r9, r3
 80050de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050f6:	460b      	mov	r3, r1
 80050f8:	18db      	adds	r3, r3, r3
 80050fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80050fc:	4613      	mov	r3, r2
 80050fe:	eb42 0303 	adc.w	r3, r2, r3
 8005102:	657b      	str	r3, [r7, #84]	@ 0x54
 8005104:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005108:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800510c:	f7fb f884 	bl	8000218 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4b63      	ldr	r3, [pc, #396]	@ (80052a4 <UART_SetConfig+0x2f4>)
 8005116:	fba3 2302 	umull	r2, r3, r3, r2
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	011c      	lsls	r4, r3, #4
 800511e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005122:	2200      	movs	r2, #0
 8005124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005128:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800512c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005130:	4642      	mov	r2, r8
 8005132:	464b      	mov	r3, r9
 8005134:	1891      	adds	r1, r2, r2
 8005136:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005138:	415b      	adcs	r3, r3
 800513a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800513c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005140:	4641      	mov	r1, r8
 8005142:	eb12 0a01 	adds.w	sl, r2, r1
 8005146:	4649      	mov	r1, r9
 8005148:	eb43 0b01 	adc.w	fp, r3, r1
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005158:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800515c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005160:	4692      	mov	sl, r2
 8005162:	469b      	mov	fp, r3
 8005164:	4643      	mov	r3, r8
 8005166:	eb1a 0303 	adds.w	r3, sl, r3
 800516a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800516e:	464b      	mov	r3, r9
 8005170:	eb4b 0303 	adc.w	r3, fp, r3
 8005174:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005184:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005188:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800518c:	460b      	mov	r3, r1
 800518e:	18db      	adds	r3, r3, r3
 8005190:	643b      	str	r3, [r7, #64]	@ 0x40
 8005192:	4613      	mov	r3, r2
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	647b      	str	r3, [r7, #68]	@ 0x44
 800519a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800519e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051a2:	f7fb f839 	bl	8000218 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	4b3d      	ldr	r3, [pc, #244]	@ (80052a4 <UART_SetConfig+0x2f4>)
 80051ae:	fba3 2301 	umull	r2, r3, r3, r1
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2264      	movs	r2, #100	@ 0x64
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	1acb      	subs	r3, r1, r3
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051c2:	4b38      	ldr	r3, [pc, #224]	@ (80052a4 <UART_SetConfig+0x2f4>)
 80051c4:	fba3 2302 	umull	r2, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051d0:	441c      	add	r4, r3
 80051d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d6:	2200      	movs	r2, #0
 80051d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	1891      	adds	r1, r2, r2
 80051ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051ec:	415b      	adcs	r3, r3
 80051ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051f4:	4641      	mov	r1, r8
 80051f6:	1851      	adds	r1, r2, r1
 80051f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80051fa:	4649      	mov	r1, r9
 80051fc:	414b      	adcs	r3, r1
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800520c:	4659      	mov	r1, fp
 800520e:	00cb      	lsls	r3, r1, #3
 8005210:	4651      	mov	r1, sl
 8005212:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005216:	4651      	mov	r1, sl
 8005218:	00ca      	lsls	r2, r1, #3
 800521a:	4610      	mov	r0, r2
 800521c:	4619      	mov	r1, r3
 800521e:	4603      	mov	r3, r0
 8005220:	4642      	mov	r2, r8
 8005222:	189b      	adds	r3, r3, r2
 8005224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005228:	464b      	mov	r3, r9
 800522a:	460a      	mov	r2, r1
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005240:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005244:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005248:	460b      	mov	r3, r1
 800524a:	18db      	adds	r3, r3, r3
 800524c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800524e:	4613      	mov	r3, r2
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800525a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800525e:	f7fa ffdb 	bl	8000218 <__aeabi_uldivmod>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <UART_SetConfig+0x2f4>)
 8005268:	fba3 1302 	umull	r1, r3, r3, r2
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	2164      	movs	r1, #100	@ 0x64
 8005270:	fb01 f303 	mul.w	r3, r1, r3
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	3332      	adds	r3, #50	@ 0x32
 800527a:	4a0a      	ldr	r2, [pc, #40]	@ (80052a4 <UART_SetConfig+0x2f4>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	f003 0207 	and.w	r2, r3, #7
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4422      	add	r2, r4
 800528e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005290:	e10a      	b.n	80054a8 <UART_SetConfig+0x4f8>
 8005292:	bf00      	nop
 8005294:	40011000 	.word	0x40011000
 8005298:	40011400 	.word	0x40011400
 800529c:	40011800 	.word	0x40011800
 80052a0:	40011c00 	.word	0x40011c00
 80052a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052ba:	4642      	mov	r2, r8
 80052bc:	464b      	mov	r3, r9
 80052be:	1891      	adds	r1, r2, r2
 80052c0:	6239      	str	r1, [r7, #32]
 80052c2:	415b      	adcs	r3, r3
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ca:	4641      	mov	r1, r8
 80052cc:	1854      	adds	r4, r2, r1
 80052ce:	4649      	mov	r1, r9
 80052d0:	eb43 0501 	adc.w	r5, r3, r1
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	00eb      	lsls	r3, r5, #3
 80052de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052e2:	00e2      	lsls	r2, r4, #3
 80052e4:	4614      	mov	r4, r2
 80052e6:	461d      	mov	r5, r3
 80052e8:	4643      	mov	r3, r8
 80052ea:	18e3      	adds	r3, r4, r3
 80052ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052f0:	464b      	mov	r3, r9
 80052f2:	eb45 0303 	adc.w	r3, r5, r3
 80052f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005306:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005316:	4629      	mov	r1, r5
 8005318:	008b      	lsls	r3, r1, #2
 800531a:	4621      	mov	r1, r4
 800531c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005320:	4621      	mov	r1, r4
 8005322:	008a      	lsls	r2, r1, #2
 8005324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005328:	f7fa ff76 	bl	8000218 <__aeabi_uldivmod>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4b60      	ldr	r3, [pc, #384]	@ (80054b4 <UART_SetConfig+0x504>)
 8005332:	fba3 2302 	umull	r2, r3, r3, r2
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	011c      	lsls	r4, r3, #4
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005344:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	61b9      	str	r1, [r7, #24]
 8005354:	415b      	adcs	r3, r3
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800535c:	4641      	mov	r1, r8
 800535e:	1851      	adds	r1, r2, r1
 8005360:	6139      	str	r1, [r7, #16]
 8005362:	4649      	mov	r1, r9
 8005364:	414b      	adcs	r3, r1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005374:	4659      	mov	r1, fp
 8005376:	00cb      	lsls	r3, r1, #3
 8005378:	4651      	mov	r1, sl
 800537a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537e:	4651      	mov	r1, sl
 8005380:	00ca      	lsls	r2, r1, #3
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	4603      	mov	r3, r0
 8005388:	4642      	mov	r2, r8
 800538a:	189b      	adds	r3, r3, r2
 800538c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005390:	464b      	mov	r3, r9
 8005392:	460a      	mov	r2, r1
 8005394:	eb42 0303 	adc.w	r3, r2, r3
 8005398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053b4:	4649      	mov	r1, r9
 80053b6:	008b      	lsls	r3, r1, #2
 80053b8:	4641      	mov	r1, r8
 80053ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053be:	4641      	mov	r1, r8
 80053c0:	008a      	lsls	r2, r1, #2
 80053c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053c6:	f7fa ff27 	bl	8000218 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	4b38      	ldr	r3, [pc, #224]	@ (80054b4 <UART_SetConfig+0x504>)
 80053d2:	fba3 2301 	umull	r2, r3, r3, r1
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	2264      	movs	r2, #100	@ 0x64
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	1acb      	subs	r3, r1, r3
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	3332      	adds	r3, #50	@ 0x32
 80053e4:	4a33      	ldr	r2, [pc, #204]	@ (80054b4 <UART_SetConfig+0x504>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053f0:	441c      	add	r4, r3
 80053f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f6:	2200      	movs	r2, #0
 80053f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80053fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	415b      	adcs	r3, r3
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005410:	4641      	mov	r1, r8
 8005412:	1851      	adds	r1, r2, r1
 8005414:	6039      	str	r1, [r7, #0]
 8005416:	4649      	mov	r1, r9
 8005418:	414b      	adcs	r3, r1
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005428:	4659      	mov	r1, fp
 800542a:	00cb      	lsls	r3, r1, #3
 800542c:	4651      	mov	r1, sl
 800542e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005432:	4651      	mov	r1, sl
 8005434:	00ca      	lsls	r2, r1, #3
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	4603      	mov	r3, r0
 800543c:	4642      	mov	r2, r8
 800543e:	189b      	adds	r3, r3, r2
 8005440:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005442:	464b      	mov	r3, r9
 8005444:	460a      	mov	r2, r1
 8005446:	eb42 0303 	adc.w	r3, r2, r3
 800544a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	663b      	str	r3, [r7, #96]	@ 0x60
 8005456:	667a      	str	r2, [r7, #100]	@ 0x64
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005464:	4649      	mov	r1, r9
 8005466:	008b      	lsls	r3, r1, #2
 8005468:	4641      	mov	r1, r8
 800546a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800546e:	4641      	mov	r1, r8
 8005470:	008a      	lsls	r2, r1, #2
 8005472:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005476:	f7fa fecf 	bl	8000218 <__aeabi_uldivmod>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <UART_SetConfig+0x504>)
 8005480:	fba3 1302 	umull	r1, r3, r3, r2
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	2164      	movs	r1, #100	@ 0x64
 8005488:	fb01 f303 	mul.w	r3, r1, r3
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	3332      	adds	r3, #50	@ 0x32
 8005492:	4a08      	ldr	r2, [pc, #32]	@ (80054b4 <UART_SetConfig+0x504>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	f003 020f 	and.w	r2, r3, #15
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4422      	add	r2, r4
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054ae:	46bd      	mov	sp, r7
 80054b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054b4:	51eb851f 	.word	0x51eb851f

080054b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054b8:	b084      	sub	sp, #16
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	f107 001c 	add.w	r0, r7, #28
 80054c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d122      	bne.n	8005516 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80054e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d105      	bne.n	800550a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 fa3a 	bl	8006984 <USB_CoreReset>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
 8005514:	e01a      	b.n	800554c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f001 fa2e 	bl	8006984 <USB_CoreReset>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800552c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005536:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	639a      	str	r2, [r3, #56]	@ 0x38
 800553e:	e005      	b.n	800554c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005544:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554e:	2b01      	cmp	r3, #1
 8005550:	d10b      	bne.n	800556a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f043 0206 	orr.w	r2, r3, #6
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005576:	b004      	add	sp, #16
 8005578:	4770      	bx	lr
	...

0800557c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d165      	bne.n	800565c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a41      	ldr	r2, [pc, #260]	@ (8005698 <USB_SetTurnaroundTime+0x11c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d906      	bls.n	80055a6 <USB_SetTurnaroundTime+0x2a>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a40      	ldr	r2, [pc, #256]	@ (800569c <USB_SetTurnaroundTime+0x120>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d202      	bcs.n	80055a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055a0:	230f      	movs	r3, #15
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e062      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a3c      	ldr	r2, [pc, #240]	@ (800569c <USB_SetTurnaroundTime+0x120>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d306      	bcc.n	80055bc <USB_SetTurnaroundTime+0x40>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a3b      	ldr	r2, [pc, #236]	@ (80056a0 <USB_SetTurnaroundTime+0x124>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d202      	bcs.n	80055bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055b6:	230e      	movs	r3, #14
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e057      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a38      	ldr	r2, [pc, #224]	@ (80056a0 <USB_SetTurnaroundTime+0x124>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d306      	bcc.n	80055d2 <USB_SetTurnaroundTime+0x56>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a37      	ldr	r2, [pc, #220]	@ (80056a4 <USB_SetTurnaroundTime+0x128>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d202      	bcs.n	80055d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055cc:	230d      	movs	r3, #13
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e04c      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4a33      	ldr	r2, [pc, #204]	@ (80056a4 <USB_SetTurnaroundTime+0x128>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d306      	bcc.n	80055e8 <USB_SetTurnaroundTime+0x6c>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a32      	ldr	r2, [pc, #200]	@ (80056a8 <USB_SetTurnaroundTime+0x12c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d802      	bhi.n	80055e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055e2:	230c      	movs	r3, #12
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e041      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4a2f      	ldr	r2, [pc, #188]	@ (80056a8 <USB_SetTurnaroundTime+0x12c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d906      	bls.n	80055fe <USB_SetTurnaroundTime+0x82>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a2e      	ldr	r2, [pc, #184]	@ (80056ac <USB_SetTurnaroundTime+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d802      	bhi.n	80055fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055f8:	230b      	movs	r3, #11
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e036      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4a2a      	ldr	r2, [pc, #168]	@ (80056ac <USB_SetTurnaroundTime+0x130>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d906      	bls.n	8005614 <USB_SetTurnaroundTime+0x98>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4a29      	ldr	r2, [pc, #164]	@ (80056b0 <USB_SetTurnaroundTime+0x134>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d802      	bhi.n	8005614 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800560e:	230a      	movs	r3, #10
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e02b      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a26      	ldr	r2, [pc, #152]	@ (80056b0 <USB_SetTurnaroundTime+0x134>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d906      	bls.n	800562a <USB_SetTurnaroundTime+0xae>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a25      	ldr	r2, [pc, #148]	@ (80056b4 <USB_SetTurnaroundTime+0x138>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d202      	bcs.n	800562a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005624:	2309      	movs	r3, #9
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e020      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4a21      	ldr	r2, [pc, #132]	@ (80056b4 <USB_SetTurnaroundTime+0x138>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d306      	bcc.n	8005640 <USB_SetTurnaroundTime+0xc4>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4a20      	ldr	r2, [pc, #128]	@ (80056b8 <USB_SetTurnaroundTime+0x13c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d802      	bhi.n	8005640 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800563a:	2308      	movs	r3, #8
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e015      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4a1d      	ldr	r2, [pc, #116]	@ (80056b8 <USB_SetTurnaroundTime+0x13c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d906      	bls.n	8005656 <USB_SetTurnaroundTime+0xda>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a1c      	ldr	r2, [pc, #112]	@ (80056bc <USB_SetTurnaroundTime+0x140>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d202      	bcs.n	8005656 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005650:	2307      	movs	r3, #7
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	e00a      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005656:	2306      	movs	r3, #6
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e007      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005662:	2309      	movs	r3, #9
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e001      	b.n	800566c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005668:	2309      	movs	r3, #9
 800566a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	029b      	lsls	r3, r3, #10
 8005680:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005684:	431a      	orrs	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	00d8acbf 	.word	0x00d8acbf
 800569c:	00e4e1c0 	.word	0x00e4e1c0
 80056a0:	00f42400 	.word	0x00f42400
 80056a4:	01067380 	.word	0x01067380
 80056a8:	011a499f 	.word	0x011a499f
 80056ac:	01312cff 	.word	0x01312cff
 80056b0:	014ca43f 	.word	0x014ca43f
 80056b4:	016e3600 	.word	0x016e3600
 80056b8:	01a6ab1f 	.word	0x01a6ab1f
 80056bc:	01e84800 	.word	0x01e84800

080056c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f043 0201 	orr.w	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 0201 	bic.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d115      	bne.n	8005752 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005732:	2001      	movs	r0, #1
 8005734:	f7fb fc9c 	bl	8001070 <HAL_Delay>
      ms++;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f001 f890 	bl	8006864 <USB_GetMode>
 8005744:	4603      	mov	r3, r0
 8005746:	2b01      	cmp	r3, #1
 8005748:	d01e      	beq.n	8005788 <USB_SetCurrentMode+0x84>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b31      	cmp	r3, #49	@ 0x31
 800574e:	d9f0      	bls.n	8005732 <USB_SetCurrentMode+0x2e>
 8005750:	e01a      	b.n	8005788 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d115      	bne.n	8005784 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005764:	2001      	movs	r0, #1
 8005766:	f7fb fc83 	bl	8001070 <HAL_Delay>
      ms++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f001 f877 	bl	8006864 <USB_GetMode>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <USB_SetCurrentMode+0x84>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b31      	cmp	r3, #49	@ 0x31
 8005780:	d9f0      	bls.n	8005764 <USB_SetCurrentMode+0x60>
 8005782:	e001      	b.n	8005788 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e005      	b.n	8005794 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b32      	cmp	r3, #50	@ 0x32
 800578c:	d101      	bne.n	8005792 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800579c:	b084      	sub	sp, #16
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	e009      	b.n	80057d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	3340      	adds	r3, #64	@ 0x40
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3301      	adds	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b0e      	cmp	r3, #14
 80057d4:	d9f2      	bls.n	80057bc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11c      	bne.n	8005816 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057ea:	f043 0302 	orr.w	r3, r3, #2
 80057ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e005      	b.n	8005822 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005834:	4619      	mov	r1, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583c:	461a      	mov	r2, r3
 800583e:	680b      	ldr	r3, [r1, #0]
 8005840:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	2b01      	cmp	r3, #1
 8005846:	d10c      	bne.n	8005862 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d104      	bne.n	8005858 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800584e:	2100      	movs	r1, #0
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f945 	bl	8005ae0 <USB_SetDevSpeed>
 8005856:	e008      	b.n	800586a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005858:	2101      	movs	r1, #1
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f940 	bl	8005ae0 <USB_SetDevSpeed>
 8005860:	e003      	b.n	800586a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005862:	2103      	movs	r1, #3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f93b 	bl	8005ae0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800586a:	2110      	movs	r1, #16
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f8f3 	bl	8005a58 <USB_FlushTxFifo>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f90f 	bl	8005aa0 <USB_FlushRxFifo>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005892:	461a      	mov	r2, r3
 8005894:	2300      	movs	r3, #0
 8005896:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800589e:	461a      	mov	r2, r3
 80058a0:	2300      	movs	r3, #0
 80058a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058aa:	461a      	mov	r2, r3
 80058ac:	2300      	movs	r3, #0
 80058ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b0:	2300      	movs	r3, #0
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	e043      	b.n	800593e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058cc:	d118      	bne.n	8005900 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e0:	461a      	mov	r2, r3
 80058e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	e013      	b.n	8005912 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f6:	461a      	mov	r2, r3
 80058f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	e008      	b.n	8005912 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591e:	461a      	mov	r2, r3
 8005920:	2300      	movs	r3, #0
 8005922:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005930:	461a      	mov	r2, r3
 8005932:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005936:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	3301      	adds	r3, #1
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	429a      	cmp	r2, r3
 8005944:	d3b7      	bcc.n	80058b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	e043      	b.n	80059d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800595e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005962:	d118      	bne.n	8005996 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005976:	461a      	mov	r2, r3
 8005978:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e013      	b.n	80059a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598c:	461a      	mov	r2, r3
 800598e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e008      	b.n	80059a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a2:	461a      	mov	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b4:	461a      	mov	r2, r3
 80059b6:	2300      	movs	r3, #0
 80059b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c6:	461a      	mov	r2, r3
 80059c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3301      	adds	r3, #1
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d3b7      	bcc.n	800594c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80059fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f043 0210 	orr.w	r2, r3, #16
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699a      	ldr	r2, [r3, #24]
 8005a14:	4b0f      	ldr	r3, [pc, #60]	@ (8005a54 <USB_DevInit+0x2b8>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f043 0208 	orr.w	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d107      	bne.n	8005a44 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a3c:	f043 0304 	orr.w	r3, r3, #4
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a50:	b004      	add	sp, #16
 8005a52:	4770      	bx	lr
 8005a54:	803c3800 	.word	0x803c3800

08005a58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	019b      	lsls	r3, r3, #6
 8005a6a:	f043 0220 	orr.w	r2, r3, #32
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	4a08      	ldr	r2, [pc, #32]	@ (8005a9c <USB_FlushTxFifo+0x44>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d901      	bls.n	8005a82 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e006      	b.n	8005a90 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d0f1      	beq.n	8005a72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	00030d40 	.word	0x00030d40

08005aa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2210      	movs	r2, #16
 8005ab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	4a08      	ldr	r2, [pc, #32]	@ (8005adc <USB_FlushRxFifo+0x3c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e006      	b.n	8005ad0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d0f1      	beq.n	8005ab2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	00030d40 	.word	0x00030d40

08005ae0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b00:	4313      	orrs	r3, r2
 8005b02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0306 	and.w	r3, r3, #6
 8005b2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]
 8005b36:	e00a      	b.n	8005b4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d002      	beq.n	8005b44 <USB_GetDevSpeed+0x32>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b06      	cmp	r3, #6
 8005b42:	d102      	bne.n	8005b4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b44:	2302      	movs	r3, #2
 8005b46:	75fb      	strb	r3, [r7, #23]
 8005b48:	e001      	b.n	8005b4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b4a:	230f      	movs	r3, #15
 8005b4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d13a      	bne.n	8005bee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	2101      	movs	r1, #1
 8005b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	68f9      	ldr	r1, [r7, #12]
 8005b92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d155      	bne.n	8005c5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	059b      	lsls	r3, r3, #22
 8005bd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	e036      	b.n	8005c5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf4:	69da      	ldr	r2, [r3, #28]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	2101      	movs	r1, #1
 8005c00:	fa01 f303 	lsl.w	r3, r1, r3
 8005c04:	041b      	lsls	r3, r3, #16
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11a      	bne.n	8005c5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	78db      	ldrb	r3, [r3, #3]
 8005c40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c42:	430b      	orrs	r3, r1
 8005c44:	4313      	orrs	r3, r2
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08a      	sub	sp, #40	@ 0x28
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	f040 815c 	bne.w	8005f46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d132      	bne.n	8005cfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005cb4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cf4:	0cdb      	lsrs	r3, r3, #19
 8005cf6:	04db      	lsls	r3, r3, #19
 8005cf8:	6113      	str	r3, [r2, #16]
 8005cfa:	e074      	b.n	8005de6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d16:	0cdb      	lsrs	r3, r3, #19
 8005d18:	04db      	lsls	r3, r3, #19
 8005d1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d36:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d3a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6959      	ldr	r1, [r3, #20]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	440b      	add	r3, r1
 8005d58:	1e59      	subs	r1, r3, #1
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d64:	4b9d      	ldr	r3, [pc, #628]	@ (8005fdc <USB_EPStartXfer+0x370>)
 8005d66:	400b      	ands	r3, r1
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	0148      	lsls	r0, r1, #5
 8005d6c:	69f9      	ldr	r1, [r7, #28]
 8005d6e:	4401      	add	r1, r0
 8005d70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d74:	4313      	orrs	r3, r2
 8005d76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d8e:	69b9      	ldr	r1, [r7, #24]
 8005d90:	0148      	lsls	r0, r1, #5
 8005d92:	69f9      	ldr	r1, [r7, #28]
 8005d94:	4401      	add	r1, r0
 8005d96:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	78db      	ldrb	r3, [r3, #3]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d11f      	bne.n	8005de6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	69fa      	ldr	r2, [r7, #28]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dc0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005dc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005de4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d14b      	bne.n	8005e84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e00:	461a      	mov	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	78db      	ldrb	r3, [r3, #3]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d128      	bne.n	8005e62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d110      	bne.n	8005e42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	e00f      	b.n	8005e62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e12f      	b.n	80060e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e9e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ea2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	78db      	ldrb	r3, [r3, #3]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d015      	beq.n	8005ed8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8117 	beq.w	80060e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	69f9      	ldr	r1, [r7, #28]
 8005ece:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	634b      	str	r3, [r1, #52]	@ 0x34
 8005ed6:	e105      	b.n	80060e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d110      	bne.n	8005f0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	e00f      	b.n	8005f2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	68d9      	ldr	r1, [r3, #12]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	b298      	uxth	r0, r3
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fa2b 	bl	800639a <USB_WritePacket>
 8005f44:	e0ce      	b.n	80060e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f60:	0cdb      	lsrs	r3, r3, #19
 8005f62:	04db      	lsls	r3, r3, #19
 8005f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d126      	bne.n	8005fe0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa8:	69b9      	ldr	r1, [r7, #24]
 8005faa:	0148      	lsls	r0, r1, #5
 8005fac:	69f9      	ldr	r1, [r7, #28]
 8005fae:	4401      	add	r1, r0
 8005fb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fd6:	6113      	str	r3, [r2, #16]
 8005fd8:	e036      	b.n	8006048 <USB_EPStartXfer+0x3dc>
 8005fda:	bf00      	nop
 8005fdc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	4413      	add	r3, r2
 8005fea:	1e5a      	subs	r2, r3, #1
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	8afb      	ldrh	r3, [r7, #22]
 8006006:	04d9      	lsls	r1, r3, #19
 8006008:	4b39      	ldr	r3, [pc, #228]	@ (80060f0 <USB_EPStartXfer+0x484>)
 800600a:	400b      	ands	r3, r1
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	0148      	lsls	r0, r1, #5
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	4401      	add	r1, r0
 8006014:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006018:	4313      	orrs	r3, r2
 800601a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	8af9      	ldrh	r1, [r7, #22]
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006038:	69b9      	ldr	r1, [r7, #24]
 800603a:	0148      	lsls	r0, r1, #5
 800603c:	69f9      	ldr	r1, [r7, #28]
 800603e:	4401      	add	r1, r0
 8006040:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006044:	4313      	orrs	r3, r2
 8006046:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d10d      	bne.n	800606a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d009      	beq.n	800606a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68d9      	ldr	r1, [r3, #12]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006066:	460a      	mov	r2, r1
 8006068:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d128      	bne.n	80060c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607e:	2b00      	cmp	r3, #0
 8006080:	d110      	bne.n	80060a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800609c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	e00f      	b.n	80060c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3720      	adds	r7, #32
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	1ff80000 	.word	0x1ff80000

080060f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 80cd 	bne.w	80062b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d132      	bne.n	8006184 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	440a      	add	r2, r1
 8006134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006138:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800613c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006140:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800617c:	0cdb      	lsrs	r3, r3, #19
 800617e:	04db      	lsls	r3, r3, #19
 8006180:	6113      	str	r3, [r2, #16]
 8006182:	e04e      	b.n	8006222 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	440a      	add	r2, r1
 800619a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800619e:	0cdb      	lsrs	r3, r3, #19
 80061a0:	04db      	lsls	r3, r3, #19
 80061a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	695a      	ldr	r2, [r3, #20]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d903      	bls.n	80061dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006212:	6939      	ldr	r1, [r7, #16]
 8006214:	0148      	lsls	r0, r1, #5
 8006216:	6979      	ldr	r1, [r7, #20]
 8006218:	4401      	add	r1, r0
 800621a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800621e:	4313      	orrs	r3, r2
 8006220:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d11e      	bne.n	8006266 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800623c:	461a      	mov	r2, r3
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	440a      	add	r2, r1
 800625a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800625e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	e092      	b.n	800638c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	440a      	add	r2, r1
 800627c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006280:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006284:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d07e      	beq.n	800638c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	2101      	movs	r1, #1
 80062a0:	fa01 f303 	lsl.w	r3, r1, r3
 80062a4:	6979      	ldr	r1, [r7, #20]
 80062a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062aa:	4313      	orrs	r3, r2
 80062ac:	634b      	str	r3, [r1, #52]	@ 0x34
 80062ae:	e06d      	b.n	800638c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ca:	0cdb      	lsrs	r3, r3, #19
 80062cc:	04db      	lsls	r3, r3, #19
 80062ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800631e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006322:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633a:	6939      	ldr	r1, [r7, #16]
 800633c:	0148      	lsls	r0, r1, #5
 800633e:	6979      	ldr	r1, [r7, #20]
 8006340:	4401      	add	r1, r0
 8006342:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006346:	4313      	orrs	r3, r2
 8006348:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d10d      	bne.n	800636c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	68d9      	ldr	r1, [r3, #12]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006368:	460a      	mov	r2, r1
 800636a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006386:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800638a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800639a:	b480      	push	{r7}
 800639c:	b089      	sub	sp, #36	@ 0x24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	4611      	mov	r1, r2
 80063a6:	461a      	mov	r2, r3
 80063a8:	460b      	mov	r3, r1
 80063aa:	71fb      	strb	r3, [r7, #7]
 80063ac:	4613      	mov	r3, r2
 80063ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d123      	bne.n	8006408 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063c0:	88bb      	ldrh	r3, [r7, #4]
 80063c2:	3303      	adds	r3, #3
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	e018      	b.n	8006400 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	031a      	lsls	r2, r3, #12
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063da:	461a      	mov	r2, r3
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	3301      	adds	r3, #1
 80063e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	3301      	adds	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	3301      	adds	r3, #1
 80063f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	3301      	adds	r3, #1
 80063f8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	3301      	adds	r3, #1
 80063fe:	61bb      	str	r3, [r7, #24]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	429a      	cmp	r2, r3
 8006406:	d3e2      	bcc.n	80063ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3724      	adds	r7, #36	@ 0x24
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006416:	b480      	push	{r7}
 8006418:	b08b      	sub	sp, #44	@ 0x2c
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	4613      	mov	r3, r2
 8006422:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	089b      	lsrs	r3, r3, #2
 8006430:	b29b      	uxth	r3, r3
 8006432:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	623b      	str	r3, [r7, #32]
 8006440:	e014      	b.n	800646c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	601a      	str	r2, [r3, #0]
    pDest++;
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	3301      	adds	r3, #1
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	3301      	adds	r3, #1
 8006458:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	3301      	adds	r3, #1
 800645e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	3301      	adds	r3, #1
 8006464:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	3301      	adds	r3, #1
 800646a:	623b      	str	r3, [r7, #32]
 800646c:	6a3a      	ldr	r2, [r7, #32]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	429a      	cmp	r2, r3
 8006472:	d3e6      	bcc.n	8006442 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006474:	8bfb      	ldrh	r3, [r7, #30]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01e      	beq.n	80064b8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006484:	461a      	mov	r2, r3
 8006486:	f107 0310 	add.w	r3, r7, #16
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	fa22 f303 	lsr.w	r3, r2, r3
 800649a:	b2da      	uxtb	r2, r3
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	701a      	strb	r2, [r3, #0]
      i++;
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	3301      	adds	r3, #1
 80064a4:	623b      	str	r3, [r7, #32]
      pDest++;
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	3301      	adds	r3, #1
 80064aa:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80064ac:	8bfb      	ldrh	r3, [r7, #30]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064b2:	8bfb      	ldrh	r3, [r7, #30]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1ea      	bne.n	800648e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	372c      	adds	r7, #44	@ 0x2c
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d12c      	bne.n	800653c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db12      	blt.n	800651a <USB_EPSetStall+0x54>
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00f      	beq.n	800651a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	440a      	add	r2, r1
 8006510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006514:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006518:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e02b      	b.n	8006594 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	db12      	blt.n	8006574 <USB_EPSetStall+0xae>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00f      	beq.n	8006574 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800656e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006572:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800658e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d128      	bne.n	8006610 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	78db      	ldrb	r3, [r3, #3]
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d003      	beq.n	80065ee <USB_EPClearStall+0x4c>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	78db      	ldrb	r3, [r3, #3]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d138      	bne.n	8006660 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	e027      	b.n	8006660 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800662a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800662e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	78db      	ldrb	r3, [r3, #3]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d003      	beq.n	8006640 <USB_EPClearStall+0x9e>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	78db      	ldrb	r3, [r3, #3]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d10f      	bne.n	8006660 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800665a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800665e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800668c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006690:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066a8:	4313      	orrs	r3, r2
 80066aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066d4:	f023 0303 	bic.w	r3, r3, #3
 80066d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066e8:	f023 0302 	bic.w	r3, r3, #2
 80066ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800672a:	f043 0302 	orr.w	r3, r3, #2
 800672e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4013      	ands	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006756:	68fb      	ldr	r3, [r7, #12]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	4013      	ands	r3, r2
 8006786:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	0c1b      	lsrs	r3, r3, #16
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4013      	ands	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	b29b      	uxth	r3, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	4013      	ands	r3, r2
 80067f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067fa:	68bb      	ldr	r3, [r7, #8]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
 8006838:	01db      	lsls	r3, r3, #7
 800683a:	b2db      	uxtb	r3, r3
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4013      	ands	r3, r2
 8006854:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006856:	68bb      	ldr	r3, [r7, #8]
}
 8006858:	4618      	mov	r0, r3
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0301 	and.w	r3, r3, #1
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800689a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800689e:	f023 0307 	bic.w	r3, r3, #7
 80068a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	460b      	mov	r3, r1
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	333c      	adds	r3, #60	@ 0x3c
 80068de:	3304      	adds	r3, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4a26      	ldr	r2, [pc, #152]	@ (8006980 <USB_EP0_OutStart+0xb8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d90a      	bls.n	8006902 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068fc:	d101      	bne.n	8006902 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	e037      	b.n	8006972 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006908:	461a      	mov	r2, r3
 800690a:	2300      	movs	r3, #0
 800690c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800691c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006930:	f043 0318 	orr.w	r3, r3, #24
 8006934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006944:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006948:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10f      	bne.n	8006970 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006956:	461a      	mov	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800696a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800696e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	4f54300a 	.word	0x4f54300a

08006984 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3301      	adds	r3, #1
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	4a13      	ldr	r2, [pc, #76]	@ (80069e4 <USB_CoreReset+0x60>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d901      	bls.n	80069a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e01a      	b.n	80069d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	daf3      	bge.n	8006990 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f043 0201 	orr.w	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3301      	adds	r3, #1
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	4a09      	ldr	r2, [pc, #36]	@ (80069e4 <USB_CoreReset+0x60>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e006      	b.n	80069d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d0f1      	beq.n	80069b8 <USB_CoreReset+0x34>

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	00030d40 	.word	0x00030d40

080069e8 <__NVIC_SystemReset>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80069ec:	f3bf 8f4f 	dsb	sy
}
 80069f0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80069f2:	4b06      	ldr	r3, [pc, #24]	@ (8006a0c <__NVIC_SystemReset+0x24>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80069fa:	4904      	ldr	r1, [pc, #16]	@ (8006a0c <__NVIC_SystemReset+0x24>)
 80069fc:	4b04      	ldr	r3, [pc, #16]	@ (8006a10 <__NVIC_SystemReset+0x28>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a02:	f3bf 8f4f 	dsb	sy
}
 8006a06:	bf00      	nop
    __NOP();
 8006a08:	bf00      	nop
 8006a0a:	e7fd      	b.n	8006a08 <__NVIC_SystemReset+0x20>
 8006a0c:	e000ed00 	.word	0xe000ed00
 8006a10:	05fa0004 	.word	0x05fa0004

08006a14 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8006a20:	f240 401c 	movw	r0, #1052	@ 0x41c
 8006a24:	f002 fc28 	bl	8009278 <USBD_static_malloc>
 8006a28:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d105      	bne.n	8006a3c <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e03f      	b.n	8006abc <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006a52:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2202      	movs	r2, #2
 8006a72:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	4798      	blx	r3
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e000      	b.n	8006abc <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8006ada:	2302      	movs	r3, #2
 8006adc:	e027      	b.n	8006b2e <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ae4:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2202      	movs	r2, #2
 8006afa:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f002 fbb8 	bl	8009294 <USBD_static_free>
  pdev->pClassData = NULL;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b48:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e0d5      	b.n	8006d10 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d03e      	beq.n	8006bee <USBD_DFU_Setup+0xb6>
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	f040 80c5 	bne.w	8006d00 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b06      	cmp	r3, #6
 8006b7c:	d82f      	bhi.n	8006bde <USBD_DFU_Setup+0xa6>
 8006b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b84 <USBD_DFU_Setup+0x4c>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006bd5 	.word	0x08006bd5
 8006b88:	08006ba1 	.word	0x08006ba1
 8006b8c:	08006bab 	.word	0x08006bab
 8006b90:	08006bb5 	.word	0x08006bb5
 8006b94:	08006bbd 	.word	0x08006bbd
 8006b98:	08006bc5 	.word	0x08006bc5
 8006b9c:	08006bcd 	.word	0x08006bcd
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fa6c 	bl	8007080 <DFU_Download>
          break;
 8006ba8:	e020      	b.n	8006bec <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fad3 	bl	8007158 <DFU_Upload>
          break;
 8006bb2:	e01b      	b.n	8006bec <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fba9 	bl	800730c <DFU_GetStatus>
          break;
 8006bba:	e017      	b.n	8006bec <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fc5b 	bl	8007478 <DFU_ClearStatus>
          break;
 8006bc2:	e013      	b.n	8006bec <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fcab 	bl	8007520 <DFU_GetState>
          break;
 8006bca:	e00f      	b.n	8006bec <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fcbf 	bl	8007550 <DFU_Abort>
          break;
 8006bd2:	e00b      	b.n	8006bec <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f9ee 	bl	8006fb8 <DFU_Detach>
          break;
 8006bdc:	e006      	b.n	8006bec <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 fdfb 	bl	80087dc <USBD_CtlError>
          ret = USBD_FAIL;
 8006be6:	2303      	movs	r3, #3
 8006be8:	77fb      	strb	r3, [r7, #31]
          break;
 8006bea:	bf00      	nop
      }
      break;
 8006bec:	e08f      	b.n	8006d0e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	785b      	ldrb	r3, [r3, #1]
 8006bf2:	2b0b      	cmp	r3, #11
 8006bf4:	d87b      	bhi.n	8006cee <USBD_DFU_Setup+0x1b6>
 8006bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bfc <USBD_DFU_Setup+0xc4>)
 8006bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006cfd 	.word	0x08006cfd
 8006c04:	08006cef 	.word	0x08006cef
 8006c08:	08006cef 	.word	0x08006cef
 8006c0c:	08006cef 	.word	0x08006cef
 8006c10:	08006cef 	.word	0x08006cef
 8006c14:	08006c57 	.word	0x08006c57
 8006c18:	08006cef 	.word	0x08006cef
 8006c1c:	08006cef 	.word	0x08006cef
 8006c20:	08006cef 	.word	0x08006cef
 8006c24:	08006c81 	.word	0x08006c81
 8006c28:	08006cad 	.word	0x08006cad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d107      	bne.n	8006c48 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c38:	f107 030e 	add.w	r3, r7, #14
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 fe3c 	bl	80088be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c46:	e05a      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fdc6 	bl	80087dc <USBD_CtlError>
            ret = USBD_FAIL;
 8006c50:	2303      	movs	r3, #3
 8006c52:	77fb      	strb	r3, [r7, #31]
          break;
 8006c54:	e053      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	885b      	ldrh	r3, [r3, #2]
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b21      	cmp	r3, #33	@ 0x21
 8006c60:	d107      	bne.n	8006c72 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8006c62:	4b2d      	ldr	r3, [pc, #180]	@ (8006d18 <USBD_DFU_Setup+0x1e0>)
 8006c64:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	88db      	ldrh	r3, [r3, #6]
 8006c6a:	2b09      	cmp	r3, #9
 8006c6c:	bf28      	it	cs
 8006c6e:	2309      	movcs	r3, #9
 8006c70:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c72:	8afb      	ldrh	r3, [r7, #22]
 8006c74:	461a      	mov	r2, r3
 8006c76:	69b9      	ldr	r1, [r7, #24]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fe20 	bl	80088be <USBD_CtlSendData>
          break;
 8006c7e:	e03e      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d108      	bne.n	8006c9e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c92:	2201      	movs	r2, #1
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fe11 	bl	80088be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c9c:	e02f      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fd9b 	bl	80087dc <USBD_CtlError>
            ret = USBD_FAIL;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	77fb      	strb	r3, [r7, #31]
          break;
 8006caa:	e028      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	885b      	ldrh	r3, [r3, #2]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d114      	bne.n	8006ce0 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d107      	bne.n	8006cd2 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	885b      	ldrh	r3, [r3, #2]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	461a      	mov	r2, r3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cd0:	e015      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fd81 	bl	80087dc <USBD_CtlError>
              ret = USBD_FAIL;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	77fb      	strb	r3, [r7, #31]
          break;
 8006cde:	e00e      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fd7a 	bl	80087dc <USBD_CtlError>
            ret = USBD_FAIL;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	77fb      	strb	r3, [r7, #31]
          break;
 8006cec:	e007      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 fd73 	bl	80087dc <USBD_CtlError>
          ret = USBD_FAIL;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	77fb      	strb	r3, [r7, #31]
          break;
 8006cfa:	e000      	b.n	8006cfe <USBD_DFU_Setup+0x1c6>
          break;
 8006cfc:	bf00      	nop
      }
      break;
 8006cfe:	e006      	b.n	8006d0e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fd6a 	bl	80087dc <USBD_CtlError>
      ret = USBD_FAIL;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	77fb      	strb	r3, [r7, #31]
      break;
 8006d0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3720      	adds	r7, #32
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	2000005a 	.word	0x2000005a

08006d1c <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	221b      	movs	r2, #27
 8006d28:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	@ (8006d38 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000048 	.word	0x20000048

08006d3c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b088      	sub	sp, #32
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d60:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006d68:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e0ce      	b.n	8006f12 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	f040 80bd 	bne.w	8006efa <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d17c      	bne.n	8006e84 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	f000 8093 	beq.w	8006ebc <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	d15e      	bne.n	8006e5e <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b21      	cmp	r3, #33	@ 0x21
 8006da6:	d124      	bne.n	8006df2 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	785b      	ldrb	r3, [r3, #1]
 8006dac:	461a      	mov	r2, r3
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	789b      	ldrb	r3, [r3, #2]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	441a      	add	r2, r3
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	78db      	ldrb	r3, [r3, #3]
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	441a      	add	r2, r3
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	791b      	ldrb	r3, [r3, #4]
 8006de6:	061b      	lsls	r3, r3, #24
 8006de8:	441a      	add	r2, r3
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8006df0:	e064      	b.n	8006ebc <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b41      	cmp	r3, #65	@ 0x41
 8006df8:	d12f      	bne.n	8006e5a <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	789b      	ldrb	r3, [r3, #2]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	441a      	add	r2, r3
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	441a      	add	r2, r3
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	791b      	ldrb	r3, [r3, #4]
 8006e38:	061b      	lsls	r3, r3, #24
 8006e3a:	441a      	add	r2, r3
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d032      	beq.n	8006ebc <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e05b      	b.n	8006f12 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e059      	b.n	8006f12 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8006e72:	2301      	movs	r3, #1
 8006e74:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8006e76:	f107 030c 	add.w	r3, r7, #12
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fcad 	bl	80087dc <USBD_CtlError>
 8006e82:	e01b      	b.n	8006ebc <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d916      	bls.n	8006ebc <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006e94:	3b02      	subs	r3, #2
 8006e96:	029a      	lsls	r2, r3, #10
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006e9e:	4413      	add	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	69f8      	ldr	r0, [r7, #28]
 8006ea8:	6979      	ldr	r1, [r7, #20]
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8006eb0:	4798      	blx	r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e02a      	b.n	8006f12 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	2203      	movs	r2, #3
 8006ed0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8006ef8:	e00a      	b.n	8006f10 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8006f00:	2b07      	cmp	r3, #7
 8006f02:	d103      	bne.n	8006f0c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fb75 	bl	80075f4 <DFU_Leave>
 8006f0a:	e001      	b.n	8006f10 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e000      	b.n	8006f12 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	220a      	movs	r2, #10
 8006f3c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8006f3e:	4b03      	ldr	r3, [pc, #12]	@ (8006f4c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	20000064 	.word	0x20000064

08006f50 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006f64:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8006f66:	7afb      	ldrb	r3, [r7, #11]
 8006f68:	2b06      	cmp	r3, #6
 8006f6a:	d808      	bhi.n	8006f7e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4905      	ldr	r1, [pc, #20]	@ (8006f88 <USBD_DFU_GetUsrStringDesc+0x38>)
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fc42 	bl	80087fe <USBD_GetString>
    return USBD_StrDesc;
 8006f7a:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <USBD_DFU_GetUsrStringDesc+0x38>)
 8006f7c:	e000      	b.n	8006f80 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8006f7e:	2300      	movs	r3, #0
  }
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200002b4 	.word	0x200002b4

08006f8c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e004      	b.n	8006faa <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006fc8:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d051      	beq.n	8007074 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d013      	beq.n	8007002 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d00e      	beq.n	8007002 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	d009      	beq.n	8007002 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006ff4:	2b06      	cmp	r3, #6
 8006ff6:	d004      	beq.n	8007002 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	d125      	bne.n	800704e <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2202      	movs	r2, #2
 8007006:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800704e:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <DFU_Detach+0xc4>)
 8007050:	7d5b      	ldrb	r3, [r3, #21]
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2b00      	cmp	r3, #0
 8007058:	d006      	beq.n	8007068 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb7b 	bl	8007756 <USBD_Stop>
    (void)USBD_Start(pdev);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fb6c 	bl	800773e <USBD_Start>
 8007066:	e006      	b.n	8007076 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	4618      	mov	r0, r3
 800706e:	f7f9 ffff 	bl	8001070 <HAL_Delay>
 8007072:	e000      	b.n	8007076 <DFU_Detach+0xbe>
    return;
 8007074:	bf00      	nop
  }
}
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000048 	.word	0x20000048

08007080 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007090:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d05b      	beq.n	8007150 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	88db      	ldrh	r3, [r3, #6]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d02d      	beq.n	80070fc <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d004      	beq.n	80070b4 <DFU_Download+0x34>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80070b0:	2b05      	cmp	r3, #5
 80070b2:	d11e      	bne.n	80070f2 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	885b      	ldrh	r3, [r3, #2]
 80070b8:	461a      	mov	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	88db      	ldrh	r3, [r3, #6]
 80070c4:	461a      	mov	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2203      	movs	r2, #3
 80070d0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80070e8:	461a      	mov	r2, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fc13 	bl	8008916 <USBD_CtlPrepareRx>
 80070f0:	e02f      	b.n	8007152 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f001 fb71 	bl	80087dc <USBD_CtlError>
 80070fa:	e02a      	b.n	8007152 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007102:	2b05      	cmp	r3, #5
 8007104:	d004      	beq.n	8007110 <DFU_Download+0x90>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800710c:	2b02      	cmp	r3, #2
 800710e:	d11a      	bne.n	8007146 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2206      	movs	r2, #6
 800711c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007144:	e005      	b.n	8007152 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fb47 	bl	80087dc <USBD_CtlError>
 800714e:	e000      	b.n	8007152 <DFU_Download+0xd2>
    return;
 8007150:	bf00      	nop
    }
  }
}
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007168:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007170:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80c4 	beq.w	8007302 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	88db      	ldrh	r3, [r3, #6]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80a8 	beq.w	80072d4 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800718a:	2b02      	cmp	r3, #2
 800718c:	d005      	beq.n	800719a <DFU_Upload+0x42>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007194:	2b09      	cmp	r3, #9
 8007196:	f040 8090 	bne.w	80072ba <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	885b      	ldrh	r3, [r3, #2]
 800719e:	461a      	mov	r2, r3
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88db      	ldrh	r3, [r3, #6]
 80071aa:	461a      	mov	r2, r3
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d12c      	bne.n	8007216 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d901      	bls.n	80071ca <DFU_Upload+0x72>
 80071c6:	2202      	movs	r2, #2
 80071c8:	e000      	b.n	80071cc <DFU_Upload+0x74>
 80071ca:	2209      	movs	r2, #9
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2221      	movs	r2, #33	@ 0x21
 8007200:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2241      	movs	r2, #65	@ 0x41
 8007206:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2203      	movs	r2, #3
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fb55 	bl	80088be <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007214:	e076      	b.n	8007304 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800721c:	2b01      	cmp	r3, #1
 800721e:	d931      	bls.n	8007284 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2209      	movs	r2, #9
 8007224:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007252:	3b02      	subs	r3, #2
 8007254:	029a      	lsls	r2, r3, #10
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800725c:	4413      	add	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	6979      	ldr	r1, [r7, #20]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 800726e:	4798      	blx	r3
 8007270:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007278:	461a      	mov	r2, r3
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 fb1e 	bl	80088be <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007282:	e03f      	b.n	8007304 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	220f      	movs	r2, #15
 8007288:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fa92 	bl	80087dc <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80072b8:	e024      	b.n	8007304 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fa85 	bl	80087dc <USBD_CtlError>
 80072d2:	e017      	b.n	8007304 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2202      	movs	r2, #2
 80072d8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007300:	e000      	b.n	8007304 <DFU_Upload+0x1ac>
    return;
 8007302:	bf00      	nop
  }
}
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800731a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007322:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 80a0 	beq.w	800746c <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007332:	2b03      	cmp	r3, #3
 8007334:	d002      	beq.n	800733c <DFU_GetStatus+0x30>
 8007336:	2b06      	cmp	r3, #6
 8007338:	d051      	beq.n	80073de <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 800733a:	e08e      	b.n	800745a <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007342:	2b00      	cmp	r3, #0
 8007344:	d034      	beq.n	80073b0 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2204      	movs	r2, #4
 800734a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10e      	bne.n	800739a <DFU_GetStatus+0x8e>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b41      	cmp	r3, #65	@ 0x41
 8007382:	d10a      	bne.n	800739a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8007394:	2100      	movs	r1, #0
 8007396:	4798      	blx	r3
      break;
 8007398:	e05f      	b.n	800745a <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 80073aa:	2101      	movs	r1, #1
 80073ac:	4798      	blx	r3
      break;
 80073ae:	e054      	b.n	800745a <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2205      	movs	r2, #5
 80073b4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80073dc:	e03d      	b.n	800745a <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d116      	bne.n	8007416 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2207      	movs	r2, #7
 80073ec:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8007414:	e020      	b.n	8007458 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800741c:	2b00      	cmp	r3, #0
 800741e:	d11b      	bne.n	8007458 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8007420:	4b14      	ldr	r3, [pc, #80]	@ (8007474 <DFU_GetStatus+0x168>)
 8007422:	7d1b      	ldrb	r3, [r3, #20]
 8007424:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8007428:	2b00      	cmp	r3, #0
 800742a:	d015      	beq.n	8007458 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8007458:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8007460:	2206      	movs	r2, #6
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 fa2a 	bl	80088be <USBD_CtlSendData>
 800746a:	e000      	b.n	800746e <DFU_GetStatus+0x162>
    return;
 800746c:	bf00      	nop
}
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000048 	.word	0x20000048

08007478 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007486:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d042      	beq.n	8007514 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007494:	2b0a      	cmp	r3, #10
 8007496:	d11e      	bne.n	80074d6 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 80074d4:	e01f      	b.n	8007516 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	220a      	movs	r2, #10
 80074da:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	220e      	movs	r2, #14
 80074e2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8007512:	e000      	b.n	8007516 <DFU_ClearStatus+0x9e>
    return;
 8007514:	bf00      	nop
  }
}
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800752e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800753c:	2201      	movs	r2, #1
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 f9bc 	bl	80088be <USBD_CtlSendData>
 8007546:	e000      	b.n	800754a <DFU_GetState+0x2a>
    return;
 8007548:	bf00      	nop
}
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800755e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d03f      	beq.n	80075e6 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800756c:	2b02      	cmp	r3, #2
 800756e:	d013      	beq.n	8007598 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007576:	2b03      	cmp	r3, #3
 8007578:	d00e      	beq.n	8007598 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007580:	2b05      	cmp	r3, #5
 8007582:	d009      	beq.n	8007598 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800758a:	2b06      	cmp	r3, #6
 800758c:	d004      	beq.n	8007598 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007594:	2b09      	cmp	r3, #9
 8007596:	d127      	bne.n	80075e8 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80075e4:	e000      	b.n	80075e8 <DFU_Abort+0x98>
    return;
 80075e6:	bf00      	nop
  }
}
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007602:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d03b      	beq.n	8007682 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8007612:	4b1e      	ldr	r3, [pc, #120]	@ (800768c <DFU_Leave+0x98>)
 8007614:	7d1b      	ldrb	r3, [r3, #20]
 8007616:	f003 0304 	and.w	r3, r3, #4
 800761a:	2b00      	cmp	r3, #0
 800761c:	d016      	beq.n	800764c <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2206      	movs	r2, #6
 8007622:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 800764a:	e01b      	b.n	8007684 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2208      	movs	r2, #8
 8007650:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f86c 	bl	8007756 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800767e:	f7ff f9b3 	bl	80069e8 <__NVIC_SystemReset>
    return;
 8007682:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000048 	.word	0x20000048

08007690 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e01f      	b.n	80076e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	79fa      	ldrb	r2, [r7, #7]
 80076da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f001 fc53 	bl	8008f88 <USBD_LL_Init>
 80076e2:	4603      	mov	r3, r0
 80076e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007704:	2303      	movs	r3, #3
 8007706:	e016      	b.n	8007736 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	f107 020e 	add.w	r2, r7, #14
 8007728:	4610      	mov	r0, r2
 800772a:	4798      	blx	r3
 800772c:	4602      	mov	r2, r0
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fc6e 	bl	8009028 <USBD_LL_Start>
 800774c:	4603      	mov	r3, r0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fc7d 	bl	800905e <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6852      	ldr	r2, [r2, #4]
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	4611      	mov	r1, r2
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
  }

  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	460b      	mov	r3, r1
 80077ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077ae:	2303      	movs	r3, #3
 80077b0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	4611      	mov	r1, r2
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	4798      	blx	r3
 80077cc:	4603      	mov	r3, r0
 80077ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}

080077da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
 80077e2:	460b      	mov	r3, r1
 80077e4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	4611      	mov	r1, r2
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
  }

  return USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 ffa3 	bl	8008768 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007830:	461a      	mov	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	2b02      	cmp	r3, #2
 8007844:	d01a      	beq.n	800787c <USBD_LL_SetupStage+0x72>
 8007846:	2b02      	cmp	r3, #2
 8007848:	d822      	bhi.n	8007890 <USBD_LL_SetupStage+0x86>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <USBD_LL_SetupStage+0x4a>
 800784e:	2b01      	cmp	r3, #1
 8007850:	d00a      	beq.n	8007868 <USBD_LL_SetupStage+0x5e>
 8007852:	e01d      	b.n	8007890 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa63 	bl	8007d28 <USBD_StdDevReq>
 8007862:	4603      	mov	r3, r0
 8007864:	73fb      	strb	r3, [r7, #15]
      break;
 8007866:	e020      	b.n	80078aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fac7 	bl	8007e04 <USBD_StdItfReq>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
      break;
 800787a:	e016      	b.n	80078aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb06 	bl	8007e96 <USBD_StdEPReq>
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]
      break;
 800788e:	e00c      	b.n	80078aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007896:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800789a:	b2db      	uxtb	r3, r3
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fc1e 	bl	80090e0 <USBD_LL_StallEP>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]
      break;
 80078a8:	bf00      	nop
  }

  return ret;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	460b      	mov	r3, r1
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d138      	bne.n	800793a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80078ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d14a      	bne.n	8007970 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d913      	bls.n	800790e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	689a      	ldr	r2, [r3, #8]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	1ad2      	subs	r2, r2, r3
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	bf28      	it	cs
 8007900:	4613      	movcs	r3, r2
 8007902:	461a      	mov	r2, r3
 8007904:	6879      	ldr	r1, [r7, #4]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f001 f822 	bl	8008950 <USBD_CtlContinueRx>
 800790c:	e030      	b.n	8007970 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b03      	cmp	r3, #3
 8007918:	d10b      	bne.n	8007932 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f001 f81d 	bl	8008972 <USBD_CtlSendStatus>
 8007938:	e01a      	b.n	8007970 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b03      	cmp	r3, #3
 8007944:	d114      	bne.n	8007970 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00e      	beq.n	8007970 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	7afa      	ldrb	r2, [r7, #11]
 800795c:	4611      	mov	r1, r2
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	4798      	blx	r3
 8007962:	4603      	mov	r3, r0
 8007964:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
 800796e:	e000      	b.n	8007972 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b086      	sub	sp, #24
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	460b      	mov	r3, r1
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007988:	7afb      	ldrb	r3, [r7, #11]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d16b      	bne.n	8007a66 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3314      	adds	r3, #20
 8007992:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800799a:	2b02      	cmp	r3, #2
 800799c:	d156      	bne.n	8007a4c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d914      	bls.n	80079d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	461a      	mov	r2, r3
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 ff97 	bl	80088f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079c6:	2300      	movs	r3, #0
 80079c8:	2200      	movs	r2, #0
 80079ca:	2100      	movs	r1, #0
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f001 fc31 	bl	8009234 <USBD_LL_PrepareReceive>
 80079d2:	e03b      	b.n	8007a4c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d11c      	bne.n	8007a1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d316      	bcc.n	8007a1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d20f      	bcs.n	8007a1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079fa:	2200      	movs	r2, #0
 80079fc:	2100      	movs	r1, #0
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 ff78 	bl	80088f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2100      	movs	r1, #0
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f001 fc0e 	bl	8009234 <USBD_LL_PrepareReceive>
 8007a18:	e018      	b.n	8007a4c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d10b      	bne.n	8007a3e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a3e:	2180      	movs	r1, #128	@ 0x80
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 fb4d 	bl	80090e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 ffa6 	bl	8008998 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d122      	bne.n	8007a9c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fe98 	bl	800778c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007a64:	e01a      	b.n	8007a9c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d114      	bne.n	8007a9c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00e      	beq.n	8007a9c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	7afa      	ldrb	r2, [r7, #11]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	4798      	blx	r3
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	e000      	b.n	8007a9e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e02f      	b.n	8007b3a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00f      	beq.n	8007b04 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d009      	beq.n	8007b04 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6852      	ldr	r2, [r2, #4]
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	4611      	mov	r1, r2
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b04:	2340      	movs	r3, #64	@ 0x40
 8007b06:	2200      	movs	r2, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fac2 	bl	8009094 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2240      	movs	r2, #64	@ 0x40
 8007b1c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b20:	2340      	movs	r3, #64	@ 0x40
 8007b22:	2200      	movs	r2, #0
 8007b24:	2180      	movs	r1, #128	@ 0x80
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 fab4 	bl	8009094 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2240      	movs	r2, #64	@ 0x40
 8007b36:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b083      	sub	sp, #12
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d106      	bne.n	8007bb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e012      	b.n	8007bfa <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d10b      	bne.n	8007bf8 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e014      	b.n	8007c46 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d10d      	bne.n	8007c44 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e014      	b.n	8007c92 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d10d      	bne.n	8007c90 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6852      	ldr	r2, [r2, #4]
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	4611      	mov	r1, r2
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	4798      	blx	r3
  }

  return USBD_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	b21a      	sxth	r2, r3
 8007d0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	b21b      	sxth	r3, r3
 8007d16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d18:	89fb      	ldrh	r3, [r7, #14]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d3e:	2b40      	cmp	r3, #64	@ 0x40
 8007d40:	d005      	beq.n	8007d4e <USBD_StdDevReq+0x26>
 8007d42:	2b40      	cmp	r3, #64	@ 0x40
 8007d44:	d853      	bhi.n	8007dee <USBD_StdDevReq+0xc6>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00b      	beq.n	8007d62 <USBD_StdDevReq+0x3a>
 8007d4a:	2b20      	cmp	r3, #32
 8007d4c:	d14f      	bne.n	8007dee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d60:	e04a      	b.n	8007df8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b09      	cmp	r3, #9
 8007d68:	d83b      	bhi.n	8007de2 <USBD_StdDevReq+0xba>
 8007d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <USBD_StdDevReq+0x48>)
 8007d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d70:	08007dc5 	.word	0x08007dc5
 8007d74:	08007dd9 	.word	0x08007dd9
 8007d78:	08007de3 	.word	0x08007de3
 8007d7c:	08007dcf 	.word	0x08007dcf
 8007d80:	08007de3 	.word	0x08007de3
 8007d84:	08007da3 	.word	0x08007da3
 8007d88:	08007d99 	.word	0x08007d99
 8007d8c:	08007de3 	.word	0x08007de3
 8007d90:	08007dbb 	.word	0x08007dbb
 8007d94:	08007dad 	.word	0x08007dad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f9de 	bl	800815c <USBD_GetDescriptor>
          break;
 8007da0:	e024      	b.n	8007dec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fb55 	bl	8008454 <USBD_SetAddress>
          break;
 8007daa:	e01f      	b.n	8007dec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fb94 	bl	80084dc <USBD_SetConfig>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
          break;
 8007db8:	e018      	b.n	8007dec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc33 	bl	8008628 <USBD_GetConfig>
          break;
 8007dc2:	e013      	b.n	8007dec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fc64 	bl	8008694 <USBD_GetStatus>
          break;
 8007dcc:	e00e      	b.n	8007dec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc93 	bl	80086fc <USBD_SetFeature>
          break;
 8007dd6:	e009      	b.n	8007dec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fca2 	bl	8008724 <USBD_ClrFeature>
          break;
 8007de0:	e004      	b.n	8007dec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fcf9 	bl	80087dc <USBD_CtlError>
          break;
 8007dea:	bf00      	nop
      }
      break;
 8007dec:	e004      	b.n	8007df8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fcf3 	bl	80087dc <USBD_CtlError>
      break;
 8007df6:	bf00      	nop
  }

  return ret;
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop

08007e04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e1a:	2b40      	cmp	r3, #64	@ 0x40
 8007e1c:	d005      	beq.n	8007e2a <USBD_StdItfReq+0x26>
 8007e1e:	2b40      	cmp	r3, #64	@ 0x40
 8007e20:	d82f      	bhi.n	8007e82 <USBD_StdItfReq+0x7e>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <USBD_StdItfReq+0x26>
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d12b      	bne.n	8007e82 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d81d      	bhi.n	8007e74 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	889b      	ldrh	r3, [r3, #4]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d813      	bhi.n	8007e6a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	88db      	ldrh	r3, [r3, #6]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d110      	bne.n	8007e7e <USBD_StdItfReq+0x7a>
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10d      	bne.n	8007e7e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fd85 	bl	8008972 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e68:	e009      	b.n	8007e7e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fcb5 	bl	80087dc <USBD_CtlError>
          break;
 8007e72:	e004      	b.n	8007e7e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fcb0 	bl	80087dc <USBD_CtlError>
          break;
 8007e7c:	e000      	b.n	8007e80 <USBD_StdItfReq+0x7c>
          break;
 8007e7e:	bf00      	nop
      }
      break;
 8007e80:	e004      	b.n	8007e8c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fca9 	bl	80087dc <USBD_CtlError>
      break;
 8007e8a:	bf00      	nop
  }

  return ret;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	889b      	ldrh	r3, [r3, #4]
 8007ea8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007eb2:	2b40      	cmp	r3, #64	@ 0x40
 8007eb4:	d007      	beq.n	8007ec6 <USBD_StdEPReq+0x30>
 8007eb6:	2b40      	cmp	r3, #64	@ 0x40
 8007eb8:	f200 8145 	bhi.w	8008146 <USBD_StdEPReq+0x2b0>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00c      	beq.n	8007eda <USBD_StdEPReq+0x44>
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	f040 8140 	bne.w	8008146 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed8:	e13a      	b.n	8008150 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d007      	beq.n	8007ef2 <USBD_StdEPReq+0x5c>
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	f300 8129 	bgt.w	800813a <USBD_StdEPReq+0x2a4>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d07f      	beq.n	8007fec <USBD_StdEPReq+0x156>
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d03c      	beq.n	8007f6a <USBD_StdEPReq+0xd4>
 8007ef0:	e123      	b.n	800813a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d002      	beq.n	8007f04 <USBD_StdEPReq+0x6e>
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d016      	beq.n	8007f30 <USBD_StdEPReq+0x9a>
 8007f02:	e02c      	b.n	8007f5e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00d      	beq.n	8007f26 <USBD_StdEPReq+0x90>
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b80      	cmp	r3, #128	@ 0x80
 8007f0e:	d00a      	beq.n	8007f26 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 f8e3 	bl	80090e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f1a:	2180      	movs	r1, #128	@ 0x80
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f8df 	bl	80090e0 <USBD_LL_StallEP>
 8007f22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f24:	e020      	b.n	8007f68 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fc57 	bl	80087dc <USBD_CtlError>
              break;
 8007f2e:	e01b      	b.n	8007f68 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	885b      	ldrh	r3, [r3, #2]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10e      	bne.n	8007f56 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <USBD_StdEPReq+0xc0>
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	2b80      	cmp	r3, #128	@ 0x80
 8007f42:	d008      	beq.n	8007f56 <USBD_StdEPReq+0xc0>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	88db      	ldrh	r3, [r3, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f8c5 	bl	80090e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fd0b 	bl	8008972 <USBD_CtlSendStatus>

              break;
 8007f5c:	e004      	b.n	8007f68 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fc3b 	bl	80087dc <USBD_CtlError>
              break;
 8007f66:	bf00      	nop
          }
          break;
 8007f68:	e0ec      	b.n	8008144 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d002      	beq.n	8007f7c <USBD_StdEPReq+0xe6>
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d016      	beq.n	8007fa8 <USBD_StdEPReq+0x112>
 8007f7a:	e030      	b.n	8007fde <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00d      	beq.n	8007f9e <USBD_StdEPReq+0x108>
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b80      	cmp	r3, #128	@ 0x80
 8007f86:	d00a      	beq.n	8007f9e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f8a7 	bl	80090e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f92:	2180      	movs	r1, #128	@ 0x80
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 f8a3 	bl	80090e0 <USBD_LL_StallEP>
 8007f9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f9c:	e025      	b.n	8007fea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc1b 	bl	80087dc <USBD_CtlError>
              break;
 8007fa6:	e020      	b.n	8007fea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	885b      	ldrh	r3, [r3, #2]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11b      	bne.n	8007fe8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d004      	beq.n	8007fc4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 f8ad 	bl	800911e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fcd4 	bl	8008972 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	4798      	blx	r3
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fbfb 	bl	80087dc <USBD_CtlError>
              break;
 8007fe6:	e000      	b.n	8007fea <USBD_StdEPReq+0x154>
              break;
 8007fe8:	bf00      	nop
          }
          break;
 8007fea:	e0ab      	b.n	8008144 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d002      	beq.n	8007ffe <USBD_StdEPReq+0x168>
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d032      	beq.n	8008062 <USBD_StdEPReq+0x1cc>
 8007ffc:	e097      	b.n	800812e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <USBD_StdEPReq+0x17e>
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b80      	cmp	r3, #128	@ 0x80
 8008008:	d004      	beq.n	8008014 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fbe5 	bl	80087dc <USBD_CtlError>
                break;
 8008012:	e091      	b.n	8008138 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008018:	2b00      	cmp	r3, #0
 800801a:	da0b      	bge.n	8008034 <USBD_StdEPReq+0x19e>
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	3310      	adds	r3, #16
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	4413      	add	r3, r2
 8008030:	3304      	adds	r3, #4
 8008032:	e00b      	b.n	800804c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	4413      	add	r3, r2
 800804a:	3304      	adds	r3, #4
 800804c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2202      	movs	r2, #2
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fc2f 	bl	80088be <USBD_CtlSendData>
              break;
 8008060:	e06a      	b.n	8008138 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008066:	2b00      	cmp	r3, #0
 8008068:	da11      	bge.n	800808e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800806a:	7bbb      	ldrb	r3, [r7, #14]
 800806c:	f003 020f 	and.w	r2, r3, #15
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	3324      	adds	r3, #36	@ 0x24
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d117      	bne.n	80080b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fba8 	bl	80087dc <USBD_CtlError>
                  break;
 800808c:	e054      	b.n	8008138 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	f003 020f 	and.w	r2, r3, #15
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d104      	bne.n	80080b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fb95 	bl	80087dc <USBD_CtlError>
                  break;
 80080b2:	e041      	b.n	8008138 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	da0b      	bge.n	80080d4 <USBD_StdEPReq+0x23e>
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	3310      	adds	r3, #16
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	3304      	adds	r3, #4
 80080d2:	e00b      	b.n	80080ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080da:	4613      	mov	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	4413      	add	r3, r2
 80080ea:	3304      	adds	r3, #4
 80080ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <USBD_StdEPReq+0x264>
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b80      	cmp	r3, #128	@ 0x80
 80080f8:	d103      	bne.n	8008102 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	e00e      	b.n	8008120 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 f828 	bl	800915c <USBD_LL_IsStallEP>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2201      	movs	r2, #1
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e002      	b.n	8008120 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	2202      	movs	r2, #2
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fbc9 	bl	80088be <USBD_CtlSendData>
              break;
 800812c:	e004      	b.n	8008138 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fb53 	bl	80087dc <USBD_CtlError>
              break;
 8008136:	bf00      	nop
          }
          break;
 8008138:	e004      	b.n	8008144 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fb4d 	bl	80087dc <USBD_CtlError>
          break;
 8008142:	bf00      	nop
      }
      break;
 8008144:	e004      	b.n	8008150 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fb47 	bl	80087dc <USBD_CtlError>
      break;
 800814e:	bf00      	nop
  }

  return ret;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	b29b      	uxth	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	2b06      	cmp	r3, #6
 800817e:	f200 813b 	bhi.w	80083f8 <USBD_GetDescriptor+0x29c>
 8008182:	a201      	add	r2, pc, #4	@ (adr r2, 8008188 <USBD_GetDescriptor+0x2c>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081a5 	.word	0x080081a5
 800818c:	080081bd 	.word	0x080081bd
 8008190:	080081fd 	.word	0x080081fd
 8008194:	080083f9 	.word	0x080083f9
 8008198:	080083f9 	.word	0x080083f9
 800819c:	08008399 	.word	0x08008399
 80081a0:	080083c5 	.word	0x080083c5
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	7c12      	ldrb	r2, [r2, #16]
 80081b0:	f107 0108 	add.w	r1, r7, #8
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
 80081b8:	60f8      	str	r0, [r7, #12]
      break;
 80081ba:	e125      	b.n	8008408 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	7c1b      	ldrb	r3, [r3, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10d      	bne.n	80081e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081cc:	f107 0208 	add.w	r2, r7, #8
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	2202      	movs	r2, #2
 80081dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081de:	e113      	b.n	8008408 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e8:	f107 0208 	add.w	r2, r7, #8
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	2202      	movs	r2, #2
 80081f8:	701a      	strb	r2, [r3, #0]
      break;
 80081fa:	e105      	b.n	8008408 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	885b      	ldrh	r3, [r3, #2]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b05      	cmp	r3, #5
 8008204:	f200 80ac 	bhi.w	8008360 <USBD_GetDescriptor+0x204>
 8008208:	a201      	add	r2, pc, #4	@ (adr r2, 8008210 <USBD_GetDescriptor+0xb4>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	08008229 	.word	0x08008229
 8008214:	0800825d 	.word	0x0800825d
 8008218:	08008291 	.word	0x08008291
 800821c:	080082c5 	.word	0x080082c5
 8008220:	080082f9 	.word	0x080082f9
 8008224:	0800832d 	.word	0x0800832d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	7c12      	ldrb	r2, [r2, #16]
 8008240:	f107 0108 	add.w	r1, r7, #8
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
 8008248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800824a:	e0a4      	b.n	8008396 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fac4 	bl	80087dc <USBD_CtlError>
            err++;
 8008254:	7afb      	ldrb	r3, [r7, #11]
 8008256:	3301      	adds	r3, #1
 8008258:	72fb      	strb	r3, [r7, #11]
          break;
 800825a:	e09c      	b.n	8008396 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	7c12      	ldrb	r2, [r2, #16]
 8008274:	f107 0108 	add.w	r1, r7, #8
 8008278:	4610      	mov	r0, r2
 800827a:	4798      	blx	r3
 800827c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827e:	e08a      	b.n	8008396 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 faaa 	bl	80087dc <USBD_CtlError>
            err++;
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	3301      	adds	r3, #1
 800828c:	72fb      	strb	r3, [r7, #11]
          break;
 800828e:	e082      	b.n	8008396 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	7c12      	ldrb	r2, [r2, #16]
 80082a8:	f107 0108 	add.w	r1, r7, #8
 80082ac:	4610      	mov	r0, r2
 80082ae:	4798      	blx	r3
 80082b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082b2:	e070      	b.n	8008396 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa90 	bl	80087dc <USBD_CtlError>
            err++;
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	3301      	adds	r3, #1
 80082c0:	72fb      	strb	r3, [r7, #11]
          break;
 80082c2:	e068      	b.n	8008396 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	7c12      	ldrb	r2, [r2, #16]
 80082dc:	f107 0108 	add.w	r1, r7, #8
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
 80082e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e6:	e056      	b.n	8008396 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa76 	bl	80087dc <USBD_CtlError>
            err++;
 80082f0:	7afb      	ldrb	r3, [r7, #11]
 80082f2:	3301      	adds	r3, #1
 80082f4:	72fb      	strb	r3, [r7, #11]
          break;
 80082f6:	e04e      	b.n	8008396 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7c12      	ldrb	r2, [r2, #16]
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831a:	e03c      	b.n	8008396 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa5c 	bl	80087dc <USBD_CtlError>
            err++;
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	3301      	adds	r3, #1
 8008328:	72fb      	strb	r3, [r7, #11]
          break;
 800832a:	e034      	b.n	8008396 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834e:	e022      	b.n	8008396 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa42 	bl	80087dc <USBD_CtlError>
            err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
          break;
 800835e:	e01a      	b.n	8008396 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00c      	beq.n	8008386 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008374:	683a      	ldr	r2, [r7, #0]
 8008376:	8852      	ldrh	r2, [r2, #2]
 8008378:	b2d1      	uxtb	r1, r2
 800837a:	f107 0208 	add.w	r2, r7, #8
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
 8008382:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8008384:	e006      	b.n	8008394 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa27 	bl	80087dc <USBD_CtlError>
            err++;
 800838e:	7afb      	ldrb	r3, [r7, #11]
 8008390:	3301      	adds	r3, #1
 8008392:	72fb      	strb	r3, [r7, #11]
          break;
 8008394:	bf00      	nop
      }
      break;
 8008396:	e037      	b.n	8008408 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7c1b      	ldrb	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a8:	f107 0208 	add.w	r2, r7, #8
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
 80083b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083b2:	e029      	b.n	8008408 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa10 	bl	80087dc <USBD_CtlError>
        err++;
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	3301      	adds	r3, #1
 80083c0:	72fb      	strb	r3, [r7, #11]
      break;
 80083c2:	e021      	b.n	8008408 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	7c1b      	ldrb	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10d      	bne.n	80083e8 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d4:	f107 0208 	add.w	r2, r7, #8
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
 80083dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	2207      	movs	r2, #7
 80083e4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083e6:	e00f      	b.n	8008408 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9f6 	bl	80087dc <USBD_CtlError>
        err++;
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	3301      	adds	r3, #1
 80083f4:	72fb      	strb	r3, [r7, #11]
      break;
 80083f6:	e007      	b.n	8008408 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9ee 	bl	80087dc <USBD_CtlError>
      err++;
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	3301      	adds	r3, #1
 8008404:	72fb      	strb	r3, [r7, #11]
      break;
 8008406:	bf00      	nop
  }

  if (err != 0U)
 8008408:	7afb      	ldrb	r3, [r7, #11]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d11e      	bne.n	800844c <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	88db      	ldrh	r3, [r3, #6]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d016      	beq.n	8008444 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8008416:	893b      	ldrh	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00e      	beq.n	800843a <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	88da      	ldrh	r2, [r3, #6]
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	4293      	cmp	r3, r2
 8008424:	bf28      	it	cs
 8008426:	4613      	movcs	r3, r2
 8008428:	b29b      	uxth	r3, r3
 800842a:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800842c:	893b      	ldrh	r3, [r7, #8]
 800842e:	461a      	mov	r2, r3
 8008430:	68f9      	ldr	r1, [r7, #12]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa43 	bl	80088be <USBD_CtlSendData>
 8008438:	e009      	b.n	800844e <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f9cd 	bl	80087dc <USBD_CtlError>
 8008442:	e004      	b.n	800844e <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fa94 	bl	8008972 <USBD_CtlSendStatus>
 800844a:	e000      	b.n	800844e <USBD_GetDescriptor+0x2f2>
    return;
 800844c:	bf00      	nop
  }
}
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	889b      	ldrh	r3, [r3, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d131      	bne.n	80084ca <USBD_SetAddress+0x76>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	88db      	ldrh	r3, [r3, #6]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d12d      	bne.n	80084ca <USBD_SetAddress+0x76>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	885b      	ldrh	r3, [r3, #2]
 8008472:	2b7f      	cmp	r3, #127	@ 0x7f
 8008474:	d829      	bhi.n	80084ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	885b      	ldrh	r3, [r3, #2]
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008480:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b03      	cmp	r3, #3
 800848c:	d104      	bne.n	8008498 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f9a3 	bl	80087dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008496:	e01d      	b.n	80084d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	7bfa      	ldrb	r2, [r7, #15]
 800849c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fe85 	bl	80091b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa61 	bl	8008972 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084be:	e009      	b.n	80084d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c8:	e004      	b.n	80084d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f985 	bl	80087dc <USBD_CtlError>
  }
}
 80084d2:	bf00      	nop
 80084d4:	bf00      	nop
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	4b4c      	ldr	r3, [pc, #304]	@ (8008624 <USBD_SetConfig+0x148>)
 80084f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f4:	4b4b      	ldr	r3, [pc, #300]	@ (8008624 <USBD_SetConfig+0x148>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d905      	bls.n	8008508 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f96c 	bl	80087dc <USBD_CtlError>
    return USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	e088      	b.n	800861a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d002      	beq.n	800851a <USBD_SetConfig+0x3e>
 8008514:	2b03      	cmp	r3, #3
 8008516:	d025      	beq.n	8008564 <USBD_SetConfig+0x88>
 8008518:	e071      	b.n	80085fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800851a:	4b42      	ldr	r3, [pc, #264]	@ (8008624 <USBD_SetConfig+0x148>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01c      	beq.n	800855c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008522:	4b40      	ldr	r3, [pc, #256]	@ (8008624 <USBD_SetConfig+0x148>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800852c:	4b3d      	ldr	r3, [pc, #244]	@ (8008624 <USBD_SetConfig+0x148>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff f935 	bl	80077a2 <USBD_SetClassConfig>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f949 	bl	80087dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800854a:	e065      	b.n	8008618 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa10 	bl	8008972 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2203      	movs	r2, #3
 8008556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800855a:	e05d      	b.n	8008618 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fa08 	bl	8008972 <USBD_CtlSendStatus>
      break;
 8008562:	e059      	b.n	8008618 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008564:	4b2f      	ldr	r3, [pc, #188]	@ (8008624 <USBD_SetConfig+0x148>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d112      	bne.n	8008592 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008574:	4b2b      	ldr	r3, [pc, #172]	@ (8008624 <USBD_SetConfig+0x148>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800857e:	4b29      	ldr	r3, [pc, #164]	@ (8008624 <USBD_SetConfig+0x148>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff f928 	bl	80077da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f9f1 	bl	8008972 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008590:	e042      	b.n	8008618 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008592:	4b24      	ldr	r3, [pc, #144]	@ (8008624 <USBD_SetConfig+0x148>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	429a      	cmp	r2, r3
 800859e:	d02a      	beq.n	80085f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff f916 	bl	80077da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008624 <USBD_SetConfig+0x148>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008624 <USBD_SetConfig+0x148>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	4619      	mov	r1, r3
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff f8ef 	bl	80077a2 <USBD_SetClassConfig>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00f      	beq.n	80085ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f903 	bl	80087dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff f8fb 	bl	80077da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80085ec:	e014      	b.n	8008618 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f9bf 	bl	8008972 <USBD_CtlSendStatus>
      break;
 80085f4:	e010      	b.n	8008618 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f9bb 	bl	8008972 <USBD_CtlSendStatus>
      break;
 80085fc:	e00c      	b.n	8008618 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f8eb 	bl	80087dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008606:	4b07      	ldr	r3, [pc, #28]	@ (8008624 <USBD_SetConfig+0x148>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff f8e4 	bl	80077da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008612:	2303      	movs	r3, #3
 8008614:	73fb      	strb	r3, [r7, #15]
      break;
 8008616:	bf00      	nop
  }

  return ret;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	200003b3 	.word	0x200003b3

08008628 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	88db      	ldrh	r3, [r3, #6]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d004      	beq.n	8008644 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f8cd 	bl	80087dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008642:	e023      	b.n	800868c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	dc02      	bgt.n	8008656 <USBD_GetConfig+0x2e>
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc03      	bgt.n	800865c <USBD_GetConfig+0x34>
 8008654:	e015      	b.n	8008682 <USBD_GetConfig+0x5a>
 8008656:	2b03      	cmp	r3, #3
 8008658:	d00b      	beq.n	8008672 <USBD_GetConfig+0x4a>
 800865a:	e012      	b.n	8008682 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3308      	adds	r3, #8
 8008666:	2201      	movs	r2, #1
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f927 	bl	80088be <USBD_CtlSendData>
        break;
 8008670:	e00c      	b.n	800868c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3304      	adds	r3, #4
 8008676:	2201      	movs	r2, #1
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f91f 	bl	80088be <USBD_CtlSendData>
        break;
 8008680:	e004      	b.n	800868c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f8a9 	bl	80087dc <USBD_CtlError>
        break;
 800868a:	bf00      	nop
}
 800868c:	bf00      	nop
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d81e      	bhi.n	80086ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	88db      	ldrh	r3, [r3, #6]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d004      	beq.n	80086be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f890 	bl	80087dc <USBD_CtlError>
        break;
 80086bc:	e01a      	b.n	80086f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d005      	beq.n	80086da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f043 0202 	orr.w	r2, r3, #2
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	330c      	adds	r3, #12
 80086de:	2202      	movs	r2, #2
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f8eb 	bl	80088be <USBD_CtlSendData>
      break;
 80086e8:	e004      	b.n	80086f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f875 	bl	80087dc <USBD_CtlError>
      break;
 80086f2:	bf00      	nop
  }
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	885b      	ldrh	r3, [r3, #2]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d106      	bne.n	800871c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f92b 	bl	8008972 <USBD_CtlSendStatus>
  }
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008734:	b2db      	uxtb	r3, r3
 8008736:	3b01      	subs	r3, #1
 8008738:	2b02      	cmp	r3, #2
 800873a:	d80b      	bhi.n	8008754 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	885b      	ldrh	r3, [r3, #2]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d10c      	bne.n	800875e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f910 	bl	8008972 <USBD_CtlSendStatus>
      }
      break;
 8008752:	e004      	b.n	800875e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f840 	bl	80087dc <USBD_CtlError>
      break;
 800875c:	e000      	b.n	8008760 <USBD_ClrFeature+0x3c>
      break;
 800875e:	bf00      	nop
  }
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	781a      	ldrb	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	781a      	ldrb	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff faa8 	bl	8007ce8 <SWAPBYTE>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3301      	adds	r3, #1
 80087a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3301      	adds	r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f7ff fa9b 	bl	8007ce8 <SWAPBYTE>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3301      	adds	r3, #1
 80087be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3301      	adds	r3, #1
 80087c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f7ff fa8e 	bl	8007ce8 <SWAPBYTE>
 80087cc:	4603      	mov	r3, r0
 80087ce:	461a      	mov	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	80da      	strh	r2, [r3, #6]
}
 80087d4:	bf00      	nop
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087e6:	2180      	movs	r1, #128	@ 0x80
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fc79 	bl	80090e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087ee:	2100      	movs	r1, #0
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fc75 	bl	80090e0 <USBD_LL_StallEP>
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b086      	sub	sp, #24
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d036      	beq.n	8008882 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008818:	6938      	ldr	r0, [r7, #16]
 800881a:	f000 f836 	bl	800888a <USBD_GetLen>
 800881e:	4603      	mov	r3, r0
 8008820:	3301      	adds	r3, #1
 8008822:	b29b      	uxth	r3, r3
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	4413      	add	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	7812      	ldrb	r2, [r2, #0]
 8008836:	701a      	strb	r2, [r3, #0]
  idx++;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	3301      	adds	r3, #1
 800883c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	4413      	add	r3, r2
 8008844:	2203      	movs	r2, #3
 8008846:	701a      	strb	r2, [r3, #0]
  idx++;
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	3301      	adds	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800884e:	e013      	b.n	8008878 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	4413      	add	r3, r2
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	7812      	ldrb	r2, [r2, #0]
 800885a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3301      	adds	r3, #1
 8008860:	613b      	str	r3, [r7, #16]
    idx++;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
 8008864:	3301      	adds	r3, #1
 8008866:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	4413      	add	r3, r2
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
    idx++;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	3301      	adds	r3, #1
 8008876:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e7      	bne.n	8008850 <USBD_GetString+0x52>
 8008880:	e000      	b.n	8008884 <USBD_GetString+0x86>
    return;
 8008882:	bf00      	nop
  }
}
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800889a:	e005      	b.n	80088a8 <USBD_GetLen+0x1e>
  {
    len++;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	3301      	adds	r3, #1
 80088a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	3301      	adds	r3, #1
 80088a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f5      	bne.n	800889c <USBD_GetLen+0x12>
  }

  return len;
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2202      	movs	r2, #2
 80088ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	2100      	movs	r1, #0
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fc84 	bl	80091f2 <USBD_LL_Transmit>

  return USBD_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	2100      	movs	r1, #0
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fc73 	bl	80091f2 <USBD_LL_Transmit>

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2203      	movs	r2, #3
 8008926:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	2100      	movs	r1, #0
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 fc77 	bl	8009234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	2100      	movs	r1, #0
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 fc66 	bl	8009234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2204      	movs	r2, #4
 800897e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008982:	2300      	movs	r3, #0
 8008984:	2200      	movs	r2, #0
 8008986:	2100      	movs	r1, #0
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fc32 	bl	80091f2 <USBD_LL_Transmit>

  return USBD_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2205      	movs	r2, #5
 80089a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089a8:	2300      	movs	r3, #0
 80089aa:	2200      	movs	r2, #0
 80089ac:	2100      	movs	r1, #0
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fc40 	bl	8009234 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089c4:	2200      	movs	r2, #0
 80089c6:	4912      	ldr	r1, [pc, #72]	@ (8008a10 <MX_USB_DEVICE_Init+0x50>)
 80089c8:	4812      	ldr	r0, [pc, #72]	@ (8008a14 <MX_USB_DEVICE_Init+0x54>)
 80089ca:	f7fe fe61 	bl	8007690 <USBD_Init>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089d4:	f7f8 f85e 	bl	8000a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80089d8:	490f      	ldr	r1, [pc, #60]	@ (8008a18 <MX_USB_DEVICE_Init+0x58>)
 80089da:	480e      	ldr	r0, [pc, #56]	@ (8008a14 <MX_USB_DEVICE_Init+0x54>)
 80089dc:	f7fe fe88 	bl	80076f0 <USBD_RegisterClass>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089e6:	f7f8 f855 	bl	8000a94 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80089ea:	490c      	ldr	r1, [pc, #48]	@ (8008a1c <MX_USB_DEVICE_Init+0x5c>)
 80089ec:	4809      	ldr	r0, [pc, #36]	@ (8008a14 <MX_USB_DEVICE_Init+0x54>)
 80089ee:	f7fe facd 	bl	8006f8c <USBD_DFU_RegisterMedia>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089f8:	f7f8 f84c 	bl	8000a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089fc:	4805      	ldr	r0, [pc, #20]	@ (8008a14 <MX_USB_DEVICE_Init+0x54>)
 80089fe:	f7fe fe9e 	bl	800773e <USBD_Start>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a08:	f7f8 f844 	bl	8000a94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a0c:	bf00      	nop
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	20000070 	.word	0x20000070
 8008a14:	200003b4 	.word	0x200003b4
 8008a18:	2000000c 	.word	0x2000000c
 8008a1c:	200000c0 	.word	0x200000c0

08008a20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2212      	movs	r2, #18
 8008a30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a32:	4b03      	ldr	r3, [pc, #12]	@ (8008a40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	2000008c 	.word	0x2000008c

08008a44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2204      	movs	r2, #4
 8008a54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a56:	4b03      	ldr	r3, [pc, #12]	@ (8008a64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	200000a0 	.word	0x200000a0

08008a68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	4907      	ldr	r1, [pc, #28]	@ (8008a9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a7e:	4808      	ldr	r0, [pc, #32]	@ (8008aa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a80:	f7ff febd 	bl	80087fe <USBD_GetString>
 8008a84:	e004      	b.n	8008a90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	4904      	ldr	r1, [pc, #16]	@ (8008a9c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a8a:	4805      	ldr	r0, [pc, #20]	@ (8008aa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a8c:	f7ff feb7 	bl	80087fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a90:	4b02      	ldr	r3, [pc, #8]	@ (8008a9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000684 	.word	0x20000684
 8008aa0:	08009370 	.word	0x08009370

08008aa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	4904      	ldr	r1, [pc, #16]	@ (8008ac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ab4:	4804      	ldr	r0, [pc, #16]	@ (8008ac8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ab6:	f7ff fea2 	bl	80087fe <USBD_GetString>
  return USBD_StrDesc;
 8008aba:	4b02      	ldr	r3, [pc, #8]	@ (8008ac4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	20000684 	.word	0x20000684
 8008ac8:	08009390 	.word	0x08009390

08008acc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	6039      	str	r1, [r7, #0]
 8008ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	221a      	movs	r2, #26
 8008adc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ade:	f000 f843 	bl	8008b68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ae2:	4b02      	ldr	r3, [pc, #8]	@ (8008aec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	200000a4 	.word	0x200000a4

08008af0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	6039      	str	r1, [r7, #0]
 8008afa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d105      	bne.n	8008b0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	4907      	ldr	r1, [pc, #28]	@ (8008b24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b06:	4808      	ldr	r0, [pc, #32]	@ (8008b28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b08:	f7ff fe79 	bl	80087fe <USBD_GetString>
 8008b0c:	e004      	b.n	8008b18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	4904      	ldr	r1, [pc, #16]	@ (8008b24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b12:	4805      	ldr	r0, [pc, #20]	@ (8008b28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b14:	f7ff fe73 	bl	80087fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b18:	4b02      	ldr	r3, [pc, #8]	@ (8008b24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000684 	.word	0x20000684
 8008b28:	080093a4 	.word	0x080093a4

08008b2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d105      	bne.n	8008b4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	4907      	ldr	r1, [pc, #28]	@ (8008b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b42:	4808      	ldr	r0, [pc, #32]	@ (8008b64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b44:	f7ff fe5b 	bl	80087fe <USBD_GetString>
 8008b48:	e004      	b.n	8008b54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	4904      	ldr	r1, [pc, #16]	@ (8008b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b4e:	4805      	ldr	r0, [pc, #20]	@ (8008b64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b50:	f7ff fe55 	bl	80087fe <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b54:	4b02      	ldr	r3, [pc, #8]	@ (8008b60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000684 	.word	0x20000684
 8008b64:	080093b0 	.word	0x080093b0

08008b68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008bac <Get_SerialNum+0x44>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b74:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb0 <Get_SerialNum+0x48>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb4 <Get_SerialNum+0x4c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4413      	add	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b8e:	2208      	movs	r2, #8
 8008b90:	4909      	ldr	r1, [pc, #36]	@ (8008bb8 <Get_SerialNum+0x50>)
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 f814 	bl	8008bc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b98:	2204      	movs	r2, #4
 8008b9a:	4908      	ldr	r1, [pc, #32]	@ (8008bbc <Get_SerialNum+0x54>)
 8008b9c:	68b8      	ldr	r0, [r7, #8]
 8008b9e:	f000 f80f 	bl	8008bc0 <IntToUnicode>
  }
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	1fff7a10 	.word	0x1fff7a10
 8008bb0:	1fff7a14 	.word	0x1fff7a14
 8008bb4:	1fff7a18 	.word	0x1fff7a18
 8008bb8:	200000a6 	.word	0x200000a6
 8008bbc:	200000b6 	.word	0x200000b6

08008bc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]
 8008bd6:	e027      	b.n	8008c28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	0f1b      	lsrs	r3, r3, #28
 8008bdc:	2b09      	cmp	r3, #9
 8008bde:	d80b      	bhi.n	8008bf8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	0f1b      	lsrs	r3, r3, #28
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	4619      	mov	r1, r3
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	440b      	add	r3, r1
 8008bf0:	3230      	adds	r2, #48	@ 0x30
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	e00a      	b.n	8008c0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	0f1b      	lsrs	r3, r3, #28
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4619      	mov	r1, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	440b      	add	r3, r1
 8008c08:	3237      	adds	r2, #55	@ 0x37
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	3301      	adds	r3, #1
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	2200      	movs	r2, #0
 8008c20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	3301      	adds	r3, #1
 8008c26:	75fb      	strb	r3, [r7, #23]
 8008c28:	7dfa      	ldrb	r2, [r7, #23]
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d3d3      	bcc.n	8008bd8 <IntToUnicode+0x18>
  }
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8008c42:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8008c52:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8008c66:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8008c80:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8008c9a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8008cb6:	7afb      	ldrb	r3, [r7, #11]
 8008cb8:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8008cba:	bf00      	nop
  }
  return (USBD_OK);
 8008cbc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b0a0      	sub	sp, #128	@ 0x80
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cd4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	605a      	str	r2, [r3, #4]
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ce4:	f107 0314 	add.w	r3, r7, #20
 8008ce8:	2258      	movs	r2, #88	@ 0x58
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fb07 	bl	8009300 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cfa:	d155      	bne.n	8008da8 <HAL_PCD_MspInit+0xdc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008cfc:	2320      	movs	r3, #32
 8008cfe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008d00:	2300      	movs	r3, #0
 8008d02:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008d04:	f107 0314 	add.w	r3, r7, #20
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fb fb6b 	bl	80043e4 <HAL_RCCEx_PeriphCLKConfig>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8008d14:	f7f7 febe 	bl	8000a94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d18:	2300      	movs	r3, #0
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	4b24      	ldr	r3, [pc, #144]	@ (8008db0 <HAL_PCD_MspInit+0xe4>)
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d20:	4a23      	ldr	r2, [pc, #140]	@ (8008db0 <HAL_PCD_MspInit+0xe4>)
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d28:	4b21      	ldr	r3, [pc, #132]	@ (8008db0 <HAL_PCD_MspInit+0xe4>)
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008d34:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8008d38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d42:	2303      	movs	r3, #3
 8008d44:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d46:	230a      	movs	r3, #10
 8008d48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d4a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4818      	ldr	r0, [pc, #96]	@ (8008db4 <HAL_PCD_MspInit+0xe8>)
 8008d52:	f7f8 fe31 	bl	80019b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008d56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d60:	2300      	movs	r3, #0
 8008d62:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008d64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4812      	ldr	r0, [pc, #72]	@ (8008db4 <HAL_PCD_MspInit+0xe8>)
 8008d6c:	f7f8 fe24 	bl	80019b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d70:	4b0f      	ldr	r3, [pc, #60]	@ (8008db0 <HAL_PCD_MspInit+0xe4>)
 8008d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d74:	4a0e      	ldr	r2, [pc, #56]	@ (8008db0 <HAL_PCD_MspInit+0xe4>)
 8008d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d7a:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	4b0b      	ldr	r3, [pc, #44]	@ (8008db0 <HAL_PCD_MspInit+0xe4>)
 8008d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d84:	4a0a      	ldr	r2, [pc, #40]	@ (8008db0 <HAL_PCD_MspInit+0xe4>)
 8008d86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d8c:	4b08      	ldr	r3, [pc, #32]	@ (8008db0 <HAL_PCD_MspInit+0xe4>)
 8008d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	2043      	movs	r0, #67	@ 0x43
 8008d9e:	f7f8 fdd4 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008da2:	2043      	movs	r0, #67	@ 0x43
 8008da4:	f7f8 fded 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008da8:	bf00      	nop
 8008daa:	3780      	adds	r7, #128	@ 0x80
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40023800 	.word	0x40023800
 8008db4:	40020000 	.word	0x40020000

08008db8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f7fe fd1b 	bl	800780a <USBD_LL_SetupStage>
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8008dee:	78fa      	ldrb	r2, [r7, #3]
 8008df0:	6879      	ldr	r1, [r7, #4]
 8008df2:	4613      	mov	r3, r2
 8008df4:	00db      	lsls	r3, r3, #3
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	440b      	add	r3, r1
 8008dfc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	4619      	mov	r1, r3
 8008e06:	f7fe fd55 	bl	80078b4 <USBD_LL_DataOutStage>
}
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8008e24:	78fa      	ldrb	r2, [r7, #3]
 8008e26:	6879      	ldr	r1, [r7, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	3348      	adds	r3, #72	@ 0x48
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	78fb      	ldrb	r3, [r7, #3]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f7fe fd9e 	bl	800797a <USBD_LL_DataInStage>
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fe feb2 	bl	8007bbe <USBD_LL_SOF>
}
 8008e5a:	bf00      	nop
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d001      	beq.n	8008e7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e76:	f7f7 fe0d 	bl	8000a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e80:	7bfa      	ldrb	r2, [r7, #15]
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe fe5c 	bl	8007b42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7fe fe08 	bl	8007aa6 <USBD_LL_Reset>
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fe57 	bl	8007b62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	6812      	ldr	r2, [r2, #0]
 8008ec2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ec6:	f043 0301 	orr.w	r3, r3, #1
 8008eca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d005      	beq.n	8008ee0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ed4:	4b04      	ldr	r3, [pc, #16]	@ (8008ee8 <HAL_PCD_SuspendCallback+0x48>)
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	4a03      	ldr	r2, [pc, #12]	@ (8008ee8 <HAL_PCD_SuspendCallback+0x48>)
 8008eda:	f043 0306 	orr.w	r3, r3, #6
 8008ede:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	e000ed00 	.word	0xe000ed00

08008eec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fe fe47 	bl	8007b8e <USBD_LL_Resume>
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fe95 	bl	8007c4e <USBD_LL_IsoOUTIncomplete>
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe fe5d 	bl	8007c02 <USBD_LL_IsoINIncomplete>
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe fe9b 	bl	8007c9a <USBD_LL_DevConnected>
}
 8008f64:	bf00      	nop
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fe98 	bl	8007cb0 <USBD_LL_DevDisconnected>
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d13f      	bne.n	8009018 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f98:	4a22      	ldr	r2, [pc, #136]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a20      	ldr	r2, [pc, #128]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fa4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008faa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008fae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fb2:	2206      	movs	r2, #6
 8008fb4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fb8:	2202      	movs	r2, #2
 8008fba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fbc:	4b19      	ldr	r3, [pc, #100]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008fc2:	4b18      	ldr	r3, [pc, #96]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008fc8:	4b16      	ldr	r3, [pc, #88]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fca:	2201      	movs	r2, #1
 8008fcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008fce:	4b15      	ldr	r3, [pc, #84]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008fd4:	4b13      	ldr	r3, [pc, #76]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8008fda:	4b12      	ldr	r3, [pc, #72]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fdc:	2201      	movs	r2, #1
 8008fde:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008fe0:	4b10      	ldr	r3, [pc, #64]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008fec:	480d      	ldr	r0, [pc, #52]	@ (8009024 <USBD_LL_Init+0x9c>)
 8008fee:	f7f9 fe26 	bl	8002c3e <HAL_PCD_Init>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008ff8:	f7f7 fd4c 	bl	8000a94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ffc:	2180      	movs	r1, #128	@ 0x80
 8008ffe:	4809      	ldr	r0, [pc, #36]	@ (8009024 <USBD_LL_Init+0x9c>)
 8009000:	f7fa ff8f 	bl	8003f22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009004:	2240      	movs	r2, #64	@ 0x40
 8009006:	2100      	movs	r1, #0
 8009008:	4806      	ldr	r0, [pc, #24]	@ (8009024 <USBD_LL_Init+0x9c>)
 800900a:	f7fa ff43 	bl	8003e94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800900e:	2280      	movs	r2, #128	@ 0x80
 8009010:	2101      	movs	r1, #1
 8009012:	4804      	ldr	r0, [pc, #16]	@ (8009024 <USBD_LL_Init+0x9c>)
 8009014:	f7fa ff3e 	bl	8003e94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000884 	.word	0x20000884

08009028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800903e:	4618      	mov	r0, r3
 8009040:	f7f9 ff21 	bl	8002e86 <HAL_PCD_Start>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	4618      	mov	r0, r3
 800904c:	f000 f92c 	bl	80092a8 <USBD_Get_USB_Status>
 8009050:	4603      	mov	r3, r0
 8009052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009054:	7bbb      	ldrb	r3, [r7, #14]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009074:	4618      	mov	r0, r3
 8009076:	f7f9 ff39 	bl	8002eec <HAL_PCD_Stop>
 800907a:	4603      	mov	r3, r0
 800907c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	4618      	mov	r0, r3
 8009082:	f000 f911 	bl	80092a8 <USBD_Get_USB_Status>
 8009086:	4603      	mov	r3, r0
 8009088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800908a:	7bbb      	ldrb	r3, [r7, #14]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	4608      	mov	r0, r1
 800909e:	4611      	mov	r1, r2
 80090a0:	461a      	mov	r2, r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	70fb      	strb	r3, [r7, #3]
 80090a6:	460b      	mov	r3, r1
 80090a8:	70bb      	strb	r3, [r7, #2]
 80090aa:	4613      	mov	r3, r2
 80090ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80090bc:	78bb      	ldrb	r3, [r7, #2]
 80090be:	883a      	ldrh	r2, [r7, #0]
 80090c0:	78f9      	ldrb	r1, [r7, #3]
 80090c2:	f7fa fb50 	bl	8003766 <HAL_PCD_EP_Open>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f8eb 	bl	80092a8 <USBD_Get_USB_Status>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fa fc2e 	bl	8003960 <HAL_PCD_EP_SetStall>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f8cc 	bl	80092a8 <USBD_Get_USB_Status>
 8009110:	4603      	mov	r3, r0
 8009112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009114:	7bbb      	ldrb	r3, [r7, #14]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	460b      	mov	r3, r1
 8009128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009138:	78fa      	ldrb	r2, [r7, #3]
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7fa fc73 	bl	8003a28 <HAL_PCD_EP_ClrStall>
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	4618      	mov	r0, r3
 800914a:	f000 f8ad 	bl	80092a8 <USBD_Get_USB_Status>
 800914e:	4603      	mov	r3, r0
 8009150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009152:	7bbb      	ldrb	r3, [r7, #14]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800916e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009174:	2b00      	cmp	r3, #0
 8009176:	da0b      	bge.n	8009190 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	4613      	mov	r3, r2
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	333e      	adds	r3, #62	@ 0x3e
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	e00b      	b.n	80091a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009196:	68f9      	ldr	r1, [r7, #12]
 8009198:	4613      	mov	r3, r2
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	1a9b      	subs	r3, r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80091a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	460b      	mov	r3, r1
 80091be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80091ce:	78fa      	ldrb	r2, [r7, #3]
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fa faa2 	bl	800371c <HAL_PCD_SetAddress>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f862 	bl	80092a8 <USBD_Get_USB_Status>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b086      	sub	sp, #24
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	60f8      	str	r0, [r7, #12]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	603b      	str	r3, [r7, #0]
 80091fe:	460b      	mov	r3, r1
 8009200:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009210:	7af9      	ldrb	r1, [r7, #11]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	f7fa fb59 	bl	80038cc <HAL_PCD_EP_Transmit>
 800921a:	4603      	mov	r3, r0
 800921c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	4618      	mov	r0, r3
 8009222:	f000 f841 	bl	80092a8 <USBD_Get_USB_Status>
 8009226:	4603      	mov	r3, r0
 8009228:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800922a:	7dbb      	ldrb	r3, [r7, #22]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	607a      	str	r2, [r7, #4]
 800923e:	603b      	str	r3, [r7, #0]
 8009240:	460b      	mov	r3, r1
 8009242:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8009252:	7af9      	ldrb	r1, [r7, #11]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	f7fa faed 	bl	8003836 <HAL_PCD_EP_Receive>
 800925c:	4603      	mov	r3, r0
 800925e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f820 	bl	80092a8 <USBD_Get_USB_Status>
 8009268:	4603      	mov	r3, r0
 800926a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800926c:	7dbb      	ldrb	r3, [r7, #22]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3718      	adds	r7, #24
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009280:	4b03      	ldr	r3, [pc, #12]	@ (8009290 <USBD_static_malloc+0x18>)
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20000c8c 	.word	0x20000c8c

08009294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]

}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d817      	bhi.n	80092ec <USBD_Get_USB_Status+0x44>
 80092bc:	a201      	add	r2, pc, #4	@ (adr r2, 80092c4 <USBD_Get_USB_Status+0x1c>)
 80092be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c2:	bf00      	nop
 80092c4:	080092d5 	.word	0x080092d5
 80092c8:	080092db 	.word	0x080092db
 80092cc:	080092e1 	.word	0x080092e1
 80092d0:	080092e7 	.word	0x080092e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
    break;
 80092d8:	e00b      	b.n	80092f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092da:	2303      	movs	r3, #3
 80092dc:	73fb      	strb	r3, [r7, #15]
    break;
 80092de:	e008      	b.n	80092f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092e0:	2301      	movs	r3, #1
 80092e2:	73fb      	strb	r3, [r7, #15]
    break;
 80092e4:	e005      	b.n	80092f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092e6:	2303      	movs	r3, #3
 80092e8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ea:	e002      	b.n	80092f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80092ec:	2303      	movs	r3, #3
 80092ee:	73fb      	strb	r3, [r7, #15]
    break;
 80092f0:	bf00      	nop
  }
  return usb_status;
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <memset>:
 8009300:	4402      	add	r2, r0
 8009302:	4603      	mov	r3, r0
 8009304:	4293      	cmp	r3, r2
 8009306:	d100      	bne.n	800930a <memset+0xa>
 8009308:	4770      	bx	lr
 800930a:	f803 1b01 	strb.w	r1, [r3], #1
 800930e:	e7f9      	b.n	8009304 <memset+0x4>

08009310 <__libc_init_array>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	4d0d      	ldr	r5, [pc, #52]	@ (8009348 <__libc_init_array+0x38>)
 8009314:	4c0d      	ldr	r4, [pc, #52]	@ (800934c <__libc_init_array+0x3c>)
 8009316:	1b64      	subs	r4, r4, r5
 8009318:	10a4      	asrs	r4, r4, #2
 800931a:	2600      	movs	r6, #0
 800931c:	42a6      	cmp	r6, r4
 800931e:	d109      	bne.n	8009334 <__libc_init_array+0x24>
 8009320:	4d0b      	ldr	r5, [pc, #44]	@ (8009350 <__libc_init_array+0x40>)
 8009322:	4c0c      	ldr	r4, [pc, #48]	@ (8009354 <__libc_init_array+0x44>)
 8009324:	f000 f818 	bl	8009358 <_init>
 8009328:	1b64      	subs	r4, r4, r5
 800932a:	10a4      	asrs	r4, r4, #2
 800932c:	2600      	movs	r6, #0
 800932e:	42a6      	cmp	r6, r4
 8009330:	d105      	bne.n	800933e <__libc_init_array+0x2e>
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	f855 3b04 	ldr.w	r3, [r5], #4
 8009338:	4798      	blx	r3
 800933a:	3601      	adds	r6, #1
 800933c:	e7ee      	b.n	800931c <__libc_init_array+0xc>
 800933e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009342:	4798      	blx	r3
 8009344:	3601      	adds	r6, #1
 8009346:	e7f2      	b.n	800932e <__libc_init_array+0x1e>
 8009348:	08009440 	.word	0x08009440
 800934c:	08009440 	.word	0x08009440
 8009350:	08009440 	.word	0x08009440
 8009354:	08009444 	.word	0x08009444

08009358 <_init>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr

08009364 <_fini>:
 8009364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009366:	bf00      	nop
 8009368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936a:	bc08      	pop	{r3}
 800936c:	469e      	mov	lr, r3
 800936e:	4770      	bx	lr
